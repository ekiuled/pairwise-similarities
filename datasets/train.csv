"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",1,Method public void beginArray() throws IOException    (JsonReader.java),Method public void endArray() throws IOException    (JsonReader.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Class  MockitoException    (MockitoException.java)
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0,Method public char getAsCharacter()    (JsonElement.java),Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String msg)    (Logger.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)"
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertNull(String message, Object object)    (Assert.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0,Method public char getAsCharacter()    (JsonElement.java),Method public void endObject() throws IOException    (JsonReader.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",1,EnumConstant BEGIN_OBJECT    (JsonToken.java),EnumConstant END_OBJECT    (JsonToken.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"Returns a new fresh folder with the given name under the temporary
folder.","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)",# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"If called with an expression evaluating to false, the test will halt and be ignored.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static void assumeTrue(boolean b)    (Assume.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public String getAsString()    (JsonElement.java),Method public float getAsFloat()    (JsonElement.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public void endObject() throws IOException    (JsonReader.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",1,"Method public JsonElement toJsonTree(Object src, Type typeOfSrc)    (Gson.java)","Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)"
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(long expected, long actual)    (Assert.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java)
"An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Adds to errors if the test class has more than one constructor
(do not override)",0,# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java),# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java),"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.",0,# Class  CallsRealMethods    (CallsRealMethods.java),"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)",# Method  protected List<MethodRule> rules(Object target)    (BlockJUnit4ClassRunner.java)
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),"# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0,"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)",# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java)
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  MethodValidator    (MethodValidator.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0,Method public boolean getAsBoolean()    (JsonElement.java),Method public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)    (GsonBuilder.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1,Method public String getAsString()    (JsonPrimitive.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public double getAsDouble()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  protected void tearDown() throws Exception    (TestCase.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static MockSettings withSettings()    (Mockito.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",0,# Method  protected void setUp() throws Exception    (TestCase.java),"# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Interface  Marker    (Marker.java)
Invoked when a test is skipped due to a failed assumption.,Invoked when a test is skipped due to a failed assumption.,1,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the method (or null if not)",1,# Method  public Class<?> getTestClass()    (Description.java),# Method  public String getMethodName()    (Description.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0,Method public boolean nextBoolean() throws IOException    (JsonReader.java),Method public int getAsInt()    (JsonPrimitive.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0,"Method public void toJson(Object src, Appendable writer) throws JsonIOException    (Gson.java)",Method public float getAsFloat()    (JsonPrimitive.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0,Method public long getAsLong()    (JsonElement.java),Method public int getAsInt()    (JsonPrimitive.java)
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short leq(short value)    (AdditionalMatchers.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public static void assertNotNull(Object object)    (Assert.java),"# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",0,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)"
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  protected void setUp() throws Exception    (TestCase.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)","Method public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public float getAsFloat()    (JsonPrimitive.java)
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"@return If this describes a method invocation,
the class of the test instance.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0,# Method  public Class<?> getTestClass()    (Description.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  ClassRoadie    (ClassRoadie.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Sets the name of the suite.

@param name the name to set",0,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)",# Method  public void setName(String name)    (TestSuite.java)
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  ClassRoadie    (ClassRoadie.java)
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public GsonBuilder setDateFormat(int style)    (GsonBuilder.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,# Method  public static void assertTrue(boolean condition)    (TestCase.java),"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)"
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)",# Method  public static long not(long first)    (AdditionalMatchers.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public float getAsFloat()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public byte getAsByte()    (JsonElement.java),Class DateTypeAdapter    (DateTypeAdapter.java)
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)",# Method  public Result run(Request request)    (MaxCore.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0,"# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(Object expected, Object actual)    (Assert.java)"
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public BigInteger getAsBigInteger()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",0,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Sets the name of a TestCase

@param name the name to set",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)",# Method  public void setName(String name)    (TestCase.java)
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","If called with an expression evaluating to false, the test will halt and be ignored.",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assumeTrue(boolean b)    (Assume.java)
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0,Method public BigDecimal getAsBigDecimal()    (JsonElement.java),Method public short getAsShort()    (JsonPrimitive.java)
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),Method public long getAsLong()    (JsonPrimitive.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java)
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,"Method public JsonElement toJsonTree(Object src, Type typeOfSrc)    (Gson.java)",Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",Counts the number of test cases that will be run by this test.,0,# Method  public static void assertTrue(boolean condition)    (TestCase.java),# Method  public int countTestCases()    (TestSuite.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static short geq(short value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0,# Method  public static Timeout seconds(long seconds)    (Timeout.java),"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public String getAsString()    (JsonElement.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,Method public long getAsLong()    (JsonArray.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",1,"# Method  public static void assertEquals(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(Object expected, Object actual)    (Assert.java)"
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0,Method public char getAsCharacter()    (JsonElement.java),Method public void endArray() throws IOException    (JsonReader.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertTrue(boolean condition)    (TestCase.java),"# Method  public static void assertFalse(String message, boolean condition)    (TestCase.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",1,"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0,Method public Number getAsNumber()    (JsonElement.java),Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public Number getAsNumber()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0,Method public String toJson(Object src)    (Gson.java),Method public short getAsShort()    (JsonPrimitive.java)
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public Number getAsNumber()    (JsonElement.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public double getAsDouble()    (JsonElement.java),Method public float getAsFloat()    (JsonElement.java)
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static short leq(short value)    (AdditionalMatchers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",1,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),Field RETURNS_SMART_NULLS    (Mockito.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)"
"Adds to errors if the test class has more than one constructor
(do not override)","Adds to errors if the test class's single constructor takes
parameters (do not override)",1,# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java),# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public VerificationMode never()    (VerificationWithTimeout.java),# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Construct a new InitializationError with one cause
with message string","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0,# Method  public InitializationError(String string)    (InitializationError.java),# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java)
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1,Method public double getAsDouble()    (JsonPrimitive.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Interface  MockSettings    (MockSettings.java)
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,# Method  public static Request aClass(Class<?> clazz)    (Request.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",1,"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)",# Method  public static short leq(short value)    (AdditionalMatchers.java)
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Matches if the result has one or more failures, and at least one of them
contains string
",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)",# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",1,"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)","Method public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException    (Gson.java)"
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0,# Class  CallsRealMethods    (CallsRealMethods.java),# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static boolean not(boolean first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public VerificationMode never()    (VerificationWithTimeout.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Returns a new builder for building an instance.

@since 4.12",1,# Method  public static Builder builder()    (TemporaryFolder.java),# Method  public static Builder builder()    (Timeout.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public double getAsDouble()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",1,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)"
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0,Method public String toJson(Object src)    (Gson.java),Method public void endArray() throws IOException    (JsonReader.java)
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)","# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",1,# Method  public static Builder builder()    (FailOnTimeout.java),# Method  public static Builder builder()    (TemporaryFolder.java)
Returns a new fresh file with a random name under the temporary folder.,"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public File newFile() throws IOException    (TemporaryFolder.java),"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0,Method public boolean getAsBoolean()    (JsonElement.java),Method public void beginArray() throws IOException    (JsonReader.java)
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public double getAsDouble()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public long getAsLong()    (JsonElement.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)"
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java)
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public BigInteger getAsBigInteger()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}

@since 4.0",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)",# Class  AllTests    (AllTests.java)
"This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","convenience method to get this element as a String.

@return get this element as a String.",0,"Method public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException    (Gson.java)",Method public String getAsString()    (JsonPrimitive.java)
"If called with an expression evaluating to false, the test will halt and be ignored.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",1,# Method  public static void assumeTrue(boolean b)    (Assume.java),"# Method  public static void assumeTrue(String message, boolean b)    (Assume.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (Assert.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  MethodRoadie    (MethodRoadie.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",1,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",1,Method public void beginArray() throws IOException    (JsonReader.java),Method public void endObject() throws IOException    (JsonReader.java)
Invoked when a test is skipped due to a failed assumption.,"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public double getAsDouble()    (JsonElement.java)
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",1,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)","Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)"
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public double getAsDouble()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public float getAsFloat()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int gt(int value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Interface  Marker    (Marker.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,Method public Number getAsNumber()    (JsonArray.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long gt(long value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Returns a new builder for building an instance.

@since 4.12","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0,# Method  public static Builder builder()    (FailOnTimeout.java),"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java)
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)",# Method  protected void tearDown() throws Exception    (TestCase.java)
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0,Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java),EnumConstant END_OBJECT    (JsonToken.java)
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
Returns a new fresh file with a random name under the temporary folder.,"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12",0,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public static Timeout seconds(long seconds)    (Timeout.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public long getAsLong()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",1,Method public GsonBuilder setDateFormat(int style)    (GsonBuilder.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(String format, Object arg)    (Logger.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Interface  MockSettings    (MockSettings.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0,Method public long getAsLong()    (JsonElement.java),Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0,# Class  TestClass    (TestClass.java),"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0,Method public boolean getAsBoolean()    (JsonElement.java),Method public Number getAsNumber()    (JsonPrimitive.java)
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long lt(long value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0,"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)",Method public String nextString() throws IOException    (JsonReader.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Interface  Marker    (Marker.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"Returns a new fresh folder with the given name under the temporary
folder.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public double getAsDouble()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (TestCase.java)"
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0,Method public boolean nextBoolean() throws IOException    (JsonReader.java),Method public Number getAsNumber()    (JsonPrimitive.java)
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static long gt(long value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java)
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public long getAsLong()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)","# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)","# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)"
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static long geq(long value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)"
"Returns true if this member is public, false if not.","Construct a new InitializationError with one or more
errors errors as causes
",0,# Method  public boolean isPublic()    (FrameworkMember.java),# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",Counts the number of test cases that will be run by this test.,0,"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)",# Method  public int countTestCases()    (TestSuite.java)
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public Number getAsNumber()    (JsonElement.java),Method public long getAsLong()    (JsonElement.java)
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public short getAsShort()    (JsonArray.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0,"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",Method public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)    (GsonBuilder.java)
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",1,# Method  public static void assertTrue(boolean condition)    (Assert.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (Assert.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",0,# Method  public static Timeout seconds(long seconds)    (Timeout.java),# Method  public static Request aClass(Class<?> clazz)    (Request.java)
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static short lt(short value)    (AdditionalMatchers.java)
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0,Method public double getAsDouble()    (JsonArray.java),EnumConstant BEGIN_ARRAY    (JsonToken.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Sets the name of the suite.

@param name the name to set",0,# Method  public static void assertNull(Object object)    (Assert.java),# Method  public void setName(String name)    (TestSuite.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public Number getAsNumber()    (JsonElement.java),Method public float getAsFloat()    (JsonElement.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),"# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",0,# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1,Method public double getAsDouble()    (JsonArray.java),Method public long getAsLong()    (JsonArray.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)
"@return If this describes a method invocation,
the name of the method (or null if not)","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public String getMethodName()    (Description.java),"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Matches if the result has one or more failures, and at least one of them
contains string
","Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",0,# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java),"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)"
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public String getAsString()    (JsonArray.java),Method public BigInteger getAsBigInteger()    (JsonArray.java)
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,# Method  public static void assertTrue(boolean condition)    (Assert.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
Counts the number of test cases that will be run by this test.,"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public abstract int countTestCases()    (Test.java),# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0,# Class  ClassRoadie    (ClassRoadie.java),# Method  public static void assertTrue(boolean condition)    (TestCase.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",1,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Method  public T getAnnotation(Class<T> annotationType)    (Description.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1,Method public float getAsFloat()    (JsonArray.java),Method public long getAsLong()    (JsonArray.java)
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a String.

@return get this element as a String.",0,Method public short getAsShort()    (JsonArray.java),Method public String getAsString()    (JsonPrimitive.java)
"Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",1,Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java),Class TimeTypeAdapter    (TimeTypeAdapter.java)
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),"Method public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,"# Method  public static void assertNull(String message, Object object)    (Assert.java)","# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method public JsonPrimitive getAsJsonPrimitive()    (JsonElement.java),"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodRoadie    (MethodRoadie.java),# Class  MethodValidator    (MethodValidator.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Returns a new builder for building an instance.

@since 4.12","Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0,# Method  public static Builder builder()    (Timeout.java),# Method  public static void assertTrue(boolean condition)    (Assert.java)
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public int getAsInt()    (JsonPrimitive.java)
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",1,EnumConstant BEGIN_ARRAY    (JsonToken.java),EnumConstant BEGIN_OBJECT    (JsonToken.java)
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",1,Method public JsonPrimitive getAsJsonPrimitive(String memberName)    (JsonObject.java),Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java)
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Adds to errors if the test class's single constructor takes
parameters (do not override)",0,"# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)",# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.",1,Method public String getAsString()    (JsonArray.java),Method public double getAsDouble()    (JsonArray.java)
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int leq(int value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,# Method  public static Timeout millis(long millis)    (Timeout.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public double getAsDouble()    (JsonArray.java),Method public BigInteger getAsBigInteger()    (JsonArray.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,"# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)","# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Class  ClassRoadie    (ClassRoadie.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0,Method public long getAsLong()    (JsonElement.java),"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)"
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public Number getAsNumber()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static long not(long first)    (AdditionalMatchers.java)
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public Result run(Request request)    (MaxCore.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java)
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0,"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)",Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)","# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Interface  Marker    (Marker.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public long getAsLong()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static int geq(int value)    (AdditionalMatchers.java)
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0,Method public BigInteger getAsBigInteger()    (JsonElement.java),Method public int nextInt() throws IOException    (JsonReader.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)",# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public double getAsDouble()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the class of the test instance",1,# Method  public Class<?> getTestClass()    (Description.java),# Method  public String getClassName()    (Description.java)
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public Number getAsNumber()    (JsonArray.java),Method public BigDecimal getAsBigDecimal()    (JsonArray.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Sets the name of the suite.

@param name the name to set",0,"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)",# Method  public void setName(String name)    (TestSuite.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",1,"# Method  public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)","# Method  public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),# Method  public static void assertTrue(boolean condition)    (Assert.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static MockSettings withSettings()    (Mockito.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long leq(long value)    (AdditionalMatchers.java),"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public Number getAsNumber()    (JsonElement.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public double getAsDouble()    (JsonPrimitive.java)
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java)
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long gt(long value)    (AdditionalMatchers.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public String getAsString()    (JsonArray.java)
"Construct a new InitializationError with one cause
with message string","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",0,# Method  public InitializationError(String string)    (InitializationError.java),# Method  public T getAnnotation(Class<T> annotationType)    (Description.java)
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method public Number getAsNumber()    (JsonElement.java),"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)"
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",1,Method public long nextLong() throws IOException    (JsonReader.java),Method public int nextInt() throws IOException    (JsonReader.java)
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public long getAsLong()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Interface  MockSettings    (MockSettings.java)
"Returns a new builder for building an instance.

@since 4.12","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,# Method  public static Builder builder()    (FailOnTimeout.java),# Class  TestClass    (TestClass.java)
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Returns a new fresh folder with the given name(s) under the temporary
folder.",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0,Method public String getAsString()    (JsonArray.java),Method public JsonElement toJsonTree(Object src)    (Gson.java)
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Class  TestClass    (TestClass.java),"# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static char not(char first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0,Method public JsonPrimitive getAsJsonPrimitive()    (JsonElement.java),EnumConstant BEGIN_OBJECT    (JsonToken.java)
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",1,Class DateTypeAdapter    (DateTypeAdapter.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),"# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodRoadie    (MethodRoadie.java),# Class  ClassRoadie    (ClassRoadie.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public String getAsString()    (JsonElement.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0,Method public boolean getAsBoolean()    (JsonArray.java),Method public BigInteger getAsBigInteger()    (JsonElement.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0,Method public String getAsString()    (JsonArray.java),Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java)
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0,Class DateTypeAdapter    (DateTypeAdapter.java),"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public JsonElement toJsonTree(Object src)    (Gson.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public float getAsFloat()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short leq(short value)    (AdditionalMatchers.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Returns a new fresh folder with the given name under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",1,# Method  public static MockSettings withSettings()    (Mockito.java),# Interface  MockSettings    (MockSettings.java)
"Construct a new InitializationError with one or more
errors errors as causes
","Matches if the result has exactly one failure, and it contains string",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java)
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)",# Method  public static int geq(int value)    (AdditionalMatchers.java)
"Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",1,# Method  public Result run(Class<?>... classes)    (JUnitCore.java),"# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static float not(float first)    (AdditionalMatchers.java)
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,"# Method  public static void assertEquals(Object expected, Object actual)    (TestCase.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"@return If this describes a method invocation,
the class of the test instance.","Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,# Method  public Class<?> getTestClass()    (Description.java),"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)"
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public String nextString() throws IOException    (JsonReader.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public long getAsLong()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java)
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static long not(long first)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public float getAsFloat()    (JsonArray.java),Class TimeTypeAdapter    (TimeTypeAdapter.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Adds to errors if the test class has more than one constructor
(do not override)",0,"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)",# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static int geq(int value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long leq(long value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",Returns a new fresh file with the given name under the temporary folder.,0,# Method  public static Builder builder()    (TemporaryFolder.java),# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0,"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)","Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)",# Method  public static int geq(int value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Construct a new InitializationError with one or more
errors errors as causes
","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",1,Method public BigDecimal getAsBigDecimal()    (JsonElement.java),Method public BigInteger getAsBigInteger()    (JsonElement.java)
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Sets the name of a TestCase

@param name the name to set",0,# Method  public static void assertNull(Object object)    (TestCase.java),# Method  public void setName(String name)    (TestCase.java)
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public BigInteger getAsBigInteger()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public int getAsInt()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",1,"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)","# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java)
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0,Method public String getAsString()    (JsonArray.java),"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a String.

@return get this element as a String.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public String getAsString()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"The Test annotation tells JUnit that the public void method
to which it is attached can be run as a test case. To run the method,
JUnit first constructs a fresh instance of the class then invokes the
annotated method. Any exceptions thrown by the test will be reported
by JUnit as a failure. If no exceptions are thrown, the test is assumed
to have succeeded.

A simple test looks like this:

public class Example {
@Test
public void method() {
org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
}
}

The Test annotation supports two optional parameters.
The first, expected, declares that a test method should throw
an exception. If it doesn't throw an exception or if it throws a different exception
than the one declared, the test fails. For example, the following test succeeds:

@Test(expected=IndexOutOfBoundsException.class) public void outOfBounds() {
new ArrayList&lt;Object&gt;().get(1);
}

If the exception's message or one of its properties should be verified, the
org.junit.rules.ExpectedException ExpectedException rule can be used. Further
information about exception testing can be found at the
<a href=""https://github.com/junit-team/junit/wiki/Exception-testing"">JUnit Wiki.

The second optional parameter, timeout, causes a test to fail if it takes
longer than a specified amount of clock time (measured in milliseconds). The following test fails:

@Test(timeout=100) public void infinity() {
while(true);
}

Warning: while timeout is useful to catch and terminate
infinite loops, it should not be considered deterministic. The
following test may or may not fail depending on how the operating system
schedules threads:

@Test(timeout=100) public void sleep100() {
Thread.sleep(100);
}

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,# Annotation  Test    (Test.java),"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","convenience method to get this element as a String.

@return get this element as a String.",0,Method public void beginObject() throws IOException    (JsonReader.java),Method public String getAsString()    (JsonPrimitive.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0,Method public long getAsLong()    (JsonElement.java),Method public long nextLong() throws IOException    (JsonReader.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh file with a random name under the temporary folder.,1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFile() throws IOException    (TemporaryFolder.java)
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public static double geq(double value)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static double leq(double value)    (AdditionalMatchers.java),"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,"# Method  public static void assertEquals(Object expected, Object actual)    (TestCase.java)","# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java)
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Sets the name of a TestCase

@param name the name to set","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,# Method  public void setName(String name)    (TestCase.java),"# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java)
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static int gt(int value)    (AdditionalMatchers.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static short geq(short value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static Timeout millis(long millis)    (Timeout.java),"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)",# Method  public static T not(T first)    (AdditionalMatchers.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int lt(int value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Matches if the result has exactly one failure, and it contains string","Matches if the result has one or more failures, and at least one of them
contains string
",1,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
Invoked when a test is skipped due to a failed assumption.,"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public Number getAsNumber()    (JsonPrimitive.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,"# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)","# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)"
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5",0,"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java)
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (TestCase.java),# Method  public static void assertNull(Object object)    (Assert.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java)
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()",1,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0,Method public float getAsFloat()    (JsonArray.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0,"# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)",# Method  public static void assertTrue(boolean condition)    (TestCase.java)
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",1,# Class  AssumptionViolatedException    (AssumptionViolatedException.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",1,"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)"
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0,"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertThat(String reason, T actual, Matcher<? super T> matcher)    (Assert.java)"
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Adds to errors if the test class has more than one constructor
(do not override)",0,"# Method  Statement apply(Statement base, Description description)    (TestRule.java)",# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
",0,"# Method  Statement apply(Statement base, Description description)    (TestRule.java)","# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public long getAsLong()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)",Method public double getAsDouble()    (JsonPrimitive.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(String format, Object arg)    (Logger.java)"
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)",# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0,Method public BigDecimal getAsBigDecimal()    (JsonElement.java),"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static VerificationMode only()    (Mockito.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0,Method public Number getAsNumber()    (JsonElement.java),"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)"
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1,Method public double getAsDouble()    (JsonPrimitive.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",1,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)",# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long leq(long value)    (AdditionalMatchers.java),# Method  public static byte gt(byte value)    (AdditionalMatchers.java)
"The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",1,EnumConstant END_ARRAY    (JsonToken.java),EnumConstant END_OBJECT    (JsonToken.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)"
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public long getAsLong()    (JsonArray.java)
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1,"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)","Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",Returns a new fresh folder with a random name under the temporary folder.,0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)",# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
Returns a new fresh file with a random name under the temporary folder.,"Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0,# Method  public File newFile() throws IOException    (TemporaryFolder.java),"# Method  public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0,"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)","# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0,"Method public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Method public int getAsInt()    (JsonPrimitive.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation",1,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)","# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)"
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.",1,# Method  public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)    (JUnitMatchers.java),# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java)
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1,Method public String getAsString()    (JsonArray.java),Method public long getAsLong()    (JsonArray.java)
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Returns a new fresh folder with the given name(s) under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)"
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",1,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java)
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0,# Method  public String getClassName()    (Description.java),"# Method  public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)"
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method Boolean getAsBooleanWrapper()    (JsonElement.java)
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)"
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public long getAsLong()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0,"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)","# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)"
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
Invoked when a test is skipped due to a failed assumption.,"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)",# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)",# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public char getAsCharacter()    (JsonElement.java),Class DateTypeAdapter    (DateTypeAdapter.java)
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  public File newFolder() throws IOException    (TemporaryFolder.java),"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static int gt(int value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static byte gt(byte value)    (AdditionalMatchers.java)
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)",# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.",Counts the number of test cases that will be run by this test.,0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),# Method  public abstract int countTestCases()    (Test.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Interface  MockSettings    (MockSettings.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(String format, Object arg)    (Logger.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)","# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  MethodRoadie    (MethodRoadie.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public byte getAsByte()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",0,# Method  public static Timeout millis(long millis)    (Timeout.java),"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Method public int getAsInt()    (JsonPrimitive.java)
"@return If this describes a method invocation,
the name of the class of the test instance","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,# Method  public String getClassName()    (Description.java),"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"@param target the test case instance
@return a list of TestRules that should be applied when executing this
test","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Class  CallsRealMethods    (CallsRealMethods.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Matches if the result has one or more failures, and at least one of them
contains string
","Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
",0,# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java),# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java)
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)",# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0,Method public BigInteger getAsBigInteger()    (JsonElement.java),"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)",# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0,Method public Number getAsNumber()    (JsonArray.java),EnumConstant BEGIN_ARRAY    (JsonToken.java)
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public String nextString() throws IOException    (JsonReader.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",0,"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)",# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(String format, Object... arguments)    (Logger.java)"
"Construct a new InitializationError with one cause
with message string","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,# Method  public InitializationError(String string)    (InitializationError.java),"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0,Method public double getAsDouble()    (JsonArray.java),Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
Invoked when a test is skipped due to a failed assumption.,"Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)","# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)"
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0,"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",Method public void endObject() throws IOException    (JsonReader.java)
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,Field CALLS_REAL_METHODS    (Mockito.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1,Method public String getAsString()    (JsonPrimitive.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(Object expected, Object actual)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.",1,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)"
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0,Method public short getAsShort()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonPrimitive.java)
"Matches if the result has exactly one failure, and it contains string",Returns a new fresh folder with a random name under the temporary folder.,0,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (Assert.java),# Method  public static void assertNull(Object object)    (Assert.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0,Method public BigInteger getAsBigInteger()    (JsonElement.java),Method public void endArray() throws IOException    (JsonReader.java)
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public int getAsInt()    (JsonElement.java),Class TimeTypeAdapter    (TimeTypeAdapter.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,# Class  MethodValidator    (MethodValidator.java),"# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long geq(long value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)",# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Class  MockitoException    (MockitoException.java)
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public long getAsLong()    (JsonArray.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public double getAsDouble()    (JsonArray.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",1,Method public JsonElement toJsonTree(Object src)    (Gson.java),Method public String toJson(Object src)    (Gson.java)
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",1,# Method  protected void setUp() throws Exception    (TestCase.java),# Method  protected void tearDown() throws Exception    (TestCase.java)
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method public float getAsFloat()    (JsonArray.java),"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public float getAsFloat()    (JsonArray.java)
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,"# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0,Method public String getAsString()    (JsonElement.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public String getAsString()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)",# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",1,# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java),# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static long leq(long value)    (AdditionalMatchers.java),# Interface  MockSettings    (MockSettings.java)
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Method public long nextLong() throws IOException    (JsonReader.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0,Method public String nextString() throws IOException    (JsonReader.java),Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)",# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)"
"Returns a new fresh folder with the given name under the temporary
folder.","Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
",0,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long geq(long value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Class TimeTypeAdapter    (TimeTypeAdapter.java)
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static float geq(float value)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",1,"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",1,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",1,# Class  MockitoException    (MockitoException.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  MethodRoadie    (MethodRoadie.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodValidator    (MethodValidator.java),# Class  ClassRoadie    (ClassRoadie.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0,Method public boolean getAsBoolean()    (JsonElement.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  TestMethod    (TestMethod.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",0,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",1,Method public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)    (GsonBuilder.java),Method public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)    (GsonBuilder.java)
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)","Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public float getAsFloat()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0,Method public JsonElement toJsonTree(Object src)    (Gson.java),Method public void beginObject() throws IOException    (JsonReader.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  FailedBefore    (FailedBefore.java)
Counts the number of test cases that will be run by this test.,"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0,# Method  public abstract int countTestCases()    (Test.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)","# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","@return If this describes a method invocation,
the name of the method (or null if not)",1,# Method  public String getClassName()    (Description.java),# Method  public String getMethodName()    (Description.java)
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public short getAsShort()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0,Method public double getAsDouble()    (JsonArray.java),Method public String toJson(Object src)    (Gson.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0,Method public String toJson(Object src)    (Gson.java),Method public void beginObject() throws IOException    (JsonReader.java)
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",1,"# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)","# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1,# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java),# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Matches if the result has exactly one failure, and it contains string",0,# Class  TestClass    (TestClass.java),# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java)
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)",# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","@deprecated Use
assertEquals(String message, double expected, double actual, double delta)
instead",0,# Method  public String getClassName()    (Description.java),"# Method  public static void assertEquals(String message, double expected, double actual)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static short geq(short value)    (AdditionalMatchers.java)
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0,# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java),"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0,"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)",EnumConstant BEGIN_OBJECT    (JsonToken.java)
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)",# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a String.

@return get this element as a String.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public String getAsString()    (JsonPrimitive.java)
"convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public long getAsLong()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0,Method public JsonPrimitive getAsJsonPrimitive(String memberName)    (JsonObject.java),Method public long getAsLong()    (JsonPrimitive.java)
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method public double getAsDouble()    (JsonElement.java),"Method public void toJson(Object src, Appendable writer) throws JsonIOException    (Gson.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,# Method  public static Request classes(Class<?>... classes)    (Request.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(String format, Object arg)    (Logger.java)"
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),"Method public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public BigInteger getAsBigInteger()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object arg)    (Logger.java)"
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)","# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public double getAsDouble()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0,Method public int getAsInt()    (JsonArray.java),Method public int getAsInt()    (JsonElement.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public VerificationMode never()    (VerificationWithTimeout.java)
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",0,"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)","# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)"
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Returns a new fresh folder with the given name under the temporary
folder.",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java)
"Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",1,# Method  public Result run(Request request)    (JUnitCore.java),# Method  public Result run(Request request)    (MaxCore.java)
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,Field CALLS_REAL_METHODS    (Mockito.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public BigInteger getAsBigInteger()    (JsonArray.java)
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",1,# Method  public static VerificationMode only()    (Mockito.java),# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1,# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java),# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java)
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(Marker marker, String msg)    (Logger.java)"
"Returns a new builder for building an instance.

@since 4.12","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,# Method  public static Builder builder()    (FailOnTimeout.java),# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java)
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0,Method public int getAsInt()    (JsonArray.java),Method public long nextLong() throws IOException    (JsonReader.java)
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0,Method public double getAsDouble()    (JsonElement.java),Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java)
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
Invoked when a test is skipped due to a failed assumption.,"Optionally specify timeout in milliseconds to cause a test method to fail if it
takes longer than that number of milliseconds.

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.",0,"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)",# Annotation Member timeout    (Test.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"@return the annotation of type annotationType that is attached to this description node,
or null if none exists
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public T getAnnotation(Class<T> annotationType)    (Description.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance.

@since 4.12",1,# Method  public static Builder builder()    (FailOnTimeout.java),# Method  public static Builder builder()    (Timeout.java)
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method public BigInteger getAsBigInteger()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)"
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)",# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)",# Method  public static float not(float first)    (AdditionalMatchers.java)
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java)
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Adds to errors if the test class's single constructor takes
parameters (do not override)",0,"# Method  Statement apply(Statement base, Description description)    (TestRule.java)",# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public double getAsDouble()    (JsonPrimitive.java)
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public long nextLong() throws IOException    (JsonReader.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public Number getAsNumber()    (JsonPrimitive.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),Method public short getAsShort()    (JsonPrimitive.java)
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method public String getAsString()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,Field CALLS_REAL_METHODS    (Mockito.java),# Interface  MockSettings    (MockSettings.java)
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public float getAsFloat()    (JsonElement.java)
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0,# Class  SuiteMethod    (SuiteMethod.java),# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (TestCase.java),# Method  public static void assertNull(Object object)    (Assert.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0,Method public double getAsDouble()    (JsonElement.java),"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assertFalse(boolean condition)    (TestCase.java)
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0,"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java)
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",1,Method public String nextString() throws IOException    (JsonReader.java),Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0,# Method  public String getClassName()    (Description.java),"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)"
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0,Method public JsonArray getAsJsonArray()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0,"# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)","# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)",# Method  public static char not(char first)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0,Method public void beginObject() throws IOException    (JsonReader.java),EnumConstant END_OBJECT    (JsonToken.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)",# Method  public static short not(short first)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte gt(byte value)    (AdditionalMatchers.java)
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)","# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",1,Method public double nextDouble() throws IOException    (JsonReader.java),Method public int nextInt() throws IOException    (JsonReader.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)"
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0,Method public boolean getAsBoolean()    (JsonArray.java),Method public String toJson(Object src)    (Gson.java)
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java)
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0,EnumConstant BEGIN_ARRAY    (JsonToken.java),Method public short getAsShort()    (JsonPrimitive.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0,Method public Number getAsNumber()    (JsonElement.java),"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public String getAsString()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte gt(byte value)    (AdditionalMatchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Method public void endArray() throws IOException    (JsonReader.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Method public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)    (GsonBuilder.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)"
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)"
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)","Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",1,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int lt(int value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static short lt(short value)    (AdditionalMatchers.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1,"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)","# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",1,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",1,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public JsonPrimitive getAsJsonPrimitive()    (JsonElement.java)
Counts the number of test cases that will be run by this test.,Counts the number of test cases that will be run by this test.,1,# Method  public abstract int countTestCases()    (Test.java),# Method  public int countTestCases()    (TestSuite.java)
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",1,Method public void endArray() throws IOException    (JsonReader.java),Method public void endObject() throws IOException    (JsonReader.java)
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public String getAsString()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",# Interface  Marker    (Marker.java)
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public String getAsString()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0,Method public double getAsDouble()    (JsonElement.java),Method public long nextLong() throws IOException    (JsonReader.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int gt(int value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Construct a new InitializationError with one cause
with message string","Sets the name of a TestCase

@param name the name to set",0,# Method  public InitializationError(String string)    (InitializationError.java),# Method  public void setName(String name)    (TestCase.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java)
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}

@since 4.0",1,# Class  SuiteMethod    (SuiteMethod.java),# Class  AllTests    (AllTests.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public long getAsLong()    (JsonArray.java)
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","@deprecated Use
assertEquals(double expected, double actual, double delta)
instead",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual)    (Assert.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.",1,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),# Method  public static Matcher<T> isException(Matcher<T> exceptionMatcher)    (JUnitMatchers.java)
Returns a new fresh folder with a random name under the temporary folder.,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,# Method  public File newFolder() throws IOException    (TemporaryFolder.java),# Class  FailedBefore    (FailedBefore.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public float getAsFloat()    (JsonArray.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",1,Method public double nextDouble() throws IOException    (JsonReader.java),Method public long nextLong() throws IOException    (JsonReader.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static int lt(int value)    (AdditionalMatchers.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0,Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java),Method public boolean getAsBoolean()    (JsonPrimitive.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Interface  MockSettings    (MockSettings.java)
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",0,"# Method  Statement apply(Statement base, Description description)    (TestRule.java)","# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)"
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0,"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",1,Method public void beginArray() throws IOException    (JsonReader.java),Method public void beginObject() throws IOException    (JsonReader.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static int lt(int value)    (AdditionalMatchers.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object arg)    (Logger.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)",Method public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)    (GsonBuilder.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,"Method public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException    (Gson.java)",Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
Invoked when a test is skipped due to a failed assumption.,"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static short not(short first)    (AdditionalMatchers.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Class  MethodRoadie    (MethodRoadie.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public static void assertNull(Object object)    (Assert.java),# Method  public Result run(Request request)    (MaxCore.java)
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)"
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public Number getAsNumber()    (JsonArray.java),Method public GsonBuilder setDateFormat(int style)    (GsonBuilder.java)
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(String format, Object arg)    (Logger.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),EnumConstant END_ARRAY    (JsonToken.java)
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public Number getAsNumber()    (JsonElement.java),Method public String getAsString()    (JsonElement.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Consumes the next token from the JSON stream and asserts that it is the
end of the current object.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public void endObject() throws IOException    (JsonReader.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
Invoked when a test is skipped due to a failed assumption.,"@return If this describes a method invocation,
the class of the test instance.",0,"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)",# Method  public Class<?> getTestClass()    (Description.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",1,# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java),"# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public String getAsString()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java)
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),"Method public JsonElement toJsonTree(Object src, Type typeOfSrc)    (Gson.java)"
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)",# Method  public static int leq(int value)    (AdditionalMatchers.java)
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,"# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)","# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)"
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",Returns a new fresh file with a random name under the temporary folder.,0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),# Method  public File newFile() throws IOException    (TemporaryFolder.java)
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public String getAsString()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"The Test annotation tells JUnit that the public void method
to which it is attached can be run as a test case. To run the method,
JUnit first constructs a fresh instance of the class then invokes the
annotated method. Any exceptions thrown by the test will be reported
by JUnit as a failure. If no exceptions are thrown, the test is assumed
to have succeeded.

A simple test looks like this:

public class Example {
@Test
public void method() {
org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
}
}

The Test annotation supports two optional parameters.
The first, expected, declares that a test method should throw
an exception. If it doesn't throw an exception or if it throws a different exception
than the one declared, the test fails. For example, the following test succeeds:

@Test(expected=IndexOutOfBoundsException.class) public void outOfBounds() {
new ArrayList&lt;Object&gt;().get(1);
}

If the exception's message or one of its properties should be verified, the
org.junit.rules.ExpectedException ExpectedException rule can be used. Further
information about exception testing can be found at the
<a href=""https://github.com/junit-team/junit/wiki/Exception-testing"">JUnit Wiki.

The second optional parameter, timeout, causes a test to fail if it takes
longer than a specified amount of clock time (measured in milliseconds). The following test fails:

@Test(timeout=100) public void infinity() {
while(true);
}

Warning: while timeout is useful to catch and terminate
infinite loops, it should not be considered deterministic. The
following test may or may not fail depending on how the operating system
schedules threads:

@Test(timeout=100) public void sleep100() {
Thread.sleep(100);
}

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Annotation  Test    (Test.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)"
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public boolean getAsBoolean()    (JsonPrimitive.java)
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),EnumConstant BEGIN_OBJECT    (JsonToken.java)
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java)
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  MethodValidator    (MethodValidator.java)
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)",# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Optionally specify timeout in milliseconds to cause a test method to fail if it
takes longer than that number of milliseconds.

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),# Annotation Member timeout    (Test.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0,Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java),Method public long nextLong() throws IOException    (JsonReader.java)
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static MockSettings withSettings()    (Mockito.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test",0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),# Method  protected List<MethodRule> rules(Object target)    (BlockJUnit4ClassRunner.java)
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",1,# Class  CallsRealMethods    (CallsRealMethods.java),Field CALLS_REAL_METHODS    (Mockito.java)
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","@deprecated Use
assertEquals(double expected, double actual, double delta)
instead",0,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12",1,# Method  public static Timeout millis(long millis)    (Timeout.java),# Method  public static Timeout seconds(long seconds)    (Timeout.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java)
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public String getAsString()    (JsonArray.java),Method public BigDecimal getAsBigDecimal()    (JsonArray.java)
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"@return If this describes a method invocation,
the class of the test instance.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,# Method  public Class<?> getTestClass()    (Description.java),"# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",Counts the number of test cases that will be run by this test.,0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)",# Method  public int countTestCases()    (TestSuite.java)
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0,Method public char getAsCharacter()    (JsonElement.java),Method public String toJson(Object src)    (Gson.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0,Method public String getAsString()    (JsonArray.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",1,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Returns a new fresh folder with the given name under the temporary
folder.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}

@since 4.0",0,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),# Class  AllTests    (AllTests.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"An assumption exception with the given actual value and a matcher describing
the expectation that failed.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",1,"# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static long leq(long value)    (AdditionalMatchers.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","@deprecated Use
assertEquals(String message, double expected, double actual, double delta)
instead",1,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",1,Method public JsonPrimitive getAsJsonPrimitive(String memberName)    (JsonObject.java),Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java)
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"Construct a new InitializationError with one or more
errors errors as causes
",Returns a new fresh folder with a random name under the temporary folder.,0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static short geq(short value)    (AdditionalMatchers.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0,Method public float getAsFloat()    (JsonElement.java),Method public short getAsShort()    (JsonPrimitive.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)"
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public float getAsFloat()    (JsonArray.java)
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0,# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java),"# Method  public static void assertEquals(Object expected, Object actual)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),# Method  public static void assertNull(Object object)    (Assert.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  ClassRoadie    (ClassRoadie.java),# Class  FailedBefore    (FailedBefore.java)
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",Invoked when a test is skipped due to a failed assumption.,0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public Number getAsNumber()    (JsonElement.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),"# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)"
"Matches if the result has exactly one failure, and it contains string","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",0,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Class  TestClass    (TestClass.java),"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0,"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)","Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0,Class DateTypeAdapter    (DateTypeAdapter.java),EnumConstant BEGIN_OBJECT    (JsonToken.java)
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,# Method  public static Matcher<T> isException(Matcher<T> exceptionMatcher)    (JUnitMatchers.java),"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)"
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0,# Method  public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)",# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)",Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)",# Method  public static short not(short first)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public float getAsFloat()    (JsonElement.java),Method public long getAsLong()    (JsonElement.java)
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,"# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)","# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",1,EnumConstant BEGIN_ARRAY    (JsonToken.java),EnumConstant END_OBJECT    (JsonToken.java)
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
Invoked when a test is skipped due to a failed assumption.,"Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",1,"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)","# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  ClassRoadie    (ClassRoadie.java)
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0,Class DateTypeAdapter    (DateTypeAdapter.java),Method public JsonPrimitive getAsJsonPrimitive(String memberName)    (JsonObject.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Sets the name of a TestCase

@param name the name to set",0,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)",# Method  public void setName(String name)    (TestCase.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assumeTrue(String message, boolean b)    (Assume.java)"
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)",# Method  public static long gt(long value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",1,"# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)","# Method  public static void assertThat(String reason, T actual, Matcher<? super T> matcher)    (Assert.java)"
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0,Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java),"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",1,Method public void beginObject() throws IOException    (JsonReader.java),Method public void endObject() throws IOException    (JsonReader.java)
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Class  MockitoException    (MockitoException.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  MethodValidator    (MethodValidator.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0,Method public int getAsInt()    (JsonArray.java),"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)",# Method  protected void tearDown() throws Exception    (TestCase.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}",1,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java)
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0,Method public byte getAsByte()    (JsonElement.java),Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public long getAsLong()    (JsonElement.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public String getAsString()    (JsonElement.java),Method public double getAsDouble()    (JsonElement.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)",# Method  public static int gt(int value)    (AdditionalMatchers.java)
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertEquals(long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short lt(short value)    (AdditionalMatchers.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodRoadie    (MethodRoadie.java),# Class  FailedBefore    (FailedBefore.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public float getAsFloat()    (JsonElement.java)
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)"
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodValidator    (MethodValidator.java),# Class  FailedBefore    (FailedBefore.java)
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request aClass(Class<?> clazz)    (Request.java),# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Construct a new InitializationError with one or more
errors errors as causes
","Construct a new InitializationError with one cause
with message string",1,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Method  public InitializationError(String string)    (InitializationError.java)
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public JsonPrimitive getAsJsonPrimitive(String memberName)    (JsonObject.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",1,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public double getAsDouble()    (JsonElement.java)
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0,Method public boolean getAsBoolean()    (JsonArray.java),Method public byte getAsByte()    (JsonElement.java)
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"Returns a new fresh folder with the given name(s) under the temporary
folder.","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0,# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java),"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)"
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public String getAsString()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",1,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java)
"Returns a new fresh folder with the given name under the temporary
folder.","Returns a new fresh folder with the given name(s) under the temporary
folder.",1,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0,# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java),# Method  public static void assertTrue(boolean condition)    (TestCase.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","If called with an expression evaluating to false, the test will halt and be ignored.",0,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),# Method  public static void assumeTrue(boolean b)    (Assume.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  FailedBefore    (FailedBefore.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","If called with an expression evaluating to false, the test will halt and be ignored.",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)",# Method  public static void assumeTrue(boolean b)    (Assume.java)
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public BigDecimal getAsBigDecimal()    (JsonElement.java),Class TimeTypeAdapter    (TimeTypeAdapter.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)",# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0,Method public float getAsFloat()    (JsonElement.java),Method public BigInteger getAsBigInteger()    (JsonElement.java)
Invoked when a test is skipped due to a failed assumption.,"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1,Method public String getAsString()    (JsonPrimitive.java),Method public double getAsDouble()    (JsonPrimitive.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public Number getAsNumber()    (JsonElement.java),Method public double getAsDouble()    (JsonElement.java)
"Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)    (GsonBuilder.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",1,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  Statement apply(Statement base, Description description)    (TestRule.java)"
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1,Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int leq(int value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0,Method public String nextString() throws IOException    (JsonReader.java),Method public int nextInt() throws IOException    (JsonReader.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,"# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Returns true if this member is static, false if not.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,# Method  public boolean isStatic()    (FrameworkMember.java),"# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static char not(char first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java),"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0,"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)",EnumConstant END_OBJECT    (JsonToken.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver",1,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)"
"The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",1,EnumConstant END_ARRAY    (JsonToken.java),EnumConstant BEGIN_OBJECT    (JsonToken.java)
"Returns true if this member is static, false if not.","Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
",0,# Method  public boolean isStatic()    (FrameworkMember.java),# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java)
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",1,EnumConstant BEGIN_ARRAY    (JsonToken.java),EnumConstant END_ARRAY    (JsonToken.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Adds to errors if the test class's single constructor takes
parameters (do not override)",0,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static VerificationMode only()    (Mockito.java)
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)",# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java)
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public String getAsString()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","convenience method to get this element as a String.

@return get this element as a String.",0,Method public JsonElement toJsonTree(Object src)    (Gson.java),Method public String getAsString()    (JsonPrimitive.java)
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",1,# Method  public VerificationMode never()    (VerificationWithTimeout.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)","# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0,Method public GsonBuilder setDateFormat(int style)    (GsonBuilder.java),Method public short getAsShort()    (JsonPrimitive.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static VerificationMode only()    (Mockito.java)
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static short lt(short value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1,Method public float getAsFloat()    (JsonPrimitive.java),Method public short getAsShort()    (JsonPrimitive.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public String getAsString()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertEquals(Object expected, Object actual)    (Assert.java)"
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)"
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
