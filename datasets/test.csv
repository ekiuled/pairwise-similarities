"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),"# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)"
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Method  public static short geq(short value)    (AdditionalMatchers.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Returns true if this member is public, false if not.","Sets the name of a TestCase

@param name the name to set",0,# Method  public boolean isPublic()    (FrameworkMember.java),# Method  public void setName(String name)    (TestCase.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Adds to errors if the test class has more than one constructor
(do not override)","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java)
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,Field CALLS_REAL_METHODS    (Mockito.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public Number getAsNumber()    (JsonPrimitive.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Class  MethodValidator    (MethodValidator.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)"
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",1,"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)"
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)",# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,# Method  public static Builder builder()    (TemporaryFolder.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public short getAsShort()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",0,"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)",# Method  public static Request classes(Class<?>... classes)    (Request.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",1,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotEquals(String message, long unexpected, long actual)    (Assert.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public float getAsFloat()    (JsonArray.java)
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0,"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",Method public String nextString() throws IOException    (JsonReader.java)
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",1,Method public JsonObject getAsJsonObject()    (JsonElement.java),Method public JsonArray getAsJsonArray()    (JsonElement.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public Number getAsNumber()    (JsonArray.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0,Method public char getAsCharacter()    (JsonElement.java),"Method public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException    (Gson.java)"
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",1,# Method  public static Request aClass(Class<?> clazz)    (Request.java),# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",1,"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static double lt(double value)    (AdditionalMatchers.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",1,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)"
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Interface  MockSettings    (MockSettings.java)
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),EnumConstant END_OBJECT    (JsonToken.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1,Method public String getAsString()    (JsonArray.java),Method public float getAsFloat()    (JsonArray.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1,Method public double getAsDouble()    (JsonArray.java),Method public float getAsFloat()    (JsonArray.java)
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",1,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),Field CALLS_REAL_METHODS    (Mockito.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,# Method  public String getClassName()    (Description.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),"Method public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0,Method public boolean getAsBoolean()    (JsonArray.java),Method public void endObject() throws IOException    (JsonReader.java)
"@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",1,# Method  protected List<MethodRule> rules(Object target)    (BlockJUnit4ClassRunner.java),# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,# Method  public static Timeout millis(long millis)    (Timeout.java),"# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",1,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)","# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public Number getAsNumber()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Class  TestMethod    (TestMethod.java),"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0,Method public double getAsDouble()    (JsonElement.java),Method public void beginObject() throws IOException    (JsonReader.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Matches if the result has one or more failures, and at least one of them
contains string
","Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.",0,# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java),# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java)
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a String.

@return get this element as a String.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public String getAsString()    (JsonPrimitive.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)",# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public float getAsFloat()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume",0,# Class  TestMethod    (TestMethod.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public double getAsDouble()    (JsonArray.java),Method public BigDecimal getAsBigDecimal()    (JsonArray.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public double getAsDouble()    (JsonElement.java),Method public long getAsLong()    (JsonElement.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)",# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0,Method public byte getAsByte()    (JsonElement.java),"Method public JsonElement toJsonTree(Object src, Type typeOfSrc)    (Gson.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Adds to errors if the test class's single constructor takes
parameters (do not override)","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java),# Method  public Result run(Request request)    (MaxCore.java)
"char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)",# Method  public static char not(char first)    (AdditionalMatchers.java)
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)",# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message",1,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)"
"This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),Field CALLS_REAL_METHODS    (Mockito.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)"
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0,Method public float getAsFloat()    (JsonArray.java),Method public int getAsInt()    (JsonPrimitive.java)
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request aClass(Class<?> clazz)    (Request.java),"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)"
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)",# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1,Method public float getAsFloat()    (JsonArray.java),Method public int getAsInt()    (JsonArray.java)
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public char getAsCharacter()    (JsonElement.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0,Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java),"Method public JsonElement toJsonTree(Object src, Type typeOfSrc)    (Gson.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Sets the name of a TestCase

@param name the name to set","Sets the name of the suite.

@param name the name to set",1,# Method  public void setName(String name)    (TestCase.java),# Method  public void setName(String name)    (TestSuite.java)
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)"
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public String getAsString()    (JsonElement.java),Class DateTypeAdapter    (DateTypeAdapter.java)
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method public int getAsInt()    (JsonElement.java),"Method public void toJson(Object src, Appendable writer) throws JsonIOException    (Gson.java)"
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public byte getAsByte()    (JsonElement.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)"
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",1,"# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",1,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),Method public JsonObject getAsJsonObject(String memberName)    (JsonObject.java)
"Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)","# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0,Method public JsonArray getAsJsonArray()    (JsonElement.java),Method public void beginArray() throws IOException    (JsonReader.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0,Method public String getAsString()    (JsonElement.java),"Method public JsonElement toJsonTree(Object src, Type typeOfSrc)    (Gson.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java),"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable",1,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java)
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public int getAsInt()    (JsonElement.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public boolean getAsBoolean()    (JsonElement.java),Method public long getAsLong()    (JsonElement.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Class  FailedBefore    (FailedBefore.java),"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public float getAsFloat()    (JsonElement.java),Method public int getAsInt()    (JsonElement.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0,Method public Number getAsNumber()    (JsonArray.java),Method public boolean nextBoolean() throws IOException    (JsonReader.java)
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0,"Method public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",Method public void beginObject() throws IOException    (JsonReader.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public double getAsDouble()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0,Method public BigDecimal getAsBigDecimal()    (JsonElement.java),Method public int nextInt() throws IOException    (JsonReader.java)
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public double getAsDouble()    (JsonPrimitive.java)
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0,Method public BigDecimal getAsBigDecimal()    (JsonArray.java),"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",1,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)"
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",1,Class DateTypeAdapter    (DateTypeAdapter.java),Class TimeTypeAdapter    (TimeTypeAdapter.java)
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1,Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0,Method public Number getAsNumber()    (JsonElement.java),Method public String nextString() throws IOException    (JsonReader.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","@return If this describes a method invocation,
the name of the class of the test instance",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)",# Method  public String getClassName()    (Description.java)
"Returns the annotation of type annotationType on this method, if
one exists.","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)"
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0,Class DateTypeAdapter    (DateTypeAdapter.java),EnumConstant BEGIN_ARRAY    (JsonToken.java)
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)",# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0,Method public int getAsInt()    (JsonElement.java),Method public JsonPrimitive getAsJsonPrimitive(String memberName)    (JsonObject.java)
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)",# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method public double getAsDouble()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",Method public int nextInt() throws IOException    (JsonReader.java)
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)",# Method  public static void assertNull(Object object)    (TestCase.java)
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),Class DateTypeAdapter    (DateTypeAdapter.java)
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java)
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public Number getAsNumber()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
Invoked when a test is skipped due to a failed assumption.,"Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",1,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertTrue(boolean condition)    (Assert.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)",# Method  public static void assertNull(Object object)    (TestCase.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)","Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0,Class DateTypeAdapter    (DateTypeAdapter.java),Method public void endObject() throws IOException    (JsonReader.java)
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1,Method public int getAsInt()    (JsonArray.java),Method public short getAsShort()    (JsonArray.java)
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)"
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1,Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java),Method public float getAsFloat()    (JsonPrimitive.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",1,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public Result run(Request request)    (JUnitCore.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1,"Method public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException    (Gson.java)","Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0,"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)",EnumConstant BEGIN_ARRAY    (JsonToken.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,# Method  public static void assertNull(Object object)    (Assert.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public int getAsInt()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1,Method public boolean getAsBoolean()    (JsonPrimitive.java),Method public long getAsLong()    (JsonPrimitive.java)
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  FailedBefore    (FailedBefore.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0,Method Boolean getAsBooleanWrapper()    (JsonElement.java),"Method public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException    (Gson.java)"
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)"
"Returns true if this member is static, false if not.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0,# Method  public boolean isStatic()    (FrameworkMember.java),# Method  public static void assertTrue(boolean condition)    (TestCase.java)
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1,Method public float getAsFloat()    (JsonArray.java),Method public boolean getAsBoolean()    (JsonArray.java)
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)"
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",# Interface  Marker    (Marker.java)
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",1,Method public JsonArray getAsJsonArray()    (JsonElement.java),Method public JsonPrimitive getAsJsonPrimitive()    (JsonElement.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0,Method public double getAsDouble()    (JsonArray.java),"Method public void toJson(Object src, Appendable writer) throws JsonIOException    (Gson.java)"
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0,# Method  public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"Sets the name of a TestCase

@param name the name to set","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,# Method  public void setName(String name)    (TestCase.java),# Method  public static void assertNull(Object object)    (Assert.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)",Method public void beginArray() throws IOException    (JsonReader.java)
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),Method Boolean getAsBooleanWrapper()    (JsonPrimitive.java)
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()",1,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java)
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public int getAsInt()    (JsonElement.java),Method public byte getAsByte()    (JsonElement.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)"
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public float getAsFloat()    (JsonElement.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method Boolean getAsBooleanWrapper()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1,Method public double getAsDouble()    (JsonElement.java),Method public char getAsCharacter()    (JsonElement.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",1,Method public boolean getAsBoolean()    (JsonElement.java),Method Boolean getAsBooleanWrapper()    (JsonElement.java)
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0,Method public long getAsLong()    (JsonElement.java),Method public double getAsDouble()    (JsonPrimitive.java)
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)"
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Class  AssumptionViolatedException    (AssumptionViolatedException.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0,Method public JsonArray getAsJsonArray(String memberName)    (JsonObject.java),Method public int nextInt() throws IOException    (JsonReader.java)
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0,Class DateTypeAdapter    (DateTypeAdapter.java),Method public BigDecimal getAsBigDecimal()    (JsonPrimitive.java)
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)"
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)"
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0,Method public float getAsFloat()    (JsonElement.java),Method public BigInteger getAsBigInteger()    (JsonPrimitive.java)
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)",# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)"
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1,Method public Number getAsNumber()    (JsonPrimitive.java),Method public int getAsInt()    (JsonPrimitive.java)
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0,"Method public T fromJson(String json, Type typeOfT) throws JsonSyntaxException    (Gson.java)",EnumConstant END_OBJECT    (JsonToken.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)    (GsonBuilder.java),"Method public GsonBuilder setDateFormat(int dateStyle, int timeStyle)    (GsonBuilder.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public static long lt(long value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1,"Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)","Method public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException    (Gson.java)"
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)"
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",1,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)","# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)"
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public Logger getLogger(String name)    (ILoggerFactory.java)
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)",# Method  public static short not(short first)    (AdditionalMatchers.java)
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,"# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)"
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1,Method public String getAsString()    (JsonElement.java),Method public long getAsLong()    (JsonElement.java)
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}

@since 4.0",0,# Class  MethodRoadie    (MethodRoadie.java),# Class  AllTests    (AllTests.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)"
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","@return If this describes a method invocation,
the name of the class of the test instance",0,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),# Method  public String getClassName()    (Description.java)
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"@return If this describes a method invocation,
the name of the method (or null if not)","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,# Method  public String getMethodName()    (Description.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java)
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java)
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0,Method public float getAsFloat()    (JsonArray.java),Method public JsonPrimitive getAsJsonPrimitive()    (JsonElement.java)
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.",Invoked when a test is skipped due to a failed assumption.,0,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0,"Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)","Method public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException    (Gson.java)"
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)"
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",1,Method public void endArray() throws IOException    (JsonReader.java),Method public void beginObject() throws IOException    (JsonReader.java)
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0,Method public String getAsString()    (JsonElement.java),Class SqlDateTypeAdapter    (SqlDateTypeAdapter.java)
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1,Method public Number getAsNumber()    (JsonArray.java),Method public BigInteger getAsBigInteger()    (JsonArray.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()",1,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java)
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)"
Returns a new fresh file with a random name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",1,"Method public void toJson(Object src, Appendable writer) throws JsonIOException    (Gson.java)","Method public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException    (Gson.java)"
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0,Method public double getAsDouble()    (JsonElement.java),Method public void endObject() throws IOException    (JsonReader.java)
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0,Method public boolean getAsBoolean()    (JsonElement.java),Method public void endArray() throws IOException    (JsonReader.java)
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0,Method public String getAsString()    (JsonElement.java),Method public GsonBuilder setDateFormat(int style)    (GsonBuilder.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)"
"Returns true if this member is static, false if not.","Returns true if this member is public, false if not.",1,# Method  public boolean isStatic()    (FrameworkMember.java),# Method  public boolean isPublic()    (FrameworkMember.java)
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0,Method public JsonObject getAsJsonObject()    (JsonElement.java),"Method public String toJson(Object src, Type typeOfSrc)    (Gson.java)"
