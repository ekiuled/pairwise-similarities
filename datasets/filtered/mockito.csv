"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",1,# Method  public VerificationMode never()    (VerificationWithTimeout.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",1,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",1,# Method  public static VerificationMode only()    (Mockito.java),# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",1,# Method  public static MockSettings withSettings()    (Mockito.java),# Interface  MockSettings    (MockSettings.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",1,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation",1,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)","# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable",1,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)"
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",1,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static T not(T first)    (AdditionalMatchers.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",1,# Class  CallsRealMethods    (CallsRealMethods.java),Field CALLS_REAL_METHODS    (Mockito.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",1,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),Field RETURNS_SMART_NULLS    (Mockito.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)"
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver",1,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)"
"Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",1,# Class  MockitoException    (MockitoException.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",1,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",1,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.",1,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)"
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",1,# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java),# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",1,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static boolean not(boolean first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static byte lt(byte value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static char not(char first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static char not(char first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte gt(byte value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static double not(double first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static int geq(int value)    (AdditionalMatchers.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static float not(float first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int gt(int value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int gt(int value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int leq(int value)    (AdditionalMatchers.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int leq(int value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int lt(int value)    (AdditionalMatchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static int lt(int value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static int not(int first)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long geq(long value)    (AdditionalMatchers.java),# Method  public static short geq(short value)    (AdditionalMatchers.java)
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long gt(long value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long leq(long value)    (AdditionalMatchers.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1,# Method  public static long lt(long value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static long not(long first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1,# Method  public static short not(short first)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1,# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java),# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)",# Method  public static MockSettings withSettings()    (Mockito.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int geq(int value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)"
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java),# Method  public static long geq(long value)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static float gt(float value)    (AdditionalMatchers.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static MockSettings withSettings()    (Mockito.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public static long geq(long value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static int geq(int value)    (AdditionalMatchers.java)
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),# Method  public static float gt(float value)    (AdditionalMatchers.java)
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0,# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java),# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static int gt(int value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static float gt(float value)    (AdditionalMatchers.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)",# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)",# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)",# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Class  CallsRealMethods    (CallsRealMethods.java),# Method  public static VerificationMode only()    (Mockito.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static short geq(short value)    (AdditionalMatchers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)",# Method  public static short not(short first)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static MockSettings withSettings()    (Mockito.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static MockSettings withSettings()    (Mockito.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static int geq(int value)    (AdditionalMatchers.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static double gt(double value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public VerificationMode never()    (VerificationWithTimeout.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)"
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java),"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)",# Method  public static long lt(long value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)",# Method  public static short not(short first)    (AdditionalMatchers.java)
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)",# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static int leq(int value)    (AdditionalMatchers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static char not(char first)    (AdditionalMatchers.java)
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)","# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static MockSettings withSettings()    (Mockito.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)",# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static double lt(double value)    (AdditionalMatchers.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)",# Interface  MockSettings    (MockSettings.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)","# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long geq(long value)    (AdditionalMatchers.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static short lt(short value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static short leq(short value)    (AdditionalMatchers.java)
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static double geq(double value)    (AdditionalMatchers.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)"
"byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)",# Method  public static long not(long first)    (AdditionalMatchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),Field CALLS_REAL_METHODS    (Mockito.java)
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)",# Interface  MockSettings    (MockSettings.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)","# Method  public static float and(float first, float second)    (AdditionalMatchers.java)"
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static double leq(double value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)"
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)",# Method  public static T not(T first)    (AdditionalMatchers.java)
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Method  public static int lt(int value)    (AdditionalMatchers.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Interface  MockSettings    (MockSettings.java),# Class  MockitoException    (MockitoException.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Class  MockitoException    (MockitoException.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public VerificationMode never()    (VerificationWithTimeout.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)",# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)",# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static char not(char first)    (AdditionalMatchers.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)",# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static short gt(short value)    (AdditionalMatchers.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static float gt(float value)    (AdditionalMatchers.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Interface  MockSettings    (MockSettings.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)",# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static double geq(double value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)"
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static T not(T first)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)","# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)",# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)",# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)",# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),"# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public VerificationMode only()    (VerificationWithTimeout.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Class  MockitoException    (MockitoException.java)
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short leq(short value)    (AdditionalMatchers.java),"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static MockSettings withSettings()    (Mockito.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java),# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static short geq(short value)    (AdditionalMatchers.java)
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)"
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static MockSettings withSettings()    (Mockito.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Class  MockitoException    (MockitoException.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)","# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Class  CallsRealMethods    (CallsRealMethods.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,Field CALLS_REAL_METHODS    (Mockito.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java),"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static T leq(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)",# Method  public static float not(float first)    (AdditionalMatchers.java)
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,# Method  public static long gt(long value)    (AdditionalMatchers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)",# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),# Method  public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long gt(long value)    (AdditionalMatchers.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java),"# Method  public static char and(char first, char second)    (AdditionalMatchers.java)"
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static long leq(long value)    (AdditionalMatchers.java),# Interface  MockSettings    (MockSettings.java)
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java),# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0,# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java),# Method  public VerificationMode never()    (VerificationWithTimeout.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)",# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)"
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static T lt(Comparable<T> value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)","# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)"
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),"# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static short geq(short value)    (AdditionalMatchers.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static short leq(short value)    (AdditionalMatchers.java),# Method  public static long not(long first)    (AdditionalMatchers.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static long leq(long value)    (AdditionalMatchers.java)
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,Field CALLS_REAL_METHODS    (Mockito.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)",# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static MockSettings withSettings()    (Mockito.java),# Method  public static short not(short first)    (AdditionalMatchers.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)","# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)",# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java),"# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static byte gt(byte value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)","# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)"
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)",# Method  public static MockSettings withSettings()    (Mockito.java)
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Class  CallsRealMethods    (CallsRealMethods.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)",# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Method  public static boolean not(boolean first)    (AdditionalMatchers.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static short geq(short value)    (AdditionalMatchers.java)
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static int gt(int value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static double gt(double value)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode never()    (VerificationWithTimeout.java),"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public VerificationMode only()    (VerificationWithTimeout.java),# Interface  MockSettings    (MockSettings.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)",# Method  public static double not(double first)    (AdditionalMatchers.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)"
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Class  ReturnsElementsOf    (ReturnsElementsOf.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static short lt(short value)    (AdditionalMatchers.java),# Method  public static int not(int first)    (AdditionalMatchers.java)
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)","# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)",# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static float geq(float value)    (AdditionalMatchers.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static int gt(int value)    (AdditionalMatchers.java)
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)",# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java),# Method  public static double not(double first)    (AdditionalMatchers.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static double lt(double value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)",# Method  public static char not(char first)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)",# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static VerificationMode only()    (Mockito.java)
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static byte leq(byte value)    (AdditionalMatchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  public static short gt(short value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)",# Method  public static float not(float first)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0,# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java),# Method  public static boolean not(boolean first)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java),# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static int lt(int value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)","# Method  public static double or(double first, double second)    (AdditionalMatchers.java)"
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,Field CALLS_REAL_METHODS    (Mockito.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)",# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),"# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static float gt(float value)    (AdditionalMatchers.java),# Method  public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)",# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)",# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java),# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)",# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)","# Method  public static char or(char first, char second)    (AdditionalMatchers.java)"
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public static float or(float first, float second)    (AdditionalMatchers.java)"
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java),"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static T gt(Comparable<T> value)    (AdditionalMatchers.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double leq(double value)    (AdditionalMatchers.java),# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static float leq(float value)    (AdditionalMatchers.java)
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)",# Method  public static short gt(short value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static int geq(int value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java),"# Method  public static byte or(byte first, byte second)    (AdditionalMatchers.java)"
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),"# Method  public static int or(int first, int second)    (AdditionalMatchers.java)"
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)"
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static int[] aryEq(int[] value)    (AdditionalMatchers.java)
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0,# Method  public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)"
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",0,# Method  public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java),# Method  public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)","# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,# Method  public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java),# Method  public static float lt(float value)    (AdditionalMatchers.java)
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static int not(int first)    (AdditionalMatchers.java),# Interface  MockSettings    (MockSettings.java)
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object",0,"# Method  public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)","# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)"
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java),# Method  public static float[] aryEq(float[] value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static float lt(float value)    (AdditionalMatchers.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static byte geq(byte value)    (AdditionalMatchers.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0,# Method  public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java),# Method  public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)",# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static double[] aryEq(double[] value)    (AdditionalMatchers.java)
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static float gt(float value)    (AdditionalMatchers.java),"# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)",# Method  Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)","# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static T not(T first)    (AdditionalMatchers.java)
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public static float geq(float value)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)",# Method  public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0,"# Method  public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)",# Method  public static VerificationMode only()    (Mockito.java)
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)",# Method  public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Class  CallsRealMethods    (CallsRealMethods.java)
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)",# Method  public static float not(float first)    (AdditionalMatchers.java)
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java),# Method  public static double geq(double value)    (AdditionalMatchers.java)
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static double gt(double value)    (AdditionalMatchers.java)
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",0,# Method  public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java),"# Method  public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)"
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static float lt(float value)    (AdditionalMatchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0,# Class  CallsRealMethods    (CallsRealMethods.java),"# Method  public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)"
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)",Field CALLS_REAL_METHODS    (Mockito.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static float leq(float value)    (AdditionalMatchers.java),# Method  public static char[] aryEq(char[] value)    (AdditionalMatchers.java)
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)",# Method  public static double lt(double value)    (AdditionalMatchers.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static T not(T first)    (AdditionalMatchers.java)
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,"# Method  public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)",# Method  public static float not(float first)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)",# Method  public static float gt(float value)    (AdditionalMatchers.java)
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5",0,"# Method  public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)",# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java)
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0,# Class  CallsRealMethods    (CallsRealMethods.java),# Method  public static T geq(Comparable<T> value)    (AdditionalMatchers.java)
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)",# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)","# Method  public static long or(long first, long second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java),# Method  public static short lt(short value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java),# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)",# Method  public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static byte leq(byte value)    (AdditionalMatchers.java),# Method  public static byte lt(byte value)    (AdditionalMatchers.java)
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Method  public static VerificationMode only()    (Mockito.java),# Method  public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)"
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long geq(long value)    (AdditionalMatchers.java),# Method  public static long gt(long value)    (AdditionalMatchers.java)
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,"# Method  public static char or(char first, char second)    (AdditionalMatchers.java)",# Method  public static byte not(byte first)    (AdditionalMatchers.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)",# Method  public static float gt(float value)    (AdditionalMatchers.java)
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,# Method  public static float leq(float value)    (AdditionalMatchers.java),"# Method  public static int and(int first, int second)    (AdditionalMatchers.java)"
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,# Class  ReturnsSmartNulls    (ReturnsSmartNulls.java),# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0,"# Method  public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)",# Method  public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0,# Method  public static double geq(double value)    (AdditionalMatchers.java),# Interface  MockSettings    (MockSettings.java)
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0,# Method  public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java),# Method  public static MockSettings withSettings()    (Mockito.java)
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,# Method  public static long lt(long value)    (AdditionalMatchers.java),# Class  MockitoException    (MockitoException.java)
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),# Method  MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Class  ReturnsElementsOf    (ReturnsElementsOf.java),# Method  public static int leq(int value)    (AdditionalMatchers.java)
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0,"# Method  public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)","# Method  public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)"
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0,"# Method  public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)",# Class  MockitoSerializationIssue    (MockitoSerializationIssue.java)
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,"# Method  public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)",# Method  public static byte geq(byte value)    (AdditionalMatchers.java)
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static byte gt(byte value)    (AdditionalMatchers.java),"# Method  public static short or(short first, short second)    (AdditionalMatchers.java)"
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)","# Method  public static long and(long first, long second)    (AdditionalMatchers.java)"
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java),"# Method  public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)"
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0,# Method  public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java),# Method  public static float not(float first)    (AdditionalMatchers.java)
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0,# Method  public static float gt(float value)    (AdditionalMatchers.java),"# Method  public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)"
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static Answer<T> returnsLastArg()    (AdditionalAnswers.java),# Method  public static float geq(float value)    (AdditionalMatchers.java)
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0,Field RETURNS_SMART_NULLS    (Mockito.java),# Method  public static char not(char first)    (AdditionalMatchers.java)
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0,# Method  public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java),# Method  public static long lt(long value)    (AdditionalMatchers.java)
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0,# Method  public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java),"# Method  public static short and(short first, short second)    (AdditionalMatchers.java)"
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)","# Method  public static byte and(byte first, byte second)    (AdditionalMatchers.java)"
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,"# Method  public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)",# Method  public static long[] aryEq(long[] value)    (AdditionalMatchers.java)
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0,"# Method  public static float and(float first, float second)    (AdditionalMatchers.java)",# Class  MockitoException    (MockitoException.java)
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0,# Method  public static float geq(float value)    (AdditionalMatchers.java),# Method  public static short[] aryEq(short[] value)    (AdditionalMatchers.java)
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0,"# Method  public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)","# Method  public static double and(double first, double second)    (AdditionalMatchers.java)"
