"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assertFalse(boolean condition)    (TestCase.java)
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  ClassRoadie    (ClassRoadie.java),# Class  FailedBefore    (FailedBefore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  ClassRoadie    (ClassRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  FailedBefore    (FailedBefore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  MethodRoadie    (MethodRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Class  MethodValidator    (MethodValidator.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodRoadie    (MethodRoadie.java),# Class  ClassRoadie    (ClassRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodRoadie    (MethodRoadie.java),# Class  FailedBefore    (FailedBefore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodRoadie    (MethodRoadie.java),# Class  MethodValidator    (MethodValidator.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodValidator    (MethodValidator.java),# Class  ClassRoadie    (ClassRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  MethodValidator    (MethodValidator.java),# Class  FailedBefore    (FailedBefore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  ClassRoadie    (ClassRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  FailedBefore    (FailedBefore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  MethodRoadie    (MethodRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  MethodValidator    (MethodValidator.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestClass    (TestClass.java),# Class  TestMethod    (TestMethod.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  ClassRoadie    (ClassRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  FailedBefore    (FailedBefore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  MethodRoadie    (MethodRoadie.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1,# Class  TestMethod    (TestMethod.java),# Class  MethodValidator    (MethodValidator.java)
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","@deprecated Use
assertEquals(String message, double expected, double actual, double delta)
instead",1,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual)    (Assert.java)"
"@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",1,# Method  protected List<MethodRule> rules(Object target)    (BlockJUnit4ClassRunner.java),# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java)
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java)
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java)
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),# Method  public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)    (JUnitMatchers.java)
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.",1,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),# Method  public static Matcher<T> isException(Matcher<T> exceptionMatcher)    (JUnitMatchers.java)
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the class of the test instance",1,# Method  public Class<?> getTestClass()    (Description.java),# Method  public String getClassName()    (Description.java)
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the method (or null if not)",1,# Method  public Class<?> getTestClass()    (Description.java),# Method  public String getMethodName()    (Description.java)
"@return If this describes a method invocation,
the name of the class of the test instance","@return If this describes a method invocation,
the name of the method (or null if not)",1,# Method  public String getClassName()    (Description.java),# Method  public String getMethodName()    (Description.java)
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",1,"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)"
"Adds to errors if the test class has more than one constructor
(do not override)","Adds to errors if the test class's single constructor takes
parameters (do not override)",1,# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java),# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)"
"An assumption exception with the given actual value and a matcher describing
the expectation that failed.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",1,"# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)"
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",1,# Class  AssumptionViolatedException    (AssumptionViolatedException.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1,# Method  public static void assertFalse(boolean condition)    (TestCase.java),# Method  public static void assertTrue(boolean condition)    (Assert.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertTrue(boolean condition)    (TestCase.java),"# Method  public static void assertFalse(String message, boolean condition)    (TestCase.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1,# Method  public static void assertTrue(boolean condition)    (Assert.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1,# Method  public static void assertTrue(boolean condition)    (Assert.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",1,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",1,# Method  public static void assertTrue(boolean condition)    (Assert.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",1,"# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)","# Method  public static void assertThat(String reason, T actual, Matcher<? super T> matcher)    (Assert.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (TestCase.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertNull(String message, Object object)    (Assert.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,"# Method  public static void assertNull(String message, Object object)    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (Assert.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (Assert.java),# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (Assert.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (TestCase.java),# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1,# Method  public static void assertNull(Object object)    (TestCase.java),# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)","# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",1,"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",1,"# Method  public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)","# Method  public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertEquals(long expected, long actual)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (TestCase.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",1,"# Method  public static void assertEquals(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(Object expected, Object actual)    (Assert.java)"
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
",1,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",1,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotEquals(String message, long unexpected, long actual)    (Assert.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",1,"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",1,"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",1,"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",1,"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)"
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1,"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",1,"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1,"# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1,"# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",1,"# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)","# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",1,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)","# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)"
"Construct a new InitializationError with one or more
errors errors as causes
","Construct a new InitializationError with one cause
with message string",1,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Method  public InitializationError(String string)    (InitializationError.java)
"Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",1,"# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
Counts the number of test cases that will be run by this test.,Counts the number of test cases that will be run by this test.,1,# Method  public abstract int countTestCases()    (Test.java),# Method  public int countTestCases()    (TestSuite.java)
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",1,"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)","# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)","# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)","# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1,"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)","# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)"
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)"
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",1,# Method  public static Request aClass(Class<?> clazz)    (Request.java),# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java)
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request aClass(Class<?> clazz)    (Request.java),# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,# Method  public static Request aClass(Class<?> clazz)    (Request.java),"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1,"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)",# Method  public static Request classes(Class<?>... classes)    (Request.java)
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12",1,# Method  public static Timeout millis(long millis)    (Timeout.java),# Method  public static Timeout seconds(long seconds)    (Timeout.java)
"If called with an expression evaluating to false, the test will halt and be ignored.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",1,# Method  public static void assumeTrue(boolean b)    (Assume.java),"# Method  public static void assumeTrue(String message, boolean b)    (Assume.java)"
Invoked when a test is skipped due to a failed assumption.,Invoked when a test is skipped due to a failed assumption.,1,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)"
Invoked when a test is skipped due to a failed assumption.,"Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",1,"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)","# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
Invoked when a test is skipped due to a failed assumption.,"Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",1,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Matches if the result has exactly one failure, and it contains string","Matches if the result has one or more failures, and at least one of them
contains string
",1,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java)
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",1,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  Statement apply(Statement base, Description description)    (TestRule.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",1,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",1,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",1,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Returns a new builder for building an instance.

@since 4.12",1,# Method  public static Builder builder()    (TemporaryFolder.java),# Method  public static Builder builder()    (Timeout.java)
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",1,# Method  public static Builder builder()    (FailOnTimeout.java),# Method  public static Builder builder()    (TemporaryFolder.java)
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance.

@since 4.12",1,# Method  public static Builder builder()    (FailOnTimeout.java),# Method  public static Builder builder()    (Timeout.java)
Returns a new fresh file with a random name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java)
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh file with a random name under the temporary folder.,1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFile() throws IOException    (TemporaryFolder.java)
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java)
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
"Returns a new fresh folder with the given name under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"Returns a new fresh folder with the given name under the temporary
folder.","Returns a new fresh folder with the given name(s) under the temporary
folder.",1,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java)
"Returns a new fresh folder with the given name(s) under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1,# Method  public File newFolder(String... folderNames) throws IOException    (TemporaryFolder.java),# Method  public File newFolder() throws IOException    (TemporaryFolder.java)
"Returns the annotation of type annotationType on this method, if
one exists.","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",1,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Method  public T getAnnotation(Class<T> annotationType)    (Description.java)
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",1,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java)
"Returns true if this member is static, false if not.","Returns true if this member is public, false if not.",1,# Method  public boolean isStatic()    (FrameworkMember.java),# Method  public boolean isPublic()    (FrameworkMember.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",1,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java)
"Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",1,# Method  public Result run(Request request)    (JUnitCore.java),# Method  public Result run(Request request)    (MaxCore.java)
"Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",1,# Method  public Result run(Class<?>... classes)    (JUnitCore.java),"# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",1,# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java),"# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}

@since 4.0",1,# Class  SuiteMethod    (SuiteMethod.java),# Class  AllTests    (AllTests.java)
"Sets the name of a TestCase

@param name the name to set","Sets the name of the suite.

@param name the name to set",1,# Method  public void setName(String name)    (TestCase.java),# Method  public void setName(String name)    (TestSuite.java)
"Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",1,# Method  protected void setUp() throws Exception    (TestCase.java),# Method  protected void tearDown() throws Exception    (TestCase.java)
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",1,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)","# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",1,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java)
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.",1,# Method  public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)    (JUnitMatchers.java),# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java)
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.",1,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java)
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1,# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java),# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java)
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1,# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java),# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java)
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java)
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}",1,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java)
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()",1,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java)
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()",1,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java)
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()",1,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java)
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.",Returns a new fresh file with the given name under the temporary folder.,0,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java)
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,"# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)","# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  protected void tearDown() throws Exception    (TestCase.java),# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,"# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)",# Class  FailedBefore    (FailedBefore.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",0,# Method  public static void assertNull(Object object)    (TestCase.java),"# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)",# Class  MethodValidator    (MethodValidator.java)
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)",# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java)
"Construct a new InitializationError with one or more
errors errors as causes
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,# Method  public static Builder builder()    (TemporaryFolder.java),"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)",# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java),"# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"Adds to errors if the test class's single constructor takes
parameters (do not override)","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertNotEquals(String message, long unexpected, long actual)    (Assert.java)",# Method  public Result run(Request request)    (MaxCore.java)
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0,# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java),"# Method  public static void assumeTrue(String message, boolean b)    (Assume.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,# Class  TestClass    (TestClass.java),"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Returns true if this member is public, false if not.","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0,# Method  public boolean isPublic()    (FrameworkMember.java),"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)"
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static void assertFalse(String message, boolean condition)    (TestCase.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,# Class  MethodRoadie    (MethodRoadie.java),# Method  public static void assertNotNull(Object object)    (Assert.java)
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Returns a new builder for building an instance.

@since 4.12","Matches if the result has exactly one failure, and it contains string",0,# Method  public static Builder builder()    (FailOnTimeout.java),# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java)
"The Test annotation tells JUnit that the public void method
to which it is attached can be run as a test case. To run the method,
JUnit first constructs a fresh instance of the class then invokes the
annotated method. Any exceptions thrown by the test will be reported
by JUnit as a failure. If no exceptions are thrown, the test is assumed
to have succeeded.

A simple test looks like this:

public class Example {
@Test
public void method() {
org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
}
}

The Test annotation supports two optional parameters.
The first, expected, declares that a test method should throw
an exception. If it doesn't throw an exception or if it throws a different exception
than the one declared, the test fails. For example, the following test succeeds:

@Test(expected=IndexOutOfBoundsException.class) public void outOfBounds() {
new ArrayList&lt;Object&gt;().get(1);
}

If the exception's message or one of its properties should be verified, the
org.junit.rules.ExpectedException ExpectedException rule can be used. Further
information about exception testing can be found at the
<a href=""https://github.com/junit-team/junit/wiki/Exception-testing"">JUnit Wiki.

The second optional parameter, timeout, causes a test to fail if it takes
longer than a specified amount of clock time (measured in milliseconds). The following test fails:

@Test(timeout=100) public void infinity() {
while(true);
}

Warning: while timeout is useful to catch and terminate
infinite loops, it should not be considered deterministic. The
following test may or may not fail depending on how the operating system
schedules threads:

@Test(timeout=100) public void sleep100() {
Thread.sleep(100);
}

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Annotation  Test    (Test.java),"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)"
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)",# Method  public static void assertNull(Object object)    (TestCase.java)
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0,"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java)
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)","# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0,"# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)"
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
Returns a new fresh file with the given name under the temporary folder.,"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",0,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}",Invoked when a test is skipped due to a failed assumption.,0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Adds to errors if the test class has more than one constructor
(do not override)",0,# Method  public static Timeout millis(long millis)    (Timeout.java),# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,# Method  public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"@return If this describes a method invocation,
the name of the method (or null if not)","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Method  public String getMethodName()    (Description.java),"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Construct a new InitializationError with one or more
errors errors as causes
","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Class  SuiteMethod    (SuiteMethod.java)
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0,"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertFalse(boolean condition)    (TestCase.java)
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"@return If this describes a method invocation,
the class of the test instance.","Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
",0,# Method  public Class<?> getTestClass()    (Description.java),"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Adds to errors if the test class has more than one constructor
(do not override)",0,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"Returns the annotation of type annotationType on this method, if
one exists.","This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java)
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)"
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0,"# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)","# Method  public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)    (Assert.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0,# Method  public static Timeout seconds(long seconds)    (Timeout.java),"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,"# Method  public static void assertFalse(String message, boolean condition)    (TestCase.java)",# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Returns true if this member is static, false if not.","Matches if the result has one or more failures, and at least one of them
contains string
",0,# Method  public boolean isStatic()    (FrameworkMember.java),# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java)
"Matches if the result has one or more failures, and at least one of them
contains string
","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,# Method  public static Matcher<PrintableResult> hasFailureContaining(final String string)    (ResultMatchers.java),"# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Sets the name of the suite.

@param name the name to set","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public void setName(String name)    (TestSuite.java),"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)","# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public String getClassName()    (Description.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static void assertNotNull(Object object)    (Assert.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
Returns a new fresh file with the given name under the temporary folder.,"An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),"# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Returns a new fresh folder with the given name under the temporary
folder.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),"# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",0,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)"
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)",# Method  protected void tearDown() throws Exception    (TestCase.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Returns a new builder for building an instance.

@since 4.12","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static Builder builder()    (FailOnTimeout.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Class  TestClass    (TestClass.java),"# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)"
"Returns true if this member is public, false if not.","Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",0,# Method  public boolean isPublic()    (FrameworkMember.java),"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  public static Request aClass(Class<?> clazz)    (Request.java),"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Adds to errors if the test class has more than one constructor
(do not override)",0,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)",# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
Returns a new fresh file with a random name under the temporary folder.,"The Test annotation tells JUnit that the public void method
to which it is attached can be run as a test case. To run the method,
JUnit first constructs a fresh instance of the class then invokes the
annotated method. Any exceptions thrown by the test will be reported
by JUnit as a failure. If no exceptions are thrown, the test is assumed
to have succeeded.

A simple test looks like this:

public class Example {
@Test
public void method() {
org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
}
}

The Test annotation supports two optional parameters.
The first, expected, declares that a test method should throw
an exception. If it doesn't throw an exception or if it throws a different exception
than the one declared, the test fails. For example, the following test succeeds:

@Test(expected=IndexOutOfBoundsException.class) public void outOfBounds() {
new ArrayList&lt;Object&gt;().get(1);
}

If the exception's message or one of its properties should be verified, the
org.junit.rules.ExpectedException ExpectedException rule can be used. Further
information about exception testing can be found at the
<a href=""https://github.com/junit-team/junit/wiki/Exception-testing"">JUnit Wiki.

The second optional parameter, timeout, causes a test to fail if it takes
longer than a specified amount of clock time (measured in milliseconds). The following test fails:

@Test(timeout=100) public void infinity() {
while(true);
}

Warning: while timeout is useful to catch and terminate
infinite loops, it should not be considered deterministic. The
following test may or may not fail depending on how the operating system
schedules threads:

@Test(timeout=100) public void sleep100() {
Thread.sleep(100);
}

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0",0,# Method  public File newFile() throws IOException    (TemporaryFolder.java),# Annotation  Test    (Test.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),"# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static Request classes(Computer computer, Class<?>... classes)    (Request.java)","# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Returns a new fresh folder with the given name under the temporary
folder.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0,# Method  public File newFolder(String folder) throws IOException    (TemporaryFolder.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
Invoked when a test is skipped due to a failed assumption.,"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (TestCase.java)"
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,"# Method  Statement apply(Statement base, Description description)    (TestRule.java)",# Class  FailedBefore    (FailedBefore.java)
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)",# Method  public Result run(Request request)    (JUnitCore.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",0,# Class  MethodRoadie    (MethodRoadie.java),"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)",# Method  public Result run(Request request)    (JUnitCore.java)
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java),"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (TestCase.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, char expected, char actual)    (Assert.java)"
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"@param target the test case instance
@return a list of TestRules that should be applied when executing this
test","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0,# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)","# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java)
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)"
"@return If this describes a method invocation,
the name of the method (or null if not)","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,# Method  public String getMethodName()    (Description.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Returns true if this member is public, false if not.","@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test",0,# Method  public boolean isPublic()    (FrameworkMember.java),# Method  protected List<MethodRule> rules(Object target)    (BlockJUnit4ClassRunner.java)
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,# Class  AssumptionViolatedException    (AssumptionViolatedException.java),"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)","# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Returns a new builder for building an instance.

@since 4.12","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,# Method  public static Builder builder()    (Timeout.java),"# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)","# Method  public static void assertThat(String reason, T actual, Matcher<? super T> matcher)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0,"# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,"# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)",# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
Counts the number of test cases that will be run by this test.,"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public abstract int countTestCases()    (Test.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",0,# Method  public static Builder builder()    (TemporaryFolder.java),"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)"
"Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,# Method  public Result run(Request request)    (JUnitCore.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static Request aClass(Class<?> clazz)    (Request.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"Optionally specify timeout in milliseconds to cause a test method to fail if it
takes longer than that number of milliseconds.

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,# Annotation Member timeout    (Test.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","@deprecated Use
assertEquals(String message, double expected, double actual, double delta)
instead",0,"# Method  public static void assertSame(String message, Object expected, Object actual)    (TestCase.java)","# Method  public static void assertEquals(String message, double expected, double actual)    (Assert.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
"Matches if the result has exactly one failure, and it contains string","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,# Method  public static void assertTrue(boolean condition)    (Assert.java),"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),"# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Construct a new InitializationError with one or more
errors errors as causes
","This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java)
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)","# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)"
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)",# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java)
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),# Method  protected void setUp() throws Exception    (TestCase.java)
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Returns a new builder for building an instance.

@since 4.12","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public static Builder builder()    (Timeout.java),"# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,"# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)","# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.
@Test
public void throwsExceptionWhoseMessageCompliesWithMatcher() {
thrown.expectMessage(startsWith(&quot;What&quot;));
throw new NullPointerException(&quot;What happened?&quot;);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Method  public ExpectedException expectMessage(Matcher<String> matcher)    (ExpectedException.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)","# Method  public static void assertSame(Object expected, Object actual)    (Assert.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java),"# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,# Class  MethodRoadie    (MethodRoadie.java),# Method  public Result run(Request request)    (MaxCore.java)
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java)
"@return the annotation of type annotationType that is attached to this description node,
or null if none exists
","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  public T getAnnotation(Class<T> annotationType)    (Description.java),"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)",# Method  public static void assertNull(Object object)    (TestCase.java)
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,# Method  public File newFolder() throws IOException    (TemporaryFolder.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.","Adds to errors if the test class has more than one constructor
(do not override)",0,# Method  protected void tearDown() throws Exception    (TestCase.java),# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",0,# Class  MethodValidator    (MethodValidator.java),"# Method  public static Description createTestDescription(Class<?> clazz, String name)    (Description.java)"
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0,"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)","# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),"# Method  public static void assertArrayEquals(byte[] expecteds, byte[] actuals)    (Assert.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)",# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Returns a new builder for building an instance.

@since 4.12","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()",0,# Method  public static Builder builder()    (FailOnTimeout.java),# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java)
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)","# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"Returns a new builder for building an instance.

@since 4.12","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  public static Builder builder()    (FailOnTimeout.java),"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)",# Method  public T getAnnotation(Class<T> annotationType)    (Description.java)
"If called with an expression evaluating to false, the test will halt and be ignored.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public static void assumeTrue(boolean b)    (Assume.java),# Method  public Result run(Request request)    (JUnitCore.java)
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  Statement apply(Statement base, Description description)    (TestRule.java)","# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)",# Class  MethodRoadie    (MethodRoadie.java)
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0,# Class  MethodValidator    (MethodValidator.java),# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)","# Method  public static void assertEquals(long expected, long actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),"# Method  public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Returns true if this member is static, false if not.","Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",0,# Method  public boolean isStatic()    (FrameworkMember.java),"# Method  public void checkThat(final T value, final Matcher<T> matcher)    (ErrorCollector.java)"
"The Test annotation tells JUnit that the public void method
to which it is attached can be run as a test case. To run the method,
JUnit first constructs a fresh instance of the class then invokes the
annotated method. Any exceptions thrown by the test will be reported
by JUnit as a failure. If no exceptions are thrown, the test is assumed
to have succeeded.

A simple test looks like this:

public class Example {
@Test
public void method() {
org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
}
}

The Test annotation supports two optional parameters.
The first, expected, declares that a test method should throw
an exception. If it doesn't throw an exception or if it throws a different exception
than the one declared, the test fails. For example, the following test succeeds:

@Test(expected=IndexOutOfBoundsException.class) public void outOfBounds() {
new ArrayList&lt;Object&gt;().get(1);
}

If the exception's message or one of its properties should be verified, the
org.junit.rules.ExpectedException ExpectedException rule can be used. Further
information about exception testing can be found at the
<a href=""https://github.com/junit-team/junit/wiki/Exception-testing"">JUnit Wiki.

The second optional parameter, timeout, causes a test to fail if it takes
longer than a specified amount of clock time (measured in milliseconds). The following test fails:

@Test(timeout=100) public void infinity() {
while(true);
}

Warning: while timeout is useful to catch and terminate
infinite loops, it should not be considered deterministic. The
following test may or may not fail depending on how the operating system
schedules threads:

@Test(timeout=100) public void sleep100() {
Thread.sleep(100);
}

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Annotation  Test    (Test.java),"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"@return the annotation of type annotationType that is attached to this description node,
or null if none exists
","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",0,# Method  public T getAnnotation(Class<T> annotationType)    (Description.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0,# Class  AssumptionViolatedException    (AssumptionViolatedException.java),"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)",# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java)
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)"
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  public static void assertFalse(boolean condition)    (Assert.java),"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public TestSuite(Class<? extends TestCase>[] classes, String name)    (TestSuite.java)"
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}

@since 4.0",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),# Class  AllTests    (AllTests.java)
"Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,# Method  public static void assertNotNull(Object object)    (Assert.java),"# Method  public static void assertEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",0,# Class  TestClass    (TestClass.java),"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)"
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,"# Method  public static void assertArrayEquals(int[] expecteds, int[] actuals)    (Assert.java)","# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0,"# Method  public static void assertThat(String reason, T actual, Matcher<? super T> matcher)    (Assert.java)","# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",0,# Class  SuiteMethod    (SuiteMethod.java),# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java)
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0,# Method  public static Request classes(Class<?>... classes)    (Request.java),# Class  AssumptionViolatedException    (AssumptionViolatedException.java)
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",Invoked when a test is skipped due to a failed assumption.,0,# Class  TestClass    (TestClass.java),"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)"
"@return the annotation of type annotationType that is attached to this description node,
or null if none exists
","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public T getAnnotation(Class<T> annotationType)    (Description.java),# Method  public Result run(Request request)    (MaxCore.java)
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)","# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","The Test annotation tells JUnit that the public void method
to which it is attached can be run as a test case. To run the method,
JUnit first constructs a fresh instance of the class then invokes the
annotated method. Any exceptions thrown by the test will be reported
by JUnit as a failure. If no exceptions are thrown, the test is assumed
to have succeeded.

A simple test looks like this:

public class Example {
@Test
public void method() {
org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
}
}

The Test annotation supports two optional parameters.
The first, expected, declares that a test method should throw
an exception. If it doesn't throw an exception or if it throws a different exception
than the one declared, the test fails. For example, the following test succeeds:

@Test(expected=IndexOutOfBoundsException.class) public void outOfBounds() {
new ArrayList&lt;Object&gt;().get(1);
}

If the exception's message or one of its properties should be verified, the
org.junit.rules.ExpectedException ExpectedException rule can be used. Further
information about exception testing can be found at the
<a href=""https://github.com/junit-team/junit/wiki/Exception-testing"">JUnit Wiki.

The second optional parameter, timeout, causes a test to fail if it takes
longer than a specified amount of clock time (measured in milliseconds). The following test fails:

@Test(timeout=100) public void infinity() {
while(true);
}

Warning: while timeout is useful to catch and terminate
infinite loops, it should not be considered deterministic. The
following test may or may not fail depending on how the operating system
schedules threads:

@Test(timeout=100) public void sleep100() {
Thread.sleep(100);
}

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0",0,# Class  TestMethod    (TestMethod.java),# Annotation  Test    (Test.java)
"Construct a new InitializationError with one or more
errors errors as causes
","Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),# Method  public static Timeout millis(long millis)    (Timeout.java)
"Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0,"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0,"# Method  public AssumptionViolatedException(Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)",# Method  public static void assertTrue(boolean condition)    (TestCase.java)
"Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,# Method  public List<Exception> validateAnnotatedMethod(FrameworkMethod method)    (AnnotationValidator.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Returns true if this member is public, false if not.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,# Method  public boolean isPublic()    (FrameworkMember.java),# Method  public static void assertNull(Object object)    (TestCase.java)
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","@deprecated Use
assertEquals(double expected, double actual, double delta)
instead",0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertEquals(double expected, double actual)    (Assert.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Method  public static Builder builder()    (TemporaryFolder.java)
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionThatCompliesWithMatcher() {
NullPointerException e = new NullPointerException();
thrown.expect(is(e));
throw e;
}

@deprecated use org.hamcrest.junit.ExpectedException.expect()","Returns a new builder for building an instance.

@since 4.12",0,# Method  public ExpectedException expect(Matcher<?> matcher)    (ExpectedException.java),# Method  public static Builder builder()    (Timeout.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (Timeout.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,"# Method  public static void assertNotEquals(Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)"
"Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0,"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)",# Method  protected List<TestRule> getTestRules(Object target)    (BlockJUnit4ClassRunner.java)
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),# Method  public static Builder builder()    (TemporaryFolder.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static Description createTestDescription(String className, String name, Serializable uniqueId)    (Description.java)","# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",0,# Method  private Statement withClassRules(Statement statement)    (ParentRunner.java),# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java)
"Returns true if this member is static, false if not.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,# Method  public boolean isStatic()    (FrameworkMember.java),# Class  ClassRoadie    (ClassRoadie.java)
Invoked when a test is skipped due to a failed assumption.,"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure    (Assert.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)",# Method  protected void tearDown() throws Exception    (TestCase.java)
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)"
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,# Method  public File newFolder() throws IOException    (TemporaryFolder.java),"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)"
"Returns true if this member is public, false if not.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,# Method  public boolean isPublic()    (FrameworkMember.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0,"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)","# Method  public static void assumeTrue(String message, boolean b)    (Assume.java)"
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertNotNull(String message, Object object)    (TestCase.java)",# Method  public Result run(Request request)    (MaxCore.java)
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure    (Assert.java)","# Method  public static void assertEquals(String message, short expected, short actual)    (TestCase.java)"
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
",0,# Class  TestClass    (TestClass.java),# Method  public List<Exception> validateAnnotatedClass(TestClass testClass)    (AnnotationValidator.java)
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  protected String elapsedTimeAsString(long runTime)    (TextListener.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",0,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Class  ClassRoadie    (ClassRoadie.java),"# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)    (JUnitMatchers.java),# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java)
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),# Method  protected void setUp() throws Exception    (TestCase.java)
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static void assertFalse(boolean condition)    (Assert.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,"# Method  public Builder withTimeout(long timeout, TimeUnit unit)    (FailOnTimeout.java)","# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
Invoked when a test is skipped due to a failed assumption.,"Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)","# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Class  MethodValidator    (MethodValidator.java),"# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.",0,"# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)",# Method  public static Matcher<T> isException(Matcher<T> exceptionMatcher)    (JUnitMatchers.java)
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,# Method  public ExpectedException handleAssertionErrors()    (ExpectedException.java),"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)"
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.
@Test
public void throwsExceptionWhoseCauseCompliesWithMatcher() {
NullPointerException expectedCause = new NullPointerException();
thrown.expectCause(is(expectedCause));
throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
}

@deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)    (ExpectedException.java),"# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.",0,# Method  public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)    (JUnitMatchers.java),# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java)
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)"
"Construct a new InitializationError with one or more
errors errors as causes
","Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),"# Method  Statement apply(Statement base, Description description)    (TestRule.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",0,# Method  public static Matcher<Iterable<T>> hasItems(T... elements)    (JUnitMatchers.java),"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,"# Method  protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError    (Suite.java)","# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertNotEquals(float unexpected, float actual, float delta)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Sets the name of a TestCase

@param name the name to set",0,# Method  public static void assertNull(Object object)    (TestCase.java),# Method  public void setName(String name)    (TestCase.java)
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),# Method  public static void assertNull(Object object)    (Assert.java)
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (TestCase.java)"
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  public ExpectedException handleAssumptionViolatedExceptions()    (ExpectedException.java),"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertNull(String message, Object object)    (TestCase.java)"
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0,"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)",# Method  public static void assertFalse(boolean condition)    (Assert.java)
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (Timeout.java),"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)"
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertNotEquals(String message, long unexpected, long actual)    (Assert.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)","# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0,"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(long expected, long actual)    (Assert.java)","# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  public static void assertFalse(String message, boolean condition)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,# Class  ClassRoadie    (ClassRoadie.java),"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)"
Counts the number of test cases that will be run by this test.,"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0,# Method  public int countTestCases()    (TestSuite.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,# Class  JUnit4ClassRunner    (JUnit4ClassRunner.java),# Method  public Result run(Request request)    (MaxCore.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",Invoked when a test is skipped due to a failed assumption.,0,# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  protected void skipped(AssumptionViolatedException e, Description description)    (TestWatcher.java)"
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0,# Method  protected Statement withBeforeClasses(Statement statement)    (ParentRunner.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)"
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","If called with an expression evaluating to false, the test will halt and be ignored.",0,# Method  public static Timeout seconds(long seconds)    (Timeout.java),# Method  public static void assumeTrue(boolean b)    (Assume.java)
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (Assert.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)","# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assumeTrue(String message, boolean b)    (Assume.java)","# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"@return If this describes a method invocation,
the name of the method (or null if not)","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public String getMethodName()    (Description.java),"# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"@return If this describes a method invocation,
the name of the method (or null if not)","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  public String getMethodName()    (Description.java),"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
Returns a new fresh file with a random name under the temporary folder.,"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0,# Method  public File newFile() throws IOException    (TemporaryFolder.java),"# Method  public static void assertEquals(Object expected, Object actual)    (TestCase.java)"
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(short[] expecteds, short[] actuals)    (Assert.java)","# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0,# Method  public static Matcher<T> isException(Matcher<T> exceptionMatcher)    (JUnitMatchers.java),"# Method  public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,"# Method  public static void assertNotEquals(String message, Object unexpected, Object actual)    (Assert.java)","# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,"# Method  public void validatePublicVoid(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)","# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)"
"@return If this describes a method invocation,
the name of the class of the test instance","Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0,# Method  public String getClassName()    (Description.java),# Method  public static void assertTrue(boolean condition)    (Assert.java)
Returns a new fresh file with the given name under the temporary folder.,"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),"# Method  public static void assumeThat(T actual, Matcher<T> matcher)    (Assume.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),"# Method  public static void assertNotSame(Object expected, Object actual)    (Assert.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.",0,# Class  TestClass    (TestClass.java),# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java)
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, Object expected, Object actual)    (Assert.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)",# Class  ClassRoadie    (ClassRoadie.java)
"Matches if the result has exactly one failure, and it contains string","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),"# Method  public TestSuite(Class<? extends TestCase> theClass, String name)    (TestSuite.java)"
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,"# Method  Statement apply(Statement base, FrameworkMethod method, Object target)    (MethodRule.java)","# Method  public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure    (Assert.java)"
"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static Result runClasses(Computer computer, Class<?>... classes)    (JUnitCore.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0,# Method  public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  public static void assertNotSame(String message, Object expected, Object actual)    (Assert.java)"
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Class  SuiteMethod    (SuiteMethod.java),"# Method  public static void assertEquals(String message, int expected, int actual)    (TestCase.java)"
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Class  AssumptionViolatedException    (AssumptionViolatedException.java),"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (Assert.java)"
Returns a new fresh file with the given name under the temporary folder.,"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java),"# Method  public static void assertNull(String message, Object object)    (Assert.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),# Method  protected String elapsedTimeAsString(long runTime)    (ResultPrinter.java)
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)","# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)"
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertNotSame(String message, Object unexpected, Object actual)    (Assert.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public static Request aClass(Class<?> clazz)    (Request.java),# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"If called with an expression evaluating to false, the test will halt and be ignored.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0,# Method  public static void assumeTrue(boolean b)    (Assume.java),"# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static void assertFalse(boolean condition)    (TestCase.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0,# Method  public static void assertNull(Object object)    (Assert.java),"# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)"
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0,"# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)","# Method  public static void assertNotSame(Object expected, Object actual)    (TestCase.java)"
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Method  public T getAnnotation(Class<T> annotationType)    (FrameworkMethod.java),"# Method  public static void assertEquals(double expected, double actual, double delta)    (TestCase.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)","# Method  public static void assumeThat(String message, T actual, Matcher<T> matcher)    (Assume.java)"
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0,"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)",# Method  public static void assertTrue(boolean condition)    (Assert.java)
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Optionally specify timeout in milliseconds to cause a test method to fail if it
takes longer than that number of milliseconds.

THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.",0,# Class  TestClass    (TestClass.java),# Annotation Member timeout    (Test.java)
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",0,# Method  public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)    (JUnitMatchers.java),"# Method  protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)    (ParentRunner.java)"
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, double expected, double actual, double delta)    (Assert.java)"
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Matches if the result has exactly one failure, and it contains string","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0,# Method  public static Matcher<Object> hasSingleFailureContaining(final String string)    (ResultMatchers.java),"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)"
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertEquals(double expected, double actual)    (Assert.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Returns true if this member is public, false if not.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,# Method  public boolean isPublic()    (FrameworkMember.java),# Method  public static void assertNull(Object object)    (Assert.java)
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),"# Method  protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"Verify that your code throws an exception that is an
instance of specific type.
@Test
public void throwsExceptionWithSpecificType() {
thrown.expect(NullPointerException.class);
throw new NullPointerException();
}","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0,# Method  public ExpectedException expect(Class<? extends Throwable> type)    (ExpectedException.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test",0,"# Method  public static void assertEquals(String message, float expected, float actual, float delta)    (TestCase.java)",# Method  protected List<MethodRule> rules(Object target)    (BlockJUnit4ClassRunner.java)
"Invoked when a test is skipped due to a failed assumption.

@deprecated use #skipped(AssumptionViolatedException, Description)","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)    (TestWatcher.java)",# Method  public static void assertNull(Object object)    (Assert.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",Invoked when a test is skipped due to a failed assumption.,0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),"# Method  protected void skipped(long nanos, AssumptionViolatedException e, Description description)    (Stopwatch.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),# Method  public static Result runClasses(Class<?>... classes)    (JUnitCore.java)
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0,"# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)",# Method  public static void assertNull(Object object)    (TestCase.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, int expected, int actual)    (Assert.java)"
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String assumption, Throwable e)    (AssumptionViolatedException.java)","# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public static Request classes(Class<?>... classes)    (Request.java),"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)"
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0,# Class  TestMethod    (TestMethod.java),"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)"
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,# Method  public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)    (JUnitMatchers.java),"# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0,# Method  public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)    (TestClass.java),"# Method  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)    (BlockJUnit4ClassRunner.java)"
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertTrue(String message, boolean condition)    (TestCase.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"An assumption exception with the given actual value and a matcher describing
the expectation that failed.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0,"# Method  public static void assertEquals(String message, Object expected, Object actual)    (TestCase.java)",# Method  protected void tearDown() throws Exception    (TestCase.java)
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),"# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Adds to errors if the test class has more than one constructor
(do not override)",0,"# Method  public static void assertNotEquals(String message, double unexpected, double actual, double delta)    (Assert.java)",# Method  protected void validateOnlyOneConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)    (Assert.java)","# Method  public static void assertEquals(String message, byte expected, byte actual)    (TestCase.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertArrayEquals(char[] expecteds, char[] actuals)    (Assert.java)"
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0,# Method  protected Statement withAfterClasses(Statement statement)    (ParentRunner.java),"# Method  private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)    (BlockJUnit4ClassRunner.java)"
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)"
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0,"# Method  public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure    (Assert.java)",# Method  public static void assertNotNull(Object object)    (Assert.java)
"Returns a new builder for building an instance.

@since 4.12","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0,# Method  public static Builder builder()    (Timeout.java),"# Method  public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)    (Assert.java)"
"An assumption exception with the given actual value and a matcher describing
the expectation that failed.","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public AssumptionViolatedException(T actual, Matcher<T> matcher)    (AssumptionViolatedException.java)",# Method  public Result run(Class<?>... classes)    (JUnitCore.java)
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",0,"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)",# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java)
"Construct a new InitializationError with one or more
errors errors as causes
","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0,# Method  public InitializationError(List<Throwable> errors)    (InitializationError.java),"# Method  public static void assertThat(T actual, Matcher<? super T> matcher)    (Assert.java)"
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",Returns a new fresh file with the given name under the temporary folder.,0,"# Method  public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)    (FrameworkMethod.java)",# Method  public File newFile(String fileName) throws IOException    (TemporaryFolder.java)
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0,# Method  public AssumptionViolatedException(String assumption)    (AssumptionViolatedException.java),"# Method  public Result run(Computer computer, Class<?>... classes)    (JUnitCore.java)"
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,# Method  public static Matcher<Iterable<? super T>> hasItem(T element)    (JUnitMatchers.java),"# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0,"# Method  public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)    (Assert.java)","# Method  public static void assertNotSame(Object unexpected, Object actual)    (Assert.java)"
"Construct a new InitializationError with one cause
with message string","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public InitializationError(String string)    (InitializationError.java),"# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",0,"# Method  protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError    (Suite.java)",# Method  public static Request classWithoutSuiteMethod(Class<?> clazz)    (Request.java)
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0,"# Method  public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)    (Description.java)","# Method  public static void assertEquals(double expected, double actual, double delta)    (Assert.java)"
Counts the number of test cases that will be run by this test.,"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public abstract int countTestCases()    (Test.java),"# Method  public static void assertEquals(String message, short expected, short actual)    (Assert.java)"
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",0,# Method  public List<FrameworkMethod> getAnnotatedMethods()    (TestClass.java),# Method  public T getAnnotation(Class<T> annotationType)    (Description.java)
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0,"# Method  public static void assertEquals(float expected, float actual, float delta)    (TestCase.java)",# Method  public Result run(Request request)    (MaxCore.java)
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0,"# Method  public static void assertSame(Object expected, Object actual)    (TestCase.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0,# Method  public Builder withLookingForStuckThread(boolean enable)    (FailOnTimeout.java),"# Method  public static void assertNotNull(String message, Object object)    (Assert.java)"
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0,# Method  public static Matcher<T> isException(Matcher<T> exceptionMatcher)    (JUnitMatchers.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (Assert.java)"
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0,"# Method  public static void assertNotEquals(long unexpected, long actual)    (Assert.java)","# Method  public static void assertSame(String message, Object expected, Object actual)    (Assert.java)"
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",0,"# Method  public static Description createSuiteDescription(String name, Annotation... annotations)    (Description.java)",# Method  public List<Exception> validateAnnotatedField(FrameworkField field)    (AnnotationValidator.java)
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0,"# Method  public static void assertArrayEquals(long[] expecteds, long[] actuals)    (Assert.java)","# Method  public static void assertEquals(float expected, float actual, float delta)    (Assert.java)"
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",0,"# Method  public void checkThat(final String reason, final T value, final Matcher<T> matcher)    (ErrorCollector.java)","# Method  Statement apply(Statement base, Description description)    (TestRule.java)"
"An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,"# Method  public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)    (AssumptionViolatedException.java)","# Method  public static void assertEquals(String message, boolean expected, boolean actual)    (Assert.java)"
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Adds to errors if the test class's single constructor takes
parameters (do not override)",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)",# Method  protected void validateZeroArgConstructor(List<Throwable> errors)    (BlockJUnit4ClassRunner.java)
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0,"# Method  public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)    (Description.java)","# Method  public static void assertNotEquals(String message, float unexpected, float actual, float delta)    (Assert.java)"
"Verify that your code throws an exception whose message contains
a specific text.
@Test
public void throwsExceptionWhoseMessageContainsSpecificText() {
thrown.expectMessage(&quot;happened&quot;);
throw new NullPointerException(&quot;What happened?&quot;);
}","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0,# Method  public ExpectedException expectMessage(String substring)    (ExpectedException.java),"# Method  public static void assertEquals(String message, long expected, long actual)    (TestCase.java)"
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0,"# Method  public static void assertEquals(String message, Object[] expecteds, Object[] actuals)    (Assert.java)","# Method  public static void assertTrue(String message, boolean condition)    (Assert.java)"
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0,# Method  public List<FrameworkField> getAnnotatedFields()    (TestClass.java),"# Method  public static void assertArrayEquals(Object[] expecteds, Object[] actuals)    (Assert.java)"
