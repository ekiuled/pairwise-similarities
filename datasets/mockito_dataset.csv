"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",1
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",1
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",1
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",1
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",1
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation",1
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable",1
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",1
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",1
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.",1
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver",1
"Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",1
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",1
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.",1
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",1
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",1
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",1
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1
"int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",1
"short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",1
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.",0
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",0
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",0
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",0
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",0
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",0
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",0
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",0
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.",0
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.",0
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",0
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",0
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing",0
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",0
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.",0
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",0
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",0
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",0
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.",0
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",0
"byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
);

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock setting when the demand comes.
Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",0
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",0
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",0
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5","double argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",0
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",0
"comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0
"Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"double argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",0
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver",0
"byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0
"byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"@deprecated
Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Allows checking if given method was the only one invoked. E.g:
<pre class=""code""><code class=""java"">
verify(mock, only()).someMethod();
//above is a shorthand for following 2 lines of code:
verify(mock).someMethod();
verifyNoMoreInvocations(mock);

See also Mockito#verifyNoMoreInteractions(Object...)

See examples in javadoc for Mockito class

@return verification mode",0
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
",0
"Use doThrow() when you want to stub the void method with an exception.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(new RuntimeException()).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","long argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",0
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Object argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param <T>
the type of the object, it is passed through to prevent casts.
@param first
placeholder for the argument matcher.
@return null.",0
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0
"Test if two floats are equal byt testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand float
@param rhs  the right hand float
@return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.

This also will be called for the top level of
multi-dimensional, ragged, and multi-typed arrays.

@param lhs  the left hand Object[]
@param rhs  the right hand Object[]
@return EqualsBuilder - used to chain calls.",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","long argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Test if two doubles are equal by testing that the
pattern of bits returned by doubleToLong are equal.

This handles NaNs, Infinities, and -0.0.

It is compatible with the hash code generated by
HashCodeBuilder.

@param lhs  the left hand double
@param rhs  the right hand double
@return EqualsBuilder - used to chain calls.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode","argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",0
"Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",0
"Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",0
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","@deprecated

Deprecated
Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().

To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.

In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.

Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235

@return verification mode",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param throwable Tha throwable raised by the method invocation","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",0
"Build a new org.mockito.listeners.MethodInvocationReport with a return value.

@param invocation Information on the method call
@param returnedValue The value returned by the method invocation","Allows mock creation with additional mock settings.

Don't use it too often.
Consider writing simple tests that use simple mocks.
Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
If you cannot write a test in a simple way - refactor the code under test.

Examples of mock settings:
<pre class=""code""><code class=""java"">
//Creates mock with different default answer & name
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie""));

//Creates mock with different default answer, descriptive name and extra interfaces
Foo mock = mock(Foo.class, withSettings()
.defaultAnswer(RETURNS_SMART_NULLS)
.name(""cool mockie"")
.extraInterfaces(Bar.class));

MockSettings has been introduced for two reasons.
Firstly, to make it easy to add another mock settings when the demand comes.
Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.

See javadoc for MockSettings to learn about possible mock settings.

@return mock settings instance with defaults.",0
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.

The stack trace is filtered from mockito calls if you are using #getStackTrace().
For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
However note that other calls related to the stackTrace will refer to the filter stacktrace.

@since 1.10.0",0
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0","float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",0
"Use doThrow() when you want to stub the void method with an exception.

A new exception instance will be created for each method invocation.

Stubbing voids requires different approach from Mockito#when(Object) because the compiler
does not like void methods inside brackets...

Example:

<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).when(mock).someVoidMethod();

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing
@since 2.0.0","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
