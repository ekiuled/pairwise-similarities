"Returns true if this member is static, false if not.","Returns true if this member is public, false if not.",1
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0",1
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",1
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance.

@since 4.12",1
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1
"Returns the annotation of type annotationType on this method, if
one exists.","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",1
"Construct a new InitializationError with one or more
errors errors as causes
","Construct a new InitializationError with one cause
with message string",1
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",1
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",1
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",1
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.",1
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",1
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.",1
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",1
"Verify that your code throws an exception that is an
instance of specific type.","Verify that your code throws an exception whose message contains
a specific text.",1
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",1
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",1
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1
Invoked when a test is skipped due to a failed assumption.,Invoked when a test is skipped due to a failed assumption.,1
Invoked when a test is skipped due to a failed assumption.,Invoked when a test is skipped due to a failed assumption.,1
"Matches if the result has exactly one failure, and it contains string","Matches if the result has one or more failures, and at least one of them
contains string
",1
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",1
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.",1
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.",1
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Returns a new builder for building an instance.

@since 4.12",1
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh file with a random name under the temporary folder.,1
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1
Returns a new fresh file with a random name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1
"Returns a new fresh folder with the given name under the temporary
folder.","Returns a new fresh folder with the given name(s) under the temporary
folder.",1
"Returns a new fresh folder with the given name under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1
"Returns a new fresh folder with the given name(s) under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1
Invoked when a test is skipped due to a failed assumption.,Invoked when a test is skipped due to a failed assumption.,1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"Provides implementations of org.junit.runner.Runner

@since 4.0","Provides implementations of org.junit.runner.Runner

@since 4.0",1
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12",1
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",1
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",1
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",1
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",1
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the class of the test instance",1
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the method (or null if not)",1
"@return If this describes a method invocation,
the name of the class of the test instance","@return If this describes a method invocation,
the name of the method (or null if not)",1
"Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",1
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",1
"THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.","THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0",1
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1
"Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",1
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",1
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",1
"Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0","Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0",1
Counts the number of test cases that will be run by this test.,Counts the number of test cases that will be run by this test.,1
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
",1
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",1
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",1
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",1
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead","@deprecated Use
assertEquals(String message, double expected, double actual, double delta)
instead",1
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",1
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",1
"Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",1
"Sets the name of a TestCase

@param name the name to set","Sets the name of the suite.

@param name the name to set",1
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",1
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",1
"Adds to errors if the test class has more than one constructor
(do not override)","Adds to errors if the test class's single constructor takes
parameters (do not override)",1
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",1
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",1
"Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",1
"If called with an expression evaluating to false, the test will halt and be ignored.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",1
"@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",1
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",1
"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",1
"Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)","Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",1
"An assumption exception with the given actual value and a matcher describing
the expectation that failed.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",1
"Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",1
"Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",1
"Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",1
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",1
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Verify that your code throws an exception whose message contains
a specific text.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Adds to errors if the test class has more than one constructor
(do not override)",0
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",Counts the number of test cases that will be run by this test.,0
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0
Returns a new fresh file with the given name under the temporary folder.,"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",0
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0
"Provides implementations of org.junit.runner.Runner

@since 4.0","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Returns the annotation of type annotationType on this method, if
one exists.","@return If this describes a method invocation,
the class of the test instance.",0
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0
Invoked when a test is skipped due to a failed assumption.,"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"Matches if the result has exactly one failure, and it contains string","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Sets the name of the suite.

@param name the name to set",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",0
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Returns a Statement: run all non-overridden @After
methods on this class and superclasses before running next; all
After methods are always executed: exceptions thrown by previous steps
are combined, if necessary, with exceptions from After methods into a
MultipleFailureException.",0
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0
Returns a new fresh file with the given name under the temporary folder.,"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Sets the name of a TestCase

@param name the name to set",0
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0
"Construct a new InitializationError with one cause
with message string","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"@return If this describes a method invocation,
the class of the test instance.","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns a new builder for building an instance.

@since 4.12",0
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0
"Adds to errors if the test class has more than one constructor
(do not override)","Run all the tests in classes.

@param computer Helps construct Runners from classes
@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0
"Returns a new builder for building an instance.

@since 4.12",Invoked when a test is skipped due to a failed assumption.,0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Create a Request that, when processed, will run all the tests
in a class. If the class has a suite() method, it will be ignored.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run",0
Invoked when a test is skipped due to a failed assumption.,"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Returns a new fresh folder with the given name(s) under the temporary
folder.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0
"Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0
Returns a new fresh file with a random name under the temporary folder.,"@deprecated Use
assertEquals(double expected, double actual, double delta)
instead",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Provides implementations of org.junit.runner.Runner

@since 4.0",0
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0
"Returns a new fresh folder with the given name under the temporary
folder.","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
Invoked when a test is skipped due to a failed assumption.,"Constructs a TestSuite from the given array of classes with the given name.

@see TestSuite#TestSuite(Class[])",0
"Returns the annotation of type annotationType on this method, if
one exists.","Returns a new fresh folder with the given name(s) under the temporary
folder.",0
"Returns a new fresh folder with the given name(s) under the temporary
folder.",Invoked when a test is skipped due to a failed assumption.,0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0
"Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0","@param target the test case instance
@return a list of MethodRules that should be applied when executing this
test",0
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.",Returns a new fresh file with a random name under the temporary folder.,0
"Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",Counts the number of test cases that will be run by this test.,0
"Returns a new builder for building an instance.

@since 4.12","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
","Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",0
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"Construct a new InitializationError with one cause
with message string","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Provides implementations of org.junit.runner.Runner

@since 4.0","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",0
"Verify that your code throws an exception whose message contains
a specific text.","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.",0
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does not throw an exception, an AssertionError is thrown. If it
throws the wrong type of exception, an AssertionError is thrown describing the
mismatch; the exception that was actually thrown can be obtained by calling {@link
AssertionError#getCause}.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@since 4.13",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","An assumption exception with the given actual value and a matcher describing
the expectation that failed.",0
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0
"Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Verify that your code throws an exception whose message contains
a specific text.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",0
"Construct a new InitializationError with one or more
errors errors as causes
","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",Returns a new fresh folder with a random name under the temporary folder.,0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected",0
"Construct a new InitializationError with one cause
with message string","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Returns a new builder for building an instance.

@since 4.12","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns a new builder for building an instance.

@since 4.12",0
Returns a new fresh folder with a random name under the temporary folder.,"Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0
"Returns a new builder for building an instance.

@since 4.12","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
Returns a new fresh file with a random name under the temporary folder.,"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0
"@return the annotation of type annotationType that is attached to this description node,
or null if none exists
","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
the reason and information about the matcher and failing value. Example:

assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
// failure message:
// Help! Integers don't work
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param reason additional information about the error
@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Constructs a TestSuite from the given class with the given name.

@see TestSuite#TestSuite(Class)",0
Returns a new fresh file with a random name under the temporary folder.,"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.",0
"Matches if the result has exactly one failure, and it contains string","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0",Returns a new fresh folder with a random name under the temporary folder.,0
"An assumption exception with the given actual value and a matcher describing
the expectation that failed.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.",0
"Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.","Sets the name of a TestCase

@param name the name to set",0
"Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Verify that your code throws an exception that is an
instance of specific type.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value",0
"Construct a new InitializationError with one cause
with message string","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0
"Returns a new builder for building an instance.

@since 4.12","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",0
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0
"An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Adds to errors if the test class has more than one constructor
(do not override)",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Validates annotation on the given field.

@param field that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",0
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Matches if the result has one or more failures, and at least one of them
contains string
","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns a new fresh folder with the given name(s) under the temporary
folder.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Adds to errors if the test class's single constructor takes
parameters (do not override)","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0
Invoked when a test is skipped due to a failed assumption.,"THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.","Provides implementations of org.junit.runner.Runner

@since 4.0",0
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0
"Returns true if this member is static, false if not.","This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.",0
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",0
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values",0
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0",0
"Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}",0
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",0
"@return the annotation of type annotationType that is attached to this description node,
or null if none exists
","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Returns a new fresh folder with the given name(s) under the temporary
folder.","Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.",0
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Sets the name of the suite.

@param name the name to set",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",0
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"Returns a new fresh folder with the given name under the temporary
folder.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Asserts that two objects refer to the same object. If they are not the
same, an AssertionError without a message is thrown.

@param expected the expected object
@param actual the object to compare to expected",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Validates annotation on the given class.

@param testClass that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12
",0
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",0
"Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that an object isn't null. If it is an AssertionError is
thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.
","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0
"@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.","Create a Request that, when processed, will run all the tests
in a set of classes with the default Computer.

@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run",0
"Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0
"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.","An assumption exception with a message with the given actual value and a
matcher describing the expectation that failed.",0
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
Counts the number of test cases that will be run by this test.,"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
Invoked when a test is skipped due to a failed assumption.,"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0
"Verify that your code throws an exception whose message contains
a specific text.","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"@return If this describes a method invocation,
the name of the method (or null if not)","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.
",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",0
Returns a new fresh file with a random name under the temporary folder.,"Asserts that two objects refer to the same object. If they are not
an AssertionFailedError is thrown with the given message.",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
Invoked when a test is skipped due to a failed assumption.,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Asserts that two objects are equal. If they are not, an
AssertionError is thrown with the given message. If
expected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual actual value",0
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"Returns a new builder for building an instance.

@since 4.12","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0
"Returns the annotation of type annotationType on this method, if
one exists.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Verify that your code throws an exception that is an
instance of specific type.","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12",0
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
Counts the number of test cases that will be run by this test.,"Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner",0
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Provides implementations of org.junit.runner.Runner

@since 4.0",0
"This is useful for fluently combining matchers where either may pass, for example:

assertThat(string, either(containsString(""a"")).or(containsString(""b"")));

@deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError without a message is
thrown.

@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0
"Asserts that two floats are equal concerning a positive delta. If they
are not an AssertionFailedError is thrown with the given message. If the
expected value is infinity then the delta value is ignored.","If called with an expression evaluating to false, the test will halt and be ignored.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",0
"Returns true if this member is static, false if not.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",Counts the number of test cases that will be run by this test.,0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.","Adds to errors if the test class has more than one constructor
(do not override)",0
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0
Invoked when a test is skipped due to a failed assumption.,"THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0",0
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0
"Asserts that two objects refer to the same object. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected the expected object
@param actual the object to compare to expected","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Tears down the fixture, for example, close a network connection.
This method is called after a test is executed.","An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume
@since 4.12",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
Returns a new fresh file with a random name under the temporary folder.,"Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param computer Helps construct Runners from classes
@param classes  Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two floats are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that actual satisfies the condition specified by
matcher. If not, an AssertionError is thrown with
information about the matcher and failing value. Example:

assertThat(0, is(1)); // fails:
// failure message:
// expected: is &lt;1&gt;
// got value: &lt;0&gt;
assertThat(0, is(not(1))) // passes

org.hamcrest.Matcher does not currently document the meaning
of its type parameter T.  This method assumes that a matcher
typed as Matcher&lt;T&gt; can be meaningfully applied only
to values that could be assigned to a variable of type T.

@param <T> the static type accepted by the matcher (this can flag obvious
compile-time problems such as assertThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed
values
@see org.hamcrest.CoreMatchers
@see org.hamcrest.MatcherAssert
@deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",0
"Create a Request that, when processed, will run all the tests
in a set of classes.

@param computer Helps construct Runners from classes
@param classes the classes containing the tests
@return a Request that will cause all tests in the classes to be run","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.",0
"Returns a new fresh folder with the given name(s) under the temporary
folder.","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",0
"Returns true if this member is static, false if not.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",0
"Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"Asserts that two doubles are equal concerning a delta.  If they are not
an AssertionFailedError is thrown with the given message.  If the expected
value is infinity then the delta value is ignored.","@deprecated Use
assertEquals(double expected, double actual, double delta)
instead",0
"@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.","If called with an expression evaluating to false, the test will halt and be ignored.",0
"Matches if the result has one or more failures, and at least one of them
contains string
","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.",0
Returns a new fresh file with the given name under the temporary folder.,"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns a new builder for building an instance.

@since 4.12",0
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds short array with expected values.
@param actuals short array with actual values",0
Invoked when a test is skipped due to a failed assumption.,"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0
"Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.","Run the tests contained in classes. Write feedback while the tests
are running and write stack traces for all failed tests after all tests complete. This is
similar to #main(String[]), but intended to be used programmatically.

@param classes Classes in which to find tests
@return a Result describing the details of the test run and the failed tests.",0
"This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values",0
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two doubles are equal concerning a delta. If the expected
value is infinity then the delta value is ignored.",0
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Called by this class and subclasses once the classes making up the suite have been determined

@param builder builds runners for classes in the suite
@param klass the root of the suite
@param suiteClasses the classes in the suite",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.",0
"An exception class used to implement assumptions (state in which a given test
is meaningful and should or should not be executed). A test for which an assumption
fails should not generate a test case failure.

@see org.junit.Assume","Sets the name of the suite.

@param name the name to set",0
"Construct a new InitializationError with one cause
with message string","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",0
"Returns a Statement: run all non-overridden @AfterClass methods on this class
and superclasses before executing statement; all AfterClass methods are
always executed: exceptions thrown by previous steps are combined, if
necessary, with exceptions from AfterClass methods into a
org.junit.runners.model.MultipleFailureException.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0
"Runner for use with JUnit 3.8.x-style AllTests classes
(those that only implement a static suite()
method). For example:

@RunWith(AllTests.class)
public class ProductTests {
public static junit.framework.Test suite() {
...
}
}","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"@return If this describes a method invocation,
the class of the test instance.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(""alwaysPasses"", 1, is(1)); // passes
foo(); // will execute
assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0
"Verify that your code throws an exception whose message contains
a specific text.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",0
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","Sets up the fixture, for example, open a network connection.
This method is called before a test is executed.",0
Invoked when a test is skipped due to a failed assumption.,"Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",Counts the number of test cases that will be run by this test.,0
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
Invoked when a test is skipped due to a failed assumption.,"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds int array with expected values.
@param actuals int array with actual values",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Sets the name of a TestCase

@param name the name to set",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Modifies the method-running Statement to implement an additional
test-running rule.

@param base The Statement to be modified
@param method The method to be run
@param target The object on which the method will be run.
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",0
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",0
Returns a new fresh folder with a random name under the temporary folder.,"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
Invoked when a test is skipped due to a failed assumption.,"@param target the test case instance
@return a list of TestRules that should be applied when executing this
test",0
"Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0","Asserts that two objects are not equals. If they are, an
AssertionError without a message is thrown. If
unexpected and actual are null,
they are considered equal.

@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",Counts the number of test cases that will be run by this test.,0
Invoked when a test is skipped due to a failed assumption.,"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"This is useful for fluently combining matchers that must both pass.  For example:

assertThat(string, both(containsString(""a"")).and(containsString(""b"")));

@deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that runnable throws an exception of type expectedThrowable when
executed. If it does, the exception object is returned. If it does not throw an exception, an
AssertionError is thrown. If it throws the wrong type of exception, an {@code
AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
be obtained by calling AssertionError#getCause.

@param expectedThrowable the expected type of the exception
@param runnable       a function that is expected to throw an exception when executed
@return the exception thrown by runnable
@since 4.13",0
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that an object isn't null. If it is an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value","Run all the tests in classes.

@param classes the classes containing tests
@return a Result describing the details of the test run and the failed tests.",0
"Verify that your code throws an exception that is an
instance of specific type.","@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.",0
"Called by this class and subclasses once the runners making up the suite have been determined

@param klass root of the suite
@param runners for each class in the suite, a Runner","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown.",0
"Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Validates annotation on the given method.

@param method that is being validated
@return A list of exceptions. Default behavior is to return an empty list.

@since 4.12",0
"Provides implementations of org.junit.runner.Runner

@since 4.0","Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",0
"THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
"Returns the annotation of type annotationType on this method, if
one exists.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Provides classes used to describe, collect, run and analyze multiple tests.

@since 4.0","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0
"Asserts that two longs are not equals. If they are, an
AssertionError without a message is thrown.

@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that an object isn't null. If it is
an AssertionFailedError is thrown with the given message.",0
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","If called with an expression evaluating to false, the test will halt and be ignored.

@param b If false, the method will attempt to stop the test and ignore it by
throwing AssumptionViolatedException.
@param message A message to pass to AssumptionViolatedException.",0
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
Invoked when a test is skipped due to a failed assumption.,"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.","Call to assume that actual satisfies the condition specified by matcher.
If not, the test halts and is ignored.
Example:
:
assumeThat(1, is(1)); // passes
foo(); // will execute
assumeThat(0, is(1)); // assumption failure! test halts
int x = 1 / 0; // will never execute

@param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
@param actual the computed value being compared
@param matcher an expression, built of Matchers, specifying allowed values
@see org.hamcrest.CoreMatchers
@see org.junit.matchers.JUnitMatchers
@deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",0
"Matches if the result has exactly one failure, and it contains string","Asserts that two objects refer to the same object. If they are not
the same an AssertionFailedError is thrown.",0
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two object arrays are equal. If they are not, an
AssertionError is thrown with the given message. If
expecteds and actuals are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds Object array or array of arrays (multi-dimensional array) with
expected values.
@param actuals Object array or array of arrays (multi-dimensional array) with
actual values
@deprecated use assertArrayEquals",0
"Create a Request that, when processed, will run all the tests
in a class. The odd name is necessary because class is a reserved word.

@param clazz the class containing the tests
@return a Request that will cause all tests in the class to be run","Run all the tests contained in request.

@param request the request describing tests
@return a Result describing the details of the test run and the failed tests.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",0
