"A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  NOPLogger    (NOPLogger.java),# Interface  Marker    (Marker.java),1
"A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  NOPLogger    (NOPLogger.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Class  NOPLogger    (NOPLogger.java),# Interface  Logger    (Logger.java),1
"A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  SubstituteLogger    (SubstituteLogger.java),# Interface  Marker    (Marker.java),1
"A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  BasicMarker    (BasicMarker.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  BasicMarker    (BasicMarker.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public void add(Marker reference)    (Marker.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public void add(Marker reference)    (Marker.java),# Method  public boolean hasReferences()    (Marker.java),1
"Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public void add(Marker reference)    (Marker.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  BasicMarkerFactory    (BasicMarkerFactory.java),# Class  NOPLogger    (NOPLogger.java),1
"An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  BasicMarkerFactory    (BasicMarkerFactory.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  BasicMarkerFactory    (BasicMarkerFactory.java),# Interface  Marker    (Marker.java),1
"An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  BasicMarkerFactory    (BasicMarkerFactory.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Class  BasicMarkerFactory    (BasicMarkerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Class  Util    (Util.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Class  MessageFormatter    (MessageFormatter.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14",-1,# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),1
"An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),# Class  Util    (Util.java),1
"An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Class  Util    (Util.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Class  Util    (Util.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  Util    (Util.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Class  Util    (Util.java),# Class  MarkerFactory    (MarkerFactory.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),# Class  MDC    (MDC.java),1
"An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Interface  LocationAwareLogger    (LocationAwareLogger.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  public boolean isTraceEnabled()    (Logger.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,Field ROOT_LOGGER_NAME    (Logger.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  boolean detachMarker(String name)    (IMarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean hasReferences()    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  static void reset()    (LoggerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Get the name of this Marker.

@return name of marker",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isTraceEnabled()    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Log a message at the DEBUG level.

@param msg the message string to be logged",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public void debug(String msg)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Log a message at the ERROR level.

@param msg the message string to be logged",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public void error(String msg)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Log a message at the INFO level.

@param msg the message string to be logged",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public void info(String msg)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Log a message at the WARN level.

@param msg the message string to be logged",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public void warn(String msg)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public static Marker getMarker(String name)    (MarkerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.","The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;",-1,# Method  boolean exists(String name)    (IMarkerFactory.java),# Class  LoggerFactory    (LoggerFactory.java),1
Clear all entries in the MDC of the underlying implementation.,"An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static void clear()    (MDC.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
Clear all entries in the MDC of the underlying implementation.,"NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static void clear()    (MDC.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
Clear all entries in the MDC of the underlying implementation.,"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public static void clear()    (MDC.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),# Method  public boolean isTraceEnabled()    (Logger.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public int hashCode()    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Currently this method always returns an instance of
StaticMDCBinder.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Currently, this method returns the class name of
BasicMarkerFactory.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean contains(String name)    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  static void reset()    (LoggerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Get the name of this Marker.

@return name of marker",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public String getName()    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  ClassContextSecurityManager    (Util.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isTraceEnabled()    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static Marker getMarker(String name)    (MarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return the name of this Logger instance.
@return name of this logger instance",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public String getName()    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Interface  Logger    (Logger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Method  protected NOPLogger()    (NOPLogger.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Class  MDC    (MDC.java),1
"Currently this method always returns an instance of
BasicMarkerFactory.","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (StaticMarkerBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public int hashCode()    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean contains(String name)    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  static void reset()    (LoggerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Get the name of this Marker.

@return name of marker",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public String getName()    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  ClassContextSecurityManager    (Util.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isTraceEnabled()    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static Marker getMarker(String name)    (MarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Currently this method always returns an instance of
StaticMDCBinder.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Currently this method always returns an instance of
StaticMDCBinder.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Return the name of this Logger instance.
@return name of this logger instance",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public String getName()    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Interface  Logger    (Logger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Method  protected NOPLogger()    (NOPLogger.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Class  MDC    (MDC.java),1
"Currently this method always returns an instance of
StaticMDCBinder.","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public int hashCode()    (Marker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Create a marker which is detached (even at birth) from this IMarkerFactory.

@param name marker name
@return a dangling marker
@since 1.5.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  Marker getDetachedMarker(String name)    (IMarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Currently this method always returns an instance of
StaticMDCBinder.",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public MDCAdapter getMDCA()    (StaticMDCBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public boolean contains(String name)    (Marker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  static void reset()    (LoggerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  MessageFormatter    (MessageFormatter.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Get the name of this Marker.

@return name of marker",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public String getName()    (Marker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Interface  IMarkerFactory    (IMarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Interface  Marker    (Marker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static Marker getMarker(String name)    (MarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return the name of this Logger instance.
@return name of this logger instance",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public String getName()    (Logger.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  StaticMarkerBinder    (StaticMarkerBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Interface  Logger    (Logger.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  MDC    (MDC.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"Currently, this method returns the class name of
BasicMarkerFactory.","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  public boolean hasReferences()    (Marker.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  boolean detachMarker(String name)    (IMarkerFactory.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean contains(Marker other)    (Marker.java),# Method  public boolean contains(String name)    (Marker.java),1
"Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean contains(Marker other)    (Marker.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Does this marker have any references?

@return true if this marker has one or more references, false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean hasReferences()    (Marker.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Get the name of this Marker.

@return name of marker",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public String getName()    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  static void reset()    (LoggerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;",-1,# Method  static void reset()    (LoggerFactory.java),# Class  LoggerFactory    (LoggerFactory.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  static void reset()    (LoggerFactory.java),# Interface  Logger    (Logger.java),1
"Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.","There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.",-1,# Method  static void reset()    (LoggerFactory.java),# Method  protected NOPLogger()    (NOPLogger.java),1
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  MessageFormatter    (MessageFormatter.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Class  MessageFormatter    (MessageFormatter.java),# Class  BasicMarker    (BasicMarker.java),1
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Class  MessageFormatter    (MessageFormatter.java),# Interface  Marker    (Marker.java),0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void put(String key, String val)    (MDCAdapter.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,# Class  MessageFormatter    (MessageFormatter.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,# Class  MessageFormatter    (MessageFormatter.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,# Class  MessageFormatter    (MessageFormatter.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,# Class  MessageFormatter    (MessageFormatter.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Class  MessageFormatter    (MessageFormatter.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Class  MessageFormatter    (MessageFormatter.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
Get the context identified by the key parameter.,"A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Class  NOPLogger    (NOPLogger.java),1
Get the context identified by the key parameter.,"Get the name of this Marker.

@return name of marker",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Method  public String getName()    (Marker.java),1
Get the context identified by the key parameter.,Remove the the context identified by the key parameter.,-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Method  public void remove(String key)    (BasicMDCAdapter.java),1
Get the context identified by the key parameter.,"Return a copy of the current thread's context map.
Returned value may be null.",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
Get the context identified by the key parameter.,"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
Get the context identified by the key parameter.,"Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
Get the context identified by the key parameter.,"Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
Get the context identified by the key parameter.,"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String get(String key)    (BasicMDCAdapter.java),# Interface  Logger    (Logger.java),1
"Get the context identified by the key parameter.
The key parameter cannot be null.

@return the string value identified by the key parameter.",Get the context identified by the key parameter.,-1,# Method  public String get(String key)    (MDCAdapter.java),# Method  public String get(String key)    (BasicMDCAdapter.java),1
"Get the context identified by the key parameter.
The key parameter cannot be null.

@return the string value identified by the key parameter.","Get the name of this Marker.

@return name of marker",-1,# Method  public String get(String key)    (MDCAdapter.java),# Method  public String getName()    (Marker.java),1
"Get the context identified by the key parameter.
The key parameter cannot be null.

@return the string value identified by the key parameter.",Remove the the context identified by the key parameter.,-1,# Method  public String get(String key)    (MDCAdapter.java),# Method  public void remove(String key)    (BasicMDCAdapter.java),1
"Get the context identified by the key parameter.
The key parameter cannot be null.

@return the string value identified by the key parameter.","Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,# Method  public String get(String key)    (MDCAdapter.java),# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
"Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),# Method  public void add(Marker reference)    (Marker.java),1
"Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null","Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),1
"Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null","Return a copy of the current thread's context map.
Returned value may be null.",-1,# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Get the name of this Marker.

@return name of marker","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public String getName()    (Marker.java),# Method  public int hashCode()    (Marker.java),1
"Get the name of this Marker.

@return name of marker","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public String getName()    (Marker.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Get the name of this Marker.

@return name of marker","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public String getName()    (Marker.java),# Method  public boolean contains(String name)    (Marker.java),1
"Get the name of this Marker.

@return name of marker","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public String getName()    (Marker.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  FormattingTuple    (FormattingTuple.java),# Class  NOPLogger    (NOPLogger.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  FormattingTuple    (FormattingTuple.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","Get the name of this Marker.

@return name of marker",-1,# Class  FormattingTuple    (FormattingTuple.java),# Method  public String getName()    (Marker.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Class  FormattingTuple    (FormattingTuple.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  FormattingTuple    (FormattingTuple.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Class  FormattingTuple    (FormattingTuple.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  FormattingTuple    (FormattingTuple.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Class  FormattingTuple    (FormattingTuple.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Class  FormattingTuple    (FormattingTuple.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Class  FormattingTuple    (FormattingTuple.java),# Interface  Logger    (Logger.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  FormattingTuple    (FormattingTuple.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  FormattingTuple    (FormattingTuple.java),# Class  MDC    (MDC.java),1
"Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Class  FormattingTuple    (FormattingTuple.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Get the name of this Marker.

@return name of marker",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Method  public String getName()    (Marker.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Class  MarkerFactory    (MarkerFactory.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),1
"ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  ILoggerFactory    (ILoggerFactory.java),# Interface  Logger    (Logger.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  NOPLogger    (NOPLogger.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  BasicMarker    (BasicMarker.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  Util    (Util.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Get the name of this Marker.

@return name of marker",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  FormattingTuple    (FormattingTuple.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Interface  Marker    (Marker.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Interface  Logger    (Logger.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  MDC    (MDC.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"Implementations of this interface are used to manufacture Marker
instances.

See the section <a href=""http://slf4j.org/faq.html#3"">Implementing
the SLF4J API in the FAQ for details on how to make your logging
system conform to SLF4J.

@author Ceki G&uuml;lc&uuml;","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Interface  IMarkerFactory    (IMarkerFactory.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  ClassContextSecurityManager    (Util.java),# Class  NOPLogger    (NOPLogger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Class  ClassContextSecurityManager    (Util.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public int hashCode()    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean contains(String name)    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  static void reset()    (LoggerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Get the name of this Marker.

@return name of marker",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public String getName()    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Class  ClassContextSecurityManager    (Util.java),# Class  FormattingTuple    (FormattingTuple.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isTraceEnabled()    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Class  ClassContextSecurityManager    (Util.java),# Class  MarkerFactory    (MarkerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean equals(Object o)    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  ClassContextSecurityManager    (Util.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Return the name of this Logger instance.
@return name of this logger instance",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public String getName()    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Class  ClassContextSecurityManager    (Util.java),# Interface  Logger    (Logger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  protected NOPLogger()    (NOPLogger.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  ClassContextSecurityManager    (Util.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  ClassContextSecurityManager    (Util.java),# Class  MDC    (MDC.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  ClassContextSecurityManager    (Util.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Class  ClassContextSecurityManager    (Util.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the DEBUG level.

@param msg the message string to be logged",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public void debug(String msg)    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the WARN level.

@param msg the message string to be logged",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public void warn(String msg)    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public boolean isDebugEnabled()    (Logger.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isDebugEnabled()    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isErrorEnabled()    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Log a message at the WARN level.

@param msg the message string to be logged",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public void warn(String msg)    (Logger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public boolean isInfoEnabled()    (Logger.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isInfoEnabled()    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isTraceEnabled()    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message at the WARN level.

@param msg the message string to be logged",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public void warn(String msg)    (Logger.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isWarnEnabled()    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Method  public boolean hasReferences()    (Marker.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.","The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;",-1,Field API_COMPATIBILITY_LIST    (LoggerFactory.java),# Class  LoggerFactory    (LoggerFactory.java),1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1",-1,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Log a message at the DEBUG level.

@param msg the message string to be logged","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void debug(String msg)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void error(String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void error(String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the ERROR level.

@param msg the message string to be logged","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public void error(String msg)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Log a message at the ERROR level.

@param msg the message string to be logged","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public void error(String msg)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Log a message at the ERROR level.

@param msg the message string to be logged","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public void error(String msg)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Log a message at the ERROR level.

@param msg the message string to be logged","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void error(String msg)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void info(String format, Object arg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public void info(String format, Object... arguments)    (Logger.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void info(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the INFO level.

@param msg the message string to be logged","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Log a message at the INFO level.

@param msg the message string to be logged","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void info(String msg)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",-1,# Method  public void trace(String msg)    (Logger.java),"# Method  public void trace(Marker marker, String msg)    (Logger.java)",1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Log a message at the TRACE level.

@param msg the message string to be logged
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void trace(String msg)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void warn(String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void warn(String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public void warn(String format, Object... arguments)    (Logger.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void warn(String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log a message at the WARN level.

@param msg the message string to be logged","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public void warn(String msg)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Log a message at the WARN level.

@param msg the message string to be logged","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void warn(String msg)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Log a message at the WARN level.

@param msg the message string to be logged","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public void warn(String msg)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Log a message at the WARN level.

@param msg the message string to be logged","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public void warn(String msg)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Log a message at the WARN level.

@param msg the message string to be logged","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public void warn(String msg)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Log a message at the WARN level.

@param msg the message string to be logged","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public void warn(String msg)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",1,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void debug(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void error(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public int hashCode()    (Marker.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isDebugEnabled()    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isErrorEnabled()    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isInfoEnabled()    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isWarnEnabled()    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean equals(Object o)    (Marker.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void trace(Marker marker, String msg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void debug(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void error(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void error(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void error(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void error(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void info(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the TRACE level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void trace(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",-1,"# Method  public void warn(String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  static void reset()    (LoggerFactory.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Get the name of this Marker.

@return name of marker",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  boolean exists(String name)    (IMarkerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Detach an existing marker.

Note that after a marker is detached, there might still be ""dangling"" references
to the detached marker.

@param name The name of the marker to detach
@return whether the marker  could be detached or not",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  boolean detachMarker(String name)    (IMarkerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Get the name of this Marker.

@return name of marker",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  public void remove(String key)    (MDCAdapter.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Manufacture a Marker instance by name. If the instance has been
created earlier, return the previously created instance.

Null name values are not allowed.

@param name the name of the marker to be created, null value is
not allowed.

@return a Marker instance","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  Marker getMarker(String name)    (IMarkerFactory.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  MarkerFactory    (MarkerFactory.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Get the name of this Marker.

@return name of marker",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  public String getName()    (Marker.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  MarkerFactory    (MarkerFactory.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Class  MarkerFactory    (MarkerFactory.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;",-1,# Class  MarkerFactory    (MarkerFactory.java),# Class  LoggerFactory    (LoggerFactory.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Class  MarkerFactory    (MarkerFactory.java),# Interface  Logger    (Logger.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  MarkerFactory    (MarkerFactory.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  MarkerFactory    (MarkerFactory.java),# Class  MDC    (MDC.java),1
"NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  NOPLoggerFactory    (NOPLoggerFactory.java),# Interface  Marker    (Marker.java),1
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Class  MessageFormatter    (MessageFormatter.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Interface  Marker    (Marker.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void put(String key, String val)    (MDCAdapter.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Class  MessageFormatter    (MessageFormatter.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Interface  Marker    (Marker.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message",1,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void put(String key, String val)    (MDCAdapter.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Checks if the marker with the name already exists. If name is null, then false
is returned.

@param name logger name to check for
@return true id the marker exists, false otherwise.",-1,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  boolean exists(String name)    (IMarkerFactory.java),1
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean contains(Marker other)    (Marker.java),1
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Class  MessageFormatter    (MessageFormatter.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Interface  Marker    (Marker.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void put(String key, String val)    (MDCAdapter.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean remove(Marker reference)    (Marker.java),1
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public Logger getLogger(String name)    (ILoggerFactory.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Printing method with support for location information.

@param marker The marker to be used for this event, may be null.
@param fqcn The fully qualified class name of the logger instance,
typically the logger class, logger bridge or a logger wrapper.
@param level One of the level integers defined in this interface
@param message The message for the log event
@param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)    (LocationAwareLogger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public boolean hasReferences()    (Marker.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Get the name of this Marker.

@return name of marker",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public String getName()    (Marker.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",# Method  public void add(Marker reference)    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",# Interface  Marker    (Marker.java),0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Return a copy of the current thread's context map.
Returned value may be null.",-1,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  NOPLogger    (NOPLogger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  SubstituteLogger    (SubstituteLogger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  BasicMarker    (BasicMarker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public void add(Marker reference)    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  Util    (Util.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",Field ROOT_LOGGER_NAME    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",Clear all entries in the MDC of the underlying implementation.,-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static void clear()    (MDC.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public int hashCode()    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean contains(Marker other)    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean contains(String name)    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  static void reset()    (LoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",Get the context identified by the key parameter.,-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public String get(String key)    (BasicMDCAdapter.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Get the context identified by the key parameter.
The key parameter cannot be null.

@return the string value identified by the key parameter.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public String get(String key)    (MDCAdapter.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Get the name of this Marker.

@return name of marker",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public String getName()    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  FormattingTuple    (FormattingTuple.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  ClassContextSecurityManager    (Util.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isDebugEnabled()    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isErrorEnabled()    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isInfoEnabled()    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isWarnEnabled()    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  MarkerFactory    (MarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean equals(Object o)    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Interface  Marker    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",1,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean remove(Marker reference)    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",Remove the the context identified by the key parameter.,-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public void remove(String key)    (BasicMDCAdapter.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public void remove(String key)    (MDCAdapter.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static Marker getMarker(String name)    (MarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return a copy of the current thread's context map.
Returned value may be null.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  Logger delegate()    (SubstituteLogger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Return the name of this Logger instance.
@return name of this logger instance",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public String getName()    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public static Class<?> getCallingClass()    (Util.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Class  LoggerFactory    (LoggerFactory.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Interface  Logger    (Logger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  protected NOPLogger()    (NOPLogger.java),1
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public void put(String key, String val)    (MDCAdapter.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,"# Method  public void put(String key, String val)    (MDCAdapter.java)",# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public void add(Marker reference)    (Marker.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Interface  Marker    (Marker.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",1,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Return a copy of the current thread's context map.
Returned value may be null.",-1,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public void add(Marker reference)    (Marker.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Interface  Marker    (Marker.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Return a copy of the current thread's context map.
Returned value may be null.",-1,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Class  NOPLogger    (NOPLogger.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Method  static void reset()    (LoggerFactory.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","Get the name of this Marker.

@return name of marker",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Interface  Marker    (Marker.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Interface  Logger    (Logger.java),1
"Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean remove(Marker reference)    (Marker.java),# Method  public int hashCode()    (Marker.java),1
"Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean remove(Marker reference)    (Marker.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean remove(Marker reference)    (Marker.java),# Method  public boolean contains(String name)    (Marker.java),1
"Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean remove(Marker reference)    (Marker.java),# Method  public boolean hasReferences()    (Marker.java),1
"Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean remove(Marker reference)    (Marker.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public boolean remove(Marker reference)    (Marker.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),# Method  public void add(Marker reference)    (Marker.java),1
"Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null","Return a copy of the current thread's context map.
Returned value may be null.",-1,# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
Remove the the context identified by the key parameter.,"A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),# Class  NOPLogger    (NOPLogger.java),1
Remove the the context identified by the key parameter.,"Get the name of this Marker.

@return name of marker",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),# Method  public String getName()    (Marker.java),1
Remove the the context identified by the key parameter.,"Return a copy of the current thread's context map.
Returned value may be null.",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
Remove the the context identified by the key parameter.,"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
Remove the the context identified by the key parameter.,"Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
Remove the the context identified by the key parameter.,"Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
Remove the the context identified by the key parameter.,"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public void remove(String key)    (BasicMDCAdapter.java),# Interface  Logger    (Logger.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public void add(Marker reference)    (Marker.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public boolean hasReferences()    (Marker.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Get the name of this Marker.

@return name of marker",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public String getName()    (Marker.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public void remove(String key)    (MDCAdapter.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public void remove(String key)    (MDCAdapter.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public void remove(String key)    (MDCAdapter.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public void remove(String key)    (MDCAdapter.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Return a copy of the current thread's context map.
Returned value may be null.",-1,# Method  public void remove(String key)    (MDCAdapter.java),"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public void remove(String key)    (MDCAdapter.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Class  NOPLogger    (NOPLogger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public void add(Marker reference)    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Class  Util    (Util.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public int hashCode()    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean contains(String name)    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  static void reset()    (LoggerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException",Get the context identified by the key parameter.,-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public String get(String key)    (BasicMDCAdapter.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Get the context identified by the key parameter.
The key parameter cannot be null.

@return the string value identified by the key parameter.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public String get(String key)    (MDCAdapter.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Get the diagnostic context identified by the key parameter. The
key parameter cannot be null.

This method delegates all work to the MDC of the underlying logging system.

@param key
@return the string value identified by the key parameter.
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static String get(String key) throws IllegalArgumentException    (MDC.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Get the name of this Marker.

@return name of marker",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public String getName()    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","In order to call SecurityManager#getClassContext(), which is a
protected method, we add this wrapper which allows the method to be visible
inside this package.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Class  ClassContextSecurityManager    (Util.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public void put(String key, String val)    (MDCAdapter.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Remove the diagnostic context identified by the key parameter using
the underlying system's MDC implementation. The key parameter
cannot be null. This method does nothing if there is no previous value
associated with key.

@param key
@throws IllegalArgumentException
in case the ""key"" parameter is null",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static void remove(String key) throws IllegalArgumentException    (MDC.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException",Remove the the context identified by the key parameter.,-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public void remove(String key)    (BasicMDCAdapter.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Remove the the context identified by the key parameter.
The key parameter cannot be null.

This method does nothing if there is no previous value
associated with key.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public void remove(String key)    (MDCAdapter.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return a copy of the current thread's context map.
Returned value may be null.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Return the name of this Logger instance.
@return name of this logger instance",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public String getName()    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),# Interface  Logger    (Logger.java),1
"Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public static Marker getMarker(String name)    (MarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public static Marker getMarker(String name)    (MarkerFactory.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public static Marker getMarker(String name)    (MarkerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker","Get the name of this Marker.

@return name of marker",-1,# Method  public static Marker getMarker(String name)    (MarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Return a Marker instance as specified by the name parameter using the
previously bound IMarkerFactoryinstance.

@param name
The name of the Marker object to return.
@return marker","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static Marker getMarker(String name)    (MarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",Field ROOT_LOGGER_NAME    (Logger.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public int hashCode()    (Marker.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public boolean contains(Marker other)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  static void reset()    (LoggerFactory.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Get the name of this Marker.

@return name of marker",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public String getName()    (Marker.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Is the logger instance enabled for the TRACE level?

@return True if this Logger is enabled for the TRACE level,
false otherwise.
@since 1.4",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public boolean isTraceEnabled()    (Logger.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Class  MarkerFactory    (MarkerFactory.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public boolean equals(Object o)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public boolean remove(Marker reference)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)","# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public static Class<?> getCallingClass()    (Util.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public int hashCode()    (Marker.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public boolean contains(Marker other)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  static void reset()    (LoggerFactory.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Get the name of this Marker.

@return name of marker",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public String getName()    (Marker.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public boolean equals(Object o)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public boolean remove(Marker reference)    (Marker.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Return a copy of the current thread's context map.
Returned value may be null.","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",# Method  public void add(Marker reference)    (Marker.java),1
"Return a copy of the current thread's context map.
Returned value may be null.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,"# Method  public Map<String, String> getCopyOfContextMap()    (BasicMDCAdapter.java)",# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public static Logger getLogger(String name)    (LoggerFactory.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger","Get the name of this Marker.

@return name of marker",-1,# Method  public static Logger getLogger(String name)    (LoggerFactory.java),# Method  public String getName()    (Marker.java),1
"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static Logger getLogger(String name)    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public static Logger getLogger(String name)    (LoggerFactory.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public static Logger getLogger(String name)    (LoggerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public static Logger getLogger(String name)    (LoggerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch","Get the name of this Marker.

@return name of marker",-1,# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),# Method  public String getName()    (Marker.java),1
"Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Class  MessageFormatter    (MessageFormatter.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Get the name of this Marker.

@return name of marker",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public String getName()    (Marker.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Interface  Marker    (Marker.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Performs a two argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);

will return the string ""Hi Alice. My name is Bob."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg1
The argument to be substituted in place of the first formatting
anchor
@param arg2
The argument to be substituted in place of the second formatting
anchor
@return The formatted message",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)    (MessageFormatter.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Performs single argument substitution for the 'messagePattern' passed as
parameter.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);

will return the string ""Hi there."".

@param messagePattern
The message pattern which will be parsed and formatted
@param arg
The argument to be substituted in place of the formatting anchor
@return The formatted message",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public static final FormattingTuple format(String messagePattern, Object arg)    (MessageFormatter.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
The key parameter cannot be null. The code>val parameter
can be null only if the underlying implementation supports it.

If the current thread does not have a context map it is created as a side
effect of this call.",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void put(String key, String val)    (MDCAdapter.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Return the name of this Logger instance.
@return name of this logger instance",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public String getName()    (Logger.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Return an appropriate Logger instance as specified by the
name parameter.

If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
the string value ""ROOT"" (case insensitive), then the root logger of the
underlying logging system is returned.

Null-valued name arguments are considered invalid.

Certain extremely simple logging systems, e.g. NOP, may always
return the same logger instance regardless of the requested name.

@param name the name of the Logger to return
@return a Logger instance","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public Logger getLogger(String name)    (ILoggerFactory.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Class  NOPLogger    (NOPLogger.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","Get the name of this Marker.

@return name of marker",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Method  public String getName()    (Marker.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Interface  Marker    (Marker.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),# Interface  Logger    (Logger.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  NOPLogger    (NOPLogger.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  BasicMarker    (BasicMarker.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public int hashCode()    (Marker.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Get the name of this Marker.

@return name of marker",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public String getName()    (Marker.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Interface  Marker    (Marker.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Interface  Logger    (Logger.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Class  MDC    (MDC.java),1
"Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public int hashCode()    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  static void reset()    (LoggerFactory.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Get the name of this Marker.

@return name of marker",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public String getName()    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  Logger delegate()    (SubstituteLogger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  MessageFormatter    (MessageFormatter.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Interface  Marker    (Marker.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  StaticMarkerBinder    (StaticMarkerBinder.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  MDC    (MDC.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Interface  Marker    (Marker.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  MDC    (MDC.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.","Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate",-1,# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),1
"Return the name of this Logger instance.
@return name of this logger instance","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public String getName()    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Return the name of this Logger instance.
@return name of this logger instance","Get the name of this Marker.

@return name of marker",-1,# Method  public String getName()    (Logger.java),# Method  public String getName()    (Marker.java),1
"Return the name of this Logger instance.
@return name of this logger instance","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public String getName()    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Return the name of this Logger instance.
@return name of this logger instance","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public String getName()    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Return the name of this Logger instance.
@return name of this logger instance","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",-1,# Method  public String getName()    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  Util    (Util.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Currently, this method returns the class name of
BasicMarkerFactory.",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public boolean contains(String name)    (Marker.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  MessageFormatter    (MessageFormatter.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Get the name of this Marker.

@return name of marker",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public String getName()    (Marker.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","ILoggerFactory instances manufacture Logger
instances by name.

Most users retrieve Logger instances through the static
LoggerFactory#getLogger(String) method. An instance of of this
interface is bound internally with LoggerFactory class at
compile time.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Interface  ILoggerFactory    (ILoggerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Interface  Marker    (Marker.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Replace this instance with a homonymous (same name) logger returned
by LoggerFactory. Note that this method is only called during
deserialization.

This approach will work well if the desired ILoggerFactory is the one
references by LoggerFactory. However, if the user manages its logger hierarchy
through a different (non-static) mechanism, e.g. dependency injection, then
this approach would be mostly counterproductive.

@return logger with same name as returned by LoggerFactory
@throws ObjectStreamException",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  protected Object readResolve() throws ObjectStreamException    (NamedLoggerBase.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Returns the keys in the MDC as a Set of Strings The
returned value can be null.

@return the keys in the MDC",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public Set<String> getKeys()    (BasicMDCAdapter.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public static Class<?> getCallingClass()    (Util.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  StaticMarkerBinder    (StaticMarkerBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  StaticLoggerBinder    (StaticLoggerBinder.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Interface  Logger    (Logger.java),1
"Return the singleton of this class.

@return the StaticLoggerBinder singleton","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public static final StaticLoggerBinder getSingleton()    (StaticLoggerBinder.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14","Get the name of this Marker.

@return name of marker",-1,# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),# Method  public String getName()    (Marker.java),1
"Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14","Get the name of this Marker.

@return name of marker",-1,# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),# Method  public String getName()    (Marker.java),1
"Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public Iterator<Marker> iterator()    (Marker.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public Iterator<Marker> iterator()    (Marker.java),# Method  public boolean contains(String name)    (Marker.java),1
"Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public Iterator<Marker> iterator()    (Marker.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),# Class  MDC    (MDC.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Case insensitive String constant used to retrieve the name of the root logger.

@since 1.3",-1,# Method  public static Class<?> getCallingClass()    (Util.java),Field ROOT_LOGGER_NAME    (Logger.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  static void reset()    (LoggerFactory.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Get the name of this Marker.

@return name of marker",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  public String getName()    (Marker.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public static Class<?> getCallingClass()    (Util.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Returns the name of the class which called the invoking method.

@return the name of the class which called the invoking method.","Return the name of this Logger instance.
@return name of this logger instance",-1,# Method  public static Class<?> getCallingClass()    (Util.java),# Method  public String getName()    (Logger.java),1
"Serves as base class for named logger implementation. More significantly, this
class establishes deserialization behavior. See @see #readResolve.

@author Ceki Gulcu
@since 1.5.3","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  NamedLoggerBase    (NamedLoggerBase.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Set the current thread's context map by first clearing any existing
map and then copying the map passed as parameter. The context map
parameter must only contain keys and values of type String.

@param contextMap must contain only keys and values of type String

@since 1.5.1","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public void setContextMap(Map<String, String> contextMap)    (MDCAdapter.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Set the current thread's context map by first clearing any existing
map and then copying the map passed as parameter. The context map
parameter must only contain keys and values of type String.

@param contextMap must contain only keys and values of type String

@since 1.5.1","Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1",-1,"# Method  public void setContextMap(Map<String, String> contextMap)    (MDCAdapter.java)","# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",1
"Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message at the WARN level.

@param msg the message string to be logged",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public void warn(String msg)    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Interface  Marker    (Marker.java),0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Interface  Marker    (Marker.java),0
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Add a reference to another Marker.

@param reference
a reference to another marker
@throws IllegalArgumentException
if 'reference' is null",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public void add(Marker reference)    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Get the name of this Marker.

@return name of marker",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public String getName()    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the ERROR level.

@param msg the message string to be logged",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public void error(String msg)    (Logger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message at the WARN level.

@param msg the message string to be logged",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public void warn(String msg)    (Logger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Manufacture a BasicMarker instance by name. If the instance has been
created earlier, return the previously created instance.

@param name the name of the marker to be created
@return a Marker instance",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public Marker getMarker(String name)    (BasicMarkerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Interface  Marker    (Marker.java),0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Return a logger named corresponding to the class passed as parameter, using
the statically bound ILoggerFactory instance.

In case the the clazz parameter differs from the name of
the caller as computed internally by SLF4J, a logger name mismatch warning will be
printed but only if the slf4j.detectLoggerNameMismatch system property is
set to true. By default, this property is not set and no warnings will be printed
even in case of a logger name mismatch.

@param clazz the returned logger will be named after clazz
@return logger

@see <a href=""http://www.slf4j.org/codes.html#loggerNameMismatch"">Detected logger name mismatch",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public static Logger getLogger(Class<?> clazz)    (LoggerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Return the delegate logger instance if set. Otherwise, return a NOPLogger
instance.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  Logger delegate()    (SubstituteLogger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Class  LoggerFactory    (LoggerFactory.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.",-1,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),# Method  protected NOPLogger()    (NOPLogger.java),1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","As of SLF4J version 1.7.14, StaticMDCBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return MDCAdapter
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  private static MDCAdapter bwCompatibleGetMDCAdapterFromBinder() throws NoClassDefFoundError    (MDC.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","As of SLF4J version 1.7.14, StaticMarkerBinder classes shipping in various bindings
come with a getSingleton() method. Previously only a public field called SINGLETON
was available.

@return IMarkerFactory
@throws NoClassDefFoundError in case no binding is available
@since 1.7.14",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  private static IMarkerFactory bwCompatibleGetMarkerFactoryFromBinder() throws NoClassDefFoundError    (MarkerFactory.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Create a marker which is detached (even at birth) from the MarkerFactory.

@param name the name of the marker
@return a dangling marker
@since 1.5.1",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public static Marker getDetachedMarker(String name)    (MarkerFactory.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Is the logger instance enabled for the DEBUG level?

@return True if this Logger is enabled for the DEBUG level,
false otherwise.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isDebugEnabled()    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Is the logger instance enabled for the INFO level?

@return True if this Logger is enabled for the INFO level,
false otherwise.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isInfoEnabled()    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Is the logger instance enabled for the WARN level?

@return True if this Logger is enabled for the WARN level,
false otherwise.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled()    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Log a message with the specific Marker at the TRACE level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged
@since 1.4",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void trace(Marker marker, String msg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Interface  Marker    (Marker.java),0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isTraceEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean hasReferences()    (Marker.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Force LoggerFactory to consider itself uninitialized.

This method is intended to be called by classes (in the same package) for
testing purposes. This method is internal. It can be modified, renamed or
removed at any time without notice.

You are strongly discouraged from calling this method in production code.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  static void reset()    (LoggerFactory.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Is the logger instance enabled for the ERROR level?

@return True if this Logger is enabled for the ERROR level,
false otherwise.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled()    (Logger.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","It is LoggerFactory's responsibility to track version changes and manage
the compatibility list.

It is assumed that all versions in the 1.6 are mutually compatible.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),Field API_COMPATIBILITY_LIST    (LoggerFactory.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(String format, Object... arguments)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Interface  Marker    (Marker.java),0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Prints a warning message on the console if multiple bindings were found on the class path.
No reporting is done otherwise.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  private static void reportMultipleBindingAmbiguity(Set<URL> binderPathSet)    (LoggerFactory.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Return a logger named according to the name parameter using the statically
bound ILoggerFactory instance.

@param name The name of the logger.
@return logger",-1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public static Logger getLogger(String name)    (LoggerFactory.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",1,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),1
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",0
"Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",0,# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",0
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Class  BasicMarker    (BasicMarker.java),1
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Interface  Marker    (Marker.java),1
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Class  MDC    (MDC.java),1
"SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Class  LoggerFactory    (LoggerFactory.java),# Method  public int hashCode()    (Marker.java),1
"The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Class  LoggerFactory    (LoggerFactory.java),# Method  public boolean contains(String name)    (Marker.java),1
"The LoggerFactory is a utility class producing Loggers for
various logging APIs, most notably for log4j, logback and JDK 1.4 logging.
Other implementations such as org.slf4j.impl.NOPLogger NOPLogger and
org.slf4j.impl.SimpleLogger SimpleLogger are also supported.

LoggerFactory is essentially a wrapper around an
ILoggerFactory instance bound with LoggerFactory at
compile time.

Please note that all methods in LoggerFactory are static.

@author Alexander Dorokhine
@author Robert Elliot
@author Ceki G&uuml;lc&uuml;","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Class  LoggerFactory    (LoggerFactory.java),# Method  public boolean equals(Object o)    (Marker.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","Currently, this method returns the class name of
BasicMarkerFactory.",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Method  public String getMarkerFactoryClassStr()    (StaticMarkerBinder.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","Get the name of this Marker.

@return name of marker",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Method  public String getName()    (Marker.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"The String form of the ILoggerFactory object that this
LoggerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the ILoggerFactory instance it is able to
yield in practice. The discrepency should only occur in case of errors.

@return the class name of the intended ILoggerFactory instance","The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance",-1,# Method  public String getLoggerFactoryClassStr()    (LoggerFactoryBinder.java),# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","Get the name of this Marker.

@return name of marker",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Method  public String getName()    (Marker.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","Holds the results of formatting done by MessageFormatter.

@author Joern Huxhorn",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Class  FormattingTuple    (FormattingTuple.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"The String form of the IMarkerFactory object that this
MarkerFactoryBinder instance is intended to return.

This method allows the developer to intterogate this binder's intention
which may be different from the IMarkerFactory instance it is able to
return. Such a discrepency should only occur in case of errors.

@return the class name of the intended IMarkerFactory instance","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Method  public String getMarkerFactoryClassStr()    (MarkerFactoryBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  MessageFormatter    (MessageFormatter.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Interface  Marker    (Marker.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","NOPLoggerFactory is an trivial implementation of {@link
ILoggerFactory} which always returns the unique instance of
NOPLogger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  NOPLoggerFactory    (NOPLoggerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  MDC    (MDC.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  StaticMarkerBinder    (StaticMarkerBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.LoggerFactory
class bind with the appropriate ILoggerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Interface  LoggerFactoryBinder    (LoggerFactoryBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An internal interface which helps the static org.slf4j.MarkerFactory
class bind with the appropriate IMarkerFactory instance.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Interface  MarkerFactoryBinder    (MarkerFactoryBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  Util    (Util.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An optional interface helping integration with logging systems capable of
extracting location information. This interface is mainly used by SLF4J bridges
such as jcl-over-slf4j, jul-to-slf4j and log4j-over-slf4j or Logger wrappers
which need to provide hints so that the underlying logging system can extract
the correct location information (method name, line number).

@author Ceki Gulcu
@since 1.3",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Interface  LocationAwareLogger    (LocationAwareLogger.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  MessageFormatter    (MessageFormatter.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Interface  Marker    (Marker.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.

@return the instance of ILoggerFactory that
org.slf4j.LoggerFactory class should bind to.",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public ILoggerFactory getLoggerFactory()    (LoggerFactoryBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.

@return the instance of IMarkerFactory that
org.slf4j.MarkerFactory class should bind to.",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public IMarkerFactory getMarkerFactory()    (MarkerFactoryBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMDCBinder singleton
@since 1.7.14",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public static final StaticMDCBinder getSingleton()    (StaticMDCBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the singleton of this class.

@return the StaticMarkerBinder singleton
@since 1.7.14",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public static StaticMarkerBinder getSingleton()    (StaticMarkerBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","SubstituteLoggerFactory manages instances of SubstituteLogger.

@author Ceki G&uuml;lc&uuml;
@author Chetan Mehrotra",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  SubstituteLoggerFactory    (SubstituteLoggerFactory.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","The binding of MarkerFactory class with an actual instance of
IMarkerFactory is performed using information returned by this class.

This class is meant to provide a *dummy* StaticMarkerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-simple, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  StaticMarkerBinder    (StaticMarkerBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  MDC    (MDC.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Class  StaticMDCBinder    (StaticMDCBinder.java),1
"The binding of org.slf4j.LoggerFactory class with an actual instance of
ILoggerFactory is performed using information returned by this class.

This class is meant to provide a dummy StaticLoggerBinder to the slf4j-api module.
Real implementations are found in  each SLF4J binding project, e.g. slf4j-nop,
slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  StaticLoggerBinder    (StaticLoggerBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Interface  Logger    (Logger.java),# Method  public int hashCode()    (Marker.java),1
"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Interface  Logger    (Logger.java),# Method  public boolean contains(String name)    (Marker.java),1
"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;","Get the name of this Marker.

@return name of marker",-1,# Interface  Logger    (Logger.java),# Method  public String getName()    (Marker.java),1
"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Interface  Logger    (Logger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Interface  Logger    (Logger.java),# Interface  Marker    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public int hashCode()    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Does this marker contain a reference to the 'other' marker? Marker A is defined
to contain marker B, if A == B or if B is referenced by A, or if B is referenced
by any one of A's references (recursively).

@param other
The marker to test for inclusion.
@throws IllegalArgumentException
if 'other' is null
@return Whether this marker contains the other marker.",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public boolean contains(Marker other)    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public boolean contains(String name)    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Does this marker have any references?

@return true if this marker has one or more references, false otherwise.",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public boolean hasReferences()    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Get the name of this Marker.

@return name of marker",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public String getName()    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Markers are considered equal if they have the same name.

@param o
@return true, if this.name equals o.name

@since 1.5.1",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public boolean equals(Object o)    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Remove a marker reference.

@param reference
the marker reference to remove
@return true if reference could be found and removed, false otherwise.",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public boolean remove(Marker reference)    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","Returns an Iterator which can be used to iterate over the references of this
marker. An empty iterator is returned when this marker has no references.

@return Iterator over the references of this marker",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Method  public Iterator<Marker> iterator()    (Marker.java),1
"There is no point in creating multiple instances of NOPLOgger,
except by derived classes, hence the protected  access for the constructor.","The org.slf4j.Logger interface is the main user entry point of SLF4J API.
It is expected that logging takes place through concrete implementations
of this interface.

Typical usage pattern:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wombat {

<span style=""color:green"">final static Logger logger = LoggerFactory.getLogger(Wombat.class);
Integer t;
Integer oldT;

public void setTemperature(Integer temperature) {
oldT = t;
t = temperature;
<span style=""color:green"">logger.debug(""Temperature set to {}. Old temperature was {}."", t, oldT);
if(temperature.intValue() > 50) {
<span style=""color:green"">logger.info(""Temperature has risen above 50 degrees."");
}
}
}

Be sure to read the FAQ entry relating to <a href=""../../../faq.html#logging_performance"">parameterized
logging. Note that logging statements can be parameterized in
<a href=""../../../faq.html#paramException"">presence of an exception/throwable.

Once you are comfortable using loggers, i.e. instances of this interface, consider using
<a href=""MDC.html"">MDC as well as <a href=""Marker.html"">Markers.

@author Ceki G&uuml;lc&uuml;",-1,# Method  protected NOPLogger()    (NOPLogger.java),# Interface  Logger    (Logger.java),1
"This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  NOPMDCAdapter    (NOPMDCAdapter.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Class  NOPMDCAdapter    (NOPMDCAdapter.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  NOPMDCAdapter    (NOPMDCAdapter.java),# Class  MDC    (MDC.java),1
"This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  MDC    (MDC.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A direct NOP (no operation) implementation of Logger.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  NOPLogger    (NOPLogger.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A logger implementation which logs via a delegate logger. By default, the delegate is a
NOPLogger. However, a different delegate can be set at any time.

See also the <a href=""http://www.slf4j.org/codes.html#substituteLogger"">relevant
error code documentation.

@author Chetan Mehrotra
@author Ceki Gulcu",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  SubstituteLogger    (SubstituteLogger.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","A simple implementation of the Marker interface.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  BasicMarker    (BasicMarker.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An almost trivial implementation of the IMarkerFactory
interface which creates BasicMarker instances.

Simple logging systems can conform to the SLF4J API by binding
org.slf4j.MarkerFactory with an instance of this class.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  BasicMarkerFactory    (BasicMarkerFactory.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","An internal utility class.

@author Alexander Dorokhine
@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  Util    (Util.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","MarkerFactory is a utility class producing Marker instances as
appropriate for the logging system currently in use.

This class is essentially implemented as a wrapper around an
IMarkerFactory instance bound at compile time.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  MarkerFactory    (MarkerFactory.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Interface  Marker    (Marker.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Regular users should not create
BasicMarkerFactory instances. Marker
instances can be obtained using the static {@link
org.slf4j.MarkerFactory#getMarker} method.",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Method  public BasicMarkerFactory()    (BasicMarkerFactory.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and
values of type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),"# Method  public Map<String, String> getCopyOfContextMap()    (MDCAdapter.java)",1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return a copy of the current thread's context map, with keys and values of
type String. Returned value may be null.

@return A copy of the current thread's context map. May be null.
@since 1.5.1",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),"# Method  public static Map<String, String> getCopyOfContextMap()    (MDC.java)",1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Return the IMarkerFactoryinstance in use.

The IMarkerFactory instance is usually bound with this class at
compile time.

@return the IMarkerFactory instance in use",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Method  public static IMarkerFactory getIMarkerFactory()    (MarkerFactory.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Class  MDC    (MDC.java),1
"This class is only a stub. Real implementations are found in
each SLF4J binding project, e.g. slf4j-nop, slf4j-log4j12 etc.

@author Ceki G&uuml;lc&uuml;","This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Class  StaticMDCBinder    (StaticMDCBinder.java),# Interface  MDCAdapter    (MDCAdapter.java),1
"This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Interface  MDCAdapter    (MDCAdapter.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1","Returns the MDCAdapter instance currently in use.

@return the MDcAdapter instance currently in use.
@since 1.4.2",-1,# Interface  MDCAdapter    (MDCAdapter.java),# Method  public static MDCAdapter getMDCAdapter()    (MDC.java),1
"This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1","This adapter is an empty implementation of the MDCAdapter interface.
It is used for all logging systems which do not support mapped
diagnostic contexts such as JDK14, simple and NOP.

@author Ceki G&uuml;lc&uuml;

@since 1.4.1",-1,# Interface  MDCAdapter    (MDCAdapter.java),# Class  NOPMDCAdapter    (NOPMDCAdapter.java),1
"This interface abstracts the service offered by various MDC
implementations.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1","This class hides and serves as a substitute for the underlying logging
system's MDC implementation.

If the underlying logging system offers MDC functionality, then SLF4J's MDC,
i.e. this class, will delegate to the underlying system's MDC. Note that at
this time, only two logging systems, namely log4j and logback, offer MDC
functionality. For java.util.logging which does not support MDC,
BasicMDCAdapter will be used. For other systems, i.e slf4j-simple
and slf4j-nop, NOPMDCAdapter will be used.

Thus, as a SLF4J user, you can take advantage of MDC in the presence of log4j,
logback, or java.util.logging, but without forcing these systems as
dependencies upon your users.

For more information on MDC please see the <a
href=""http://logback.qos.ch/manual/mdc.html"">chapter on MDC in the
logback manual.

Please note that all methods in this class are static.

@author Ceki G&uuml;lc&uuml;
@since 1.4.1",-1,# Interface  MDCAdapter    (MDCAdapter.java),# Class  MDC    (MDC.java),1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1",-1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1",-1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Set the current thread's context map by first clearing any existing map and
then copying the map passed as parameter. The context map passed as
parameter must only contain keys and values of type String.

@param contextMap
must contain only keys and values of type String
@since 1.5.1",-1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public static void setContextMap(Map<String, String> contextMap)    (MDC.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String format, Object... argArray)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg    the argument",-1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg    the argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the WARN level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message with the specific Marker at the DEBUG level.

@param marker the marker data specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the DEBUG level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the INFO level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Log an exception (throwable) at the WARN level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Put a context value (the val parameter) as identified with
the key parameter into the current thread's context map.
Note that contrary to log4j, the val parameter can be null.

If the current thread does not have a context map it is created as a side
effect of this call.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void put(String key, String val)    (BasicMDCAdapter.java)",0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

@param key non-null key
@param val value to put in the map

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public static void put(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Put a diagnostic context value (the val parameter) as identified with the
key parameter into the current thread's diagnostic context map. The
key parameter cannot be null. The val parameter
can be null only if the underlying implementation supports it.

This method delegates all work to the MDC of the underlying logging system.

This method return a Closeable object who can remove key when
close is called.

Useful with Java 7 for example :

try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
....
}

@param key non-null key
@param val value to put in the map
@return a Closeable who can remove key when close
is called.

@throws IllegalArgumentException
in case the ""key"" parameter is null",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException    (MDC.java)",0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Similar to #isDebugEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the DEBUG level,
false otherwise.",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isDebugEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isInfoEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",0,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isWarnEnabled(Marker marker)    (Logger.java),0
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void debug(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void info(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #trace(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void trace(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String format, Object... arguments)    (Logger.java)","# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.

@param marker The marker specific to this log statement
@param msg    the message string to be logged",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg)    (Logger.java)",0
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Log an exception (throwable) at the ERROR level with an
accompanying message.

@param msg the message accompanying the exception
@param t   the exception (throwable) to log",-1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(String msg, Throwable t)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Markers are named objects used to enrich log statements. Conforming logging
system Implementations of SLF4J determine how information conveyed by markers
are used, if at all. In particular, many conforming logging systems ignore
marker data.

Markers can contain references to other markers, which in turn may contain
references of their own.

@author Ceki G&uuml;lc&uuml;",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",# Interface  Marker    (Marker.java),0
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
marker data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the ERROR level,
false otherwise.",0,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)",# Method  public boolean isErrorEnabled(Marker marker)    (Logger.java),0
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object arg1, Object arg2)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker    the marker data specific to this log statement
@param format    the format string
@param arguments a list of 3 or more arguments",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String format, Object... arguments)    (Logger.java)",1
"This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log","This method is similar to #error(String, Throwable)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1,"# Method  public void warn(Marker marker, String msg, Throwable t)    (Logger.java)","# Method  public void error(Marker marker, String msg, Throwable t)    (Logger.java)",1
"Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate","Basic MDC implementation, which can be used with logging systems that lack
out-of-the-box MDC support.

This code was initially inspired by  logback's LogbackMDCAdapter. However,
LogbackMDCAdapter has evolved and is now considerably more sophisticated.

@author Ceki Gulcu
@author Maarten Bosteels
@author Lukasz Cwik

@since 1.5.0",-1,# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),# Class  BasicMDCAdapter    (BasicMDCAdapter.java),1
"Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate","Compute the hash code based on the name of this marker.
Note that markers are considered equal if they have the same name.

@return the computed hashCode
@since 1.5.1",-1,# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),# Method  public int hashCode()    (Marker.java),1
"Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate","Does this marker contain the marker named 'name'?

If 'name' is null the returned value is always false.

@param name The marker name to test for inclusion.
@return Whether this marker contains the other marker.",-1,# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),# Method  public boolean contains(String name)    (Marker.java),1
"Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate","Get the name of this Marker.

@return name of marker",-1,# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),# Method  public String getName()    (Marker.java),1
"Typically called after the org.slf4j.LoggerFactory initialization phase is completed.
@param delegate","Return the ILoggerFactory instance in use.

ILoggerFactory instance is bound with this class at compile time.

@return the ILoggerFactory instance in use",-1,# Method  public void setDelegate(Logger delegate)    (SubstituteLogger.java),# Method  public static ILoggerFactory getILoggerFactory()    (LoggerFactory.java),1
