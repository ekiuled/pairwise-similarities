"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",1
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",1
"Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored. NaNs are considered
equal: assertEquals(Float.NaN, Float.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",1
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a String.

@return get this element as a String.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown. If the expected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertEquals(Double.NaN, Double.NaN, *) passes

@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"convenience method to get this element as a String.

@return get this element as a String.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"Creates mock with a specified strategy for its answers to interactions.
It's quite an advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

See examples in javadoc for Mockito class

@param classToMock class or interface to mock
@param defaultAnswer default answer for unstubbed methods

@return mock object","Specifies default answers to interactions.
It's quite advanced feature and typically you don't need it to write decent tests.
However it can be helpful when working with legacy systems.

It is the default answer so it will be used only when you don't stub the method call.

<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));

//Below does exactly the same:
Foo mockTwo = mock(Foo.class, new YourOwnAnswer());

@param defaultAnswer default answer to be used by mock when not stubbed
@return settings instance so that you can fluently specify other settings",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"This method is similar to #debug(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null",1
"Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Construct a new InitializationError with one or more
errors errors as causes
","Construct a new InitializationError with one cause
with message string",1
"Optional Answer that can be used with
Mockito#mock(Class, Answer)

This implementation can be helpful when working with legacy code. Unstubbed
methods often return null. If your code uses the object returned by an
unstubbed call you get a NullPointerException. This implementation of
Answer returns SmartNulls instead of nulls.
SmartNull gives nicer exception message than NPE because it points out the
line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see
ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
return type is not mockable (e.g. final) then ordinary null is returned.

ReturnsSmartNulls will be probably the default return values strategy in
Mockito 2.0","Optional Answer to be used with Mockito#mock(Class, Answer).

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
This implementation of Answer returns SmartNull instead of null.
SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.

ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
then it tries to return SmartNull. If the return type is final then plain null is returned.

ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

//calling unstubbed method here:
Stuff stuff = mock.getStuff();

//using object returned by unstubbed call:
stuff.doSomething();

//Above doesn't yield NullPointerException this time!
//Instead, SmartNullPointerException is thrown.
//Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the DEBUG level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for DEBUG. The variants taking
#debug(String, Object) one and #debug(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the ERROR level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for ERROR. The variants taking
#error(String, Object) one and #error(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1
"This method is similar to #info(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #info(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"This method is similar to #warn(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument","This method is similar to #warn(String, Throwable) method
except that the marker data is also taken into consideration.

@param marker the marker data for this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the WARN level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the WARN level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for WARN. The variants taking
#warn(String, Object) one and #warn(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #debug(String, Throwable) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param msg    the message accompanying the exception
@param t      the exception (throwable) to log",1
"This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4","This method is similar to #trace(String, Object...)
method except that the marker data is also taken into
consideration.

@param marker   the marker data specific to this log statement
@param format   the format string
@param argArray an array of arguments
@since 1.4",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two double arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds double array with expected values.
@param actuals double array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1
"Similar to #isTraceEnabled() method except that the
marker data is also taken into account.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the TRACE level,
false otherwise.

@since 1.4","Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise",1
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1
"This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two float arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds float array with expected values.
@param actuals float array with actual values
@param delta the maximum delta between expecteds[i] and
actuals[i] for which both numbers are still
considered equal.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",1
"Returns the annotation of type annotationType on this method, if
one exists.","@return the annotation of type annotationType that is attached to this description node,
or null if none exists
",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@return true if the two Objects have tested equals.
@since 2.0",1
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Returns the last parameter of an invocation.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@return Answer that will return the last argument of the invocation.

@since 1.9.5","Returns the parameter of an invocation at the given position.

This additional answer could be used at stub time using the
then|do|willorg.mockito.stubbing.Answer methods. For example :

<pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)

@param <T> Return type of the invocation.
@param position index of the argument from the list of arguments.
@return Answer that will return the argument from the given position in the argument's list

@since 1.9.5",1
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",1
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",1
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1
"Verify that your code throws an exception that is an
instance of specific type.","Verify that your code throws an exception whose message contains
a specific text.",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Matches if the result has exactly one failure, and it contains string","Matches if the result has one or more failures, and at least one of them
contains string
",1
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-most-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atMost(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param maxNumberOfInvocations max number of invocations

@return verification mode",1
"@return If this describes a method invocation,
the name of the class of the test instance","@return If this describes a method invocation,
the name of the method (or null if not)",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the testTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be included. Superclass fields will be appended
up to and including the specified superclass. A null superclass is treated
as java.lang.Object.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@param reflectUpToClass  the superclass to reflect up to (inclusive),
may be null
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.
@since 2.0
",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",1
"Asserts that two boolean arrays are equal. If they are not, an
AssertionError is thrown. If expected and
actual are null, they are considered
equal.

@param expecteds boolean array with expected values.
@param actuals boolean array with expected values.","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

Also you might better want to use the static factory there
org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)

@see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",1
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the method (or null if not)",1
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",1
"The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",1
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.","convenience method to get this element as a String.

@return get this element as a String.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1
"Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);
//is equivalent to:
when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Returns elements of the collection. Keeps returning the last element forever.
Might be useful on occasion when you have a collection of elements to return.

<pre class=""code""><code class=""java"">
//this:
when(mock.foo()).thenReturn(1, 2, 3);

//is equivalent to:
when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));

@param elements The collection of elements to return.
@return the answer

@since 1.9.5",1
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"Log a message at the TRACE level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the TRACE level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
#trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments
@since 1.4","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous string concatenation when the logger
is disabled for the INFO level. However, this variant incurs the hidden
(and relatively small) cost of creating an Object[] before invoking the method,
even if this logger is disabled for INFO. The variants taking
#info(String, Object) one and #info(String, Object, Object) two
arguments exist solely in order to avoid this hidden cost.

@param format    the format string
@param arguments a list of 3 or more arguments",1
"Log a message at the DEBUG level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the DEBUG level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",1
"Similar to #isInfoEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return true if this logger is warn enabled, false otherwise","Similar to #isWarnEnabled() method except that the marker
data is also taken into consideration.

@param marker The marker data to take into consideration
@return True if this Logger is enabled for the WARN level,
false otherwise.",1
"Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the TRACE level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the TRACE level.

@param format the format string
@param arg    the argument
@since 1.4",1
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param excludeFields  array of field names to exclude from testing
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",1
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.
(This remains for binary compatibility with clients of JUnit 4.3)

@param clazz the class of the test
@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name","Create a Description of a single test named name in the class clazz.
Generally, this will be a leaf Description.

@param name the name of the test (a method name for test annotated with org.junit.Test)
@return a Description named name",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
<pre class=""code""><code class=""java"">
doThrow(new RuntimeException(""one"")).
doThrow(new RuntimeException(""two""))
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Throwable[])

@param toBeThrown to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
<pre class=""code""><code class=""java"">
doThrow(RuntimeException.class).
doThrow(IllegalArgumentException.class)
.when(mock).someVoidMethod();

See javadoc for Mockito#doThrow(Class)

@param toBeThrown exception class to be thrown when the stubbed method is called
@return stubber - to select a method for stubbing

@since 2.0.0",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",1
"convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
","convenience method to get this element as a String.

@return get this element as a String.",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1
"@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1
"Log a message at the INFO level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg    the argument","Log a message at the ERROR level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1
"Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument","Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument",1
"Log a message at the ERROR level according to the specified format
and argument.

This form avoids superfluous object creation when the logger
is disabled for the ERROR level.

@param format the format string
@param arg    the argument","Log a message at the INFO level according to the specified format
and arguments.

This form avoids superfluous object creation when the logger
is disabled for the INFO level.

@param format the format string
@param arg1   the first argument
@param arg2   the second argument",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Asserts that an object is null. If it isn't an AssertionError is
thrown.
Message contains: Expected:  but was: object

@param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",1
"Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.",1
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"Optional Answer that adds partial mocking support

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Optional Answer to be used with Mockito#mock(Class, Answer)

Answer can be used to define the return values of unstubbed invocations.

This implementation can be helpful when working with legacy code.
When this implementation is used, unstubbed methods will delegate to the real implementation.
This is a way to create a partial mock object that calls real methods by default.

As usual you are going to read the partial mock warning:
Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
How does partial mock fit into this paradigm? Well, it just doesn't...
Partial mock usually means that the complexity has been moved to a different method on the same object.
In most cases, this is not the way you want to design your application.

However, there are rare cases when partial mocks come handy:
dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
However, I wouldn't use partial mocks for new, test-driven & well-designed code.

Example:
<pre class=""code""><code class=""java"">
Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

// this calls the real implementation of Foo.getSomething()
value = mock.getSomething();

when(mock.getSomething()).thenReturn(fakeValue);

// now fakeValue is returned
value = mock.getSomething();
",1
"This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

Transient members will be not be tested, as they are likely derived
fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
are equal.

It uses AccessibleObject.setAccessible to gain access to private
fields. This means that it will throw a security exception if run under
a security manager, if the permissions are not set up correctly. It is also
not as efficient as testing explicitly.

If the TestTransients parameter is set to true, transient
members will be tested, otherwise they are ignored, as they are likely
derived fields, and not part of the value of the Object.

Static fields will not be tested. Superclass fields will be included.

@param lhs  this object
@param rhs  the other object
@param testTransients  whether to include transient fields
@return true if the two Objects have tested equals.",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"Returns a new builder for building an instance.

@since 4.12","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",1
"Returns a new builder for building an instance of TemporaryFolder.

@since 4.13","Returns a new builder for building an instance.

@since 4.12",1
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1
"Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name","Create a Description named name.
Generally, you will add children to this Description.

@param name the name of the Description
@param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
@param annotations meta-data about the test, for downstream interpreters
@return a Description named name",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",1
"convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",1
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",1
"Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).","Create this verification mode, to be used to verify invocation ongoing data later.

@param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
@param delegate The verification mode to delegate overall success or failure to
@param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
org.mockito.verification.VerificationWithTimeout, or to only return once
the delegate is satisfied and the full duration has passed (as in
org.mockito.verification.VerificationAfterDelay).
@param timer Checker of whether the duration of the verification is still acceptable",1
"Test if two Objects are equal using their
equals method.

@param lhs  the left hand object
@param rhs  the right hand object
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",1
"Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
annotation, but:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1
Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"This method is similar to #trace(String, Object) method except that the
marker data is also taken into consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg    the argument
@since 1.4","This method is similar to #trace(String, Object, Object)
method except that the marker data is also taken into
consideration.

@param marker the marker data specific to this log statement
@param format the format string
@param arg1   the first argument
@param arg2   the second argument
@since 1.4",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Returns a new fresh folder with the given name(s) under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",1
"@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.","@return A matcher that delegates to exceptionMatcher and in addition
appends the stacktrace of the actual Exception in case of a mismatch.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.","Prepare initializer with the given field on the given instance.

This constructor fail fast if the field type cannot be handled.

@param fieldOwner Instance of the test.
@param field Field to be initialize.
@param argResolver Constructor parameters resolver",1
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",1
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",1
"@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection in which every element matches elementMatcher
@deprecated Please use CoreMatchers#everyItem(Matcher) instead.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",1
"convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",1
"convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.",1
"Returns a new fresh folder with the given name under the temporary
folder.",Returns a new fresh folder with a random name under the temporary folder.,1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of long. Length and all
values are compared.

The method #append(long, long) is used.

@param lhs  the left hand long[]
@param rhs  the right hand long[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
values are compared.

The method #append(boolean, boolean) is used.

@param lhs  the left hand boolean[]
@param rhs  the right hand boolean[]
@return EqualsBuilder - used to chain calls.",1
"This method does nothing. Don't use it.
@deprecated AssertionErrors are handled by default since JUnit 4.12. Just
like in JUnit &lt;= 4.10.","This method does nothing. Don't use it.
@deprecated AssumptionViolatedExceptions are handled by default since
JUnit 4.12. Just like in JUnit &lt;= 4.10.",1
Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh file with a random name under the temporary folder.,1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",1
"Returns a Statement: apply all
static fields assignable to TestRule
annotated with ClassRule.

@param statement the base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement","Returns a Statement: apply all non-static fields
annotated with Rule.

@param statement The base statement
@return a RunRules statement if any class-level Rules are
found, or the base statement",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of short. Length and all
values are compared.

The method #append(short, short) is used.

@param lhs  the left hand short[]
@param rhs  the right hand short[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
values are compared.

The method #append(float, float) is used.

@param lhs  the left hand float[]
@param rhs  the right hand float[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
values are compared.

The method #append(double, double) is used.

@param lhs  the left hand double[]
@param rhs  the right hand double[]
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",1
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",1
"@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing every element in elements
@deprecated Please use CoreMatchers#hasItems(Object...) instead.",1
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",1
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",1
"Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Test if two long s are equal.

@param lhs
the left hand long
@param rhs
the right hand long
@return EqualsBuilder - used to chain calls.","Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
values are compared.

The method #append(char, char) is used.

@param lhs  the left hand char[]
@param rhs  the right hand char[]
@return EqualsBuilder - used to chain calls.",1
"Deep comparison of array of int. Length and all
values are compared.

The method #append(int, int) is used.

@param lhs  the left hand int[]
@param rhs  the right hand int[]
@return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
values are compared.

The method #append(byte, byte) is used.

@param lhs  the left hand byte[]
@param rhs  the right hand byte[]
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"Returns true if this member is static, false if not.","Returns true if this member is public, false if not.",1
"@return If this describes a method invocation,
the class of the test instance.","@return If this describes a method invocation,
the name of the class of the test instance",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two chars are equal.

@param lhs  the left hand char
@param rhs  the right hand char
@return EqualsBuilder - used to chain calls.",1
"Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.","Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.",1
"Test if two bytes are equal.

@param lhs  the left hand byte
@param rhs  the right hand byte
@return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.

@param lhs  the left hand boolean
@param rhs  the right hand boolean
@return EqualsBuilder - used to chain calls.",1
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",1
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",1
"Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Float.NaN, Float.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",1
"Test if two ints are equal.

@param lhs  the left hand int
@param rhs  the right hand int
@return EqualsBuilder - used to chain calls.","Test if two shorts are equal.

@param lhs  the left hand short
@param rhs  the right hand short
@return EqualsBuilder - used to chain calls.",1
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",1
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",1
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",1
"The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",1
"Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",1
"Adds to errors if this method:

is not public, or
takes parameters, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).","Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",1
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
folder.",1
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",1
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",1
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",1
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",1
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",1
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"Adds a failure to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Adds a failure with the given reason
to the table if matcher does not match value.
Execution continues, but the test will fail at the end if the match fails.

@deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",1
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",1
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2",1
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",1
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",1
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",1
"Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",1
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.",1
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",1
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",1
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",1
Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
folder.",1
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Double.NaN, Double.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown. If the unexpected
value is infinity then the delta value is ignored.NaNs are considered
equal: assertNotEquals(Float.NaN, Float.NaN, *) fails

@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Allows creating custom long argument matchers.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",1
Returns a new fresh file with a random name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,1
"Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12","Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12",1
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",1
"Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.","Asserts that two doubles are equal to within a positive delta.
If they are not, an AssertionError is thrown with the given
message. If the expected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertEquals(Double.NaN, Double.NaN, *) passes

@param message the identifying message for the AssertionError (null
okay)
@param expected expected value
@param actual the value to check against expected
@param delta the maximum delta between expected and
actual for which both numbers are still
considered equal.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",1
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",1
"Returns a new fresh folder with the given name under the temporary
folder.","Returns a new fresh folder with the given name(s) under the temporary
folder.",1
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",1
"Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",1
"THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.","THREAD SAFETY WARNING: Test methods with a timeout parameter are run in a thread other than the
thread which runs the fixture's @Before and @After methods. This may yield different behavior for
code that is not thread safe when compared to the same test method without a timeout parameter.
Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the
same thread as the fixture's @Before and @After methods.

@since 4.0",1
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.",1
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
",1
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",1
"Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the test will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",1
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",1
"int argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.",1
"Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn
","Formats messages according to very simple substitution rules. Substitutions
can be made 1, 2 or more arguments.

For example,

MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)

will return the string ""Hi there."".

The {} pair is called the formatting anchor. It serves to designate
the location where arguments need to be substituted within the message
pattern.

In case your message contains the '{' or the '}' character, you do not have
to do anything special unless the '}' character immediately follows '{'. For
example,

MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {1,2,3} is not equal to 1,2."".

If for whatever reason you need to place the string ""{}"" in the message
without its formatting anchor meaning, then you need to escape the
'{' character with '\', that is the backslash character. Only the '{'
character should be escaped. There is no need to escape the '}' character.
For example,

MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);

will return the string ""Set {} is not equal to 1,2."".

The escaping behavior just described can be overridden by escaping the escape
character '\'. Calling

MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);

will return the string ""File name is C:\file.zip"".

The formatting conventions are different than those of MessageFormat
which ships with the Java platform. This is justified by the fact that
SLF4J's implementation is 10 times faster than that of MessageFormat.
This local performance difference is both measurable and significant in the
larger context of the complete logging processing chain.

See also #format(String, Object),
#format(String, Object, Object) and
#arrayFormat(String, Object[]) methods for more details.

@author Ceki G&uuml;lc&uuml;
@author Joern Huxhorn",1
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"Construct a new InitializationError with one or more
errors errors as causes
","Specifies the time to wait before timing out the test.

If this is not called, or is called with a timeout of
0, the returned Statement will wait forever for the
test to complete, however the test will still launch from a separate
thread. This can be useful for disabling timeouts in environments
where they are dynamically set based on some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",0
"Construct a new InitializationError with one or more
errors errors as causes
","Modifies the method-running Statement to implement this
test-running rule.

@param base The Statement to be modified
@param description A Description of the test implemented in base
@return a new statement, which may be the same as base,
a wrapper around base, or a completely new Statement.",0
"Construct a new InitializationError with one or more
errors errors as causes
","Specifies the time to wait before timing out the test.

If this is not called, or is called with a
timeout of 0, the returned Timeout
rule instance will cause the tests to wait forever to
complete, however the tests will still launch from a
separate thread. This can be useful for disabling timeouts
in environments where they are dynamically set based on
some property.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return this for method chaining.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0
"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
removed in the next major release. Please use
BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Specifies whether to look for a stuck thread.  If a timeout occurs and this
feature is enabled, the rule will look for a thread that appears to be stuck
and dump its backtrace.  This feature is experimental.  Behavior may change
after the 4.12 release in response to feedback.

@param enable true to enable the feature
@return this for method chaining.",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Adapter for Time. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param dateStyle the predefined date style that date objects will be serialized/deserialized
to/from
@param timeStyle the predefined style for the time portion of the date objects
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Configures Gson to apply a specific naming policy strategy to an object's field during
serialization and deserialization.

@param fieldNamingStrategy the actual naming strategy to apply to the fields
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.3",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
invocation will be used to decide the serialization format.

<p>Note that this style value should be one of the predefined constants in the
{@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
information on the valid style constants.</p>

@param style the predefined date style that date objects will be serialized/deserialized
to/from
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
@since 1.2",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}",0
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"Adapter for Date. Although this class appears stateless, it is not.
DateFormat captures its time zone and locale when it is created, which gives
this class state. DateFormat isn't thread safe either, so this class has
to synchronize its read and write methods.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","Configures Gson to apply a specific naming policy to an object's field during serialization
and deserialization.

@param namingConvention the JSON field naming convention to use for serialization and
deserialization.
@return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",0
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT",0
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current object.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current object.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
end of the current array.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"This method deserializes the specified Json into an object of the specified class. It is not
suitable to use if the specified class is a generic type since it will not have the generic
type information because of the Type Erasure feature of Java. Therefore, this method should not
be used if the desired type is a generic type. Note that this method works fine if the any of
the fields of the specified object are generics, just the object itself should not be a
generic type. For the cases when the object is of generic type, invoke
{@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Class)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type
classOfT","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"Returns true if this member is static, false if not.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",0
"Returns true if this member is static, false if not.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new array.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","Consumes the next token from the JSON stream and asserts that it is the
beginning of a new object.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
and read using {@link JsonReader#beginObject}.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Verify that your code throws an exception that is an
instance of specific type.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","@return If this describes a method invocation,
the class of the test instance.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Verify that your code throws an exception that is an
instance of specific type.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","@return If this describes a method invocation,
the class of the test instance.",0
"Returns a new builder for building an instance.

@since 4.12","Verify that your code throws an exception that is matched by
a Hamcrest matcher.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","Consumes the next token from the JSON stream and asserts that it is the
end of the current object.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"Returns true if this member is static, false if not.","@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current object.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"Returns true if this member is public, false if not.","@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current object.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Returns true if this member is static, false if not.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Returns true if this member is static, false if not.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns a new builder for building an instance.

@since 4.12",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns a new builder for building an instance.

@since 4.12",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"The closing of a JSON array. Written using {@link JsonWriter#endArray}
and read using {@link JsonReader#endArray}.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Returns true if this member is static, false if not.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.",0
"Returns true if this member is static, false if not.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Returns true if this member is static, false if not.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",0
"Returns true if this member is public, false if not.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current array.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"Consumes the next token from the JSON stream and asserts that it is the
end of the current object.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"The closing of a JSON object. Written using {@link JsonWriter#endObject}
and read using {@link JsonReader#endObject}.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Returns true if this member is static, false if not.","Returns a Statement: run all non-overridden @BeforeClass methods on this class
and superclasses before executing statement; if any throws an
Exception, stop execution and pass the exception on.",0
"Returns true if this member is public, false if not.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"Returns true if this member is static, false if not.","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.",0
"Returns true if this member is static, false if not.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns true if this member is static, false if not.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Provides JUnit core classes and annotations.

Corresponds to junit.framework in Junit 3.x.

@since 4.0","@return A matcher that delegates to throwableMatcher and in addition
appends the stacktrace of the actual Throwable in case of a mismatch.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"Returns true if this member is static, false if not.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated with annotationClass.",0
"Returns true if this member is static, false if not.",Returns a new fresh folder with a random name under the temporary folder.,0
"Returns true if this member is static, false if not.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns true if this member is static, false if not.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Returns true if this member is public, false if not.","Returns a new builder for building an instance of TemporaryFolder.

@since 4.13",0
"Returns true if this member is public, false if not.",Returns a new fresh folder with a random name under the temporary folder.,0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a String.

@return get this element as a String.",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Returns true if this member is public, false if not.","Returns a new builder for building an instance.

@since 4.12",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a String.

@return get this element as a String.",0
"This method deserializes the specified Json into an object of the specified type. This method
is useful if the specified object is a generic type. For non-generic objects, use
{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
a String, use {@link #fromJson(Reader, Type)} instead.

@param <T> the type of the desired object
@param json the string from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
@throws JsonParseException if json is not a valid representation for an object of type typeOfT
@throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified reader into an object of the
specified class. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
{@link Reader}, use {@link #fromJson(String, Class)} instead.

@param <T> the type of the desired object
@param json the reader producing the Json from which the object is to be deserialized.
@param classOfT the class of T
@return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
consuming it.

@throws IllegalStateException if the next token is not a boolean or if
this reader is closed.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
and read using {@link JsonReader#beginArray}.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Returns true if this member is static, false if not.","Verify that your code throws an exception whose message contains
a specific text.",0
"Returns true if this member is static, false if not.","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12",0
"Returns true if this member is static, false if not.","Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a double using {@link Double#parseDouble(String)}.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a double, or is non-finite.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"Returns true if this member is static, false if not.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",0
"Returns true if this member is public, false if not.","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",0
"Returns true if this member is public, false if not.",Invoked when a test is skipped due to a failed assumption.,0
"Returns true if this member is public, false if not.","Matches if the result has exactly one failure, and it contains string",0
"Returns true if this member is public, false if not.",Invoked when a test is skipped due to a failed assumption.,0
"Returns true if this member is public, false if not.",Invoked when a test is skipped due to a failed assumption.,0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"Returns true if this member is static, false if not.","Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.",0
"Returns true if this member is static, false if not.","Returns the formatted string of the elapsed time.
Duplicated from BaseTestRunner. Fix it.",0
"Construct a new InitializationError with one or more
errors errors as causes
","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Construct a new InitializationError with one or more
errors errors as causes
","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Construct a new InitializationError with one cause
with message string","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"Returns true if this member is static, false if not.","Adds to errors if this method:

is not public, or
returns something other than void, or
is static (given isStatic is false), or
is not static (given isStatic is true).",0
"Returns true if this member is static, false if not.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"Returns true if this member is static, false if not.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
"Returns a new builder for building an instance.

@since 4.12",Returns a new fresh folder with a random name under the temporary folder.,0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a String.

@return get this element as a String.",0
"Returns true if this member is static, false if not.","@return If this describes a method invocation,
the class of the test instance.",0
"Returns the annotation of type annotationType on this method, if
one exists.","Verify that your code throws an exception that is matched by
a Hamcrest matcher.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2",0
"This method deserializes the Json read from the specified reader into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.

@param <T> the type of the desired object
@param json the reader producing Json from which the object is to be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
@throws JsonIOException if there was a problem reading from the Reader
@throws JsonSyntaxException if json is not a valid representation for an object of type
@since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"Returns true if this member is static, false if not.","Returns a new fresh folder with the given name(s) under the temporary
folder.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Returns true if this member is public, false if not.","@return If this describes a method invocation,
the class of the test instance.",0
"Verify that your code throws an exception that is an
instance of specific type.","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0
"Verify that your code throws an exception whose message contains
a specific text.","Matches if the result has exactly one failure, and it contains string",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a String.

@return get this element as a String.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.","convenience method to get this element as a String.

@return get this element as a String.",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"Returns a new builder for building an instance.

@since 4.12","Creates a Timeout that will timeout a test after the
given duration, in milliseconds.

@since 4.12",0
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"Returns true if this member is public, false if not.","Returns the annotation of type annotationType on this method, if
one exists.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonPrimitive element.

@param memberName name of the member being requested.
@return the JsonPrimitive corresponding to the specified member.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link Boolean}.

@return get this element as a {@link Boolean}.
",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Convenience method to get the specified member as a JsonArray.

@param memberName name of the member being requested.
@return the JsonArray corresponding to the specified member.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as an int. If the next token's numeric value cannot be exactly
represented by a Java {@code int}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as an int.",0
"Returns a new builder for building an instance.

@since 4.12","Creates a Timeout that will timeout a test after the
given duration, in seconds.

@since 4.12",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
consuming it. If the next token is a number, this method will return its
string form.

@throws IllegalStateException if the next token is not a string or if
this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
consuming it. If the next token is a string, this method will attempt to
parse it as a long. If the next token's numeric value cannot be exactly
represented by a Java {@code long}, this method throws.

@throws IllegalStateException if the next token is not a literal value.
@throws NumberFormatException if the next literal value cannot be parsed
as a number, or exactly represented as a long.",0
"Verify that your code throws an exception whose message contains
a specific text.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Returns true if this member is static, false if not.","@return If this describes a method invocation,
the name of the method (or null if not)",0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","@return If this describes a method invocation,
the class of the test instance.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@return A matcher matching any collection containing element
@deprecated Please use CoreMatchers#hasItem(Object) instead.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link JsonObject}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
first.

@return get this element as a {@link JsonObject}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.",0
"Returns a new builder for building an instance.

@since 4.12","Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","@return A matcher matching any collection containing an element matching elementMatcher
@deprecated Please use CoreMatchers#hasItem(Matcher) instead.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two byte arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds byte array with expected values.
@param actuals byte array with actual values",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this element as a {@link JsonArray}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
first.

@return get this element as a {@link JsonArray}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"Convenience method to get the specified member as a JsonObject.

@param memberName name of the member being requested.
@return the JsonObject corresponding to the specified member.","convenience method to get this element as a String.

@return get this element as a String.",0
"Returns true if this member is public, false if not.","Returns the formatted string of the elapsed time. Duplicated from
BaseTestRunner. Fix it.",0
"Returns true if this member is public, false if not.",Returns a new fresh file with the given name under the temporary folder.,0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
other type, a {@link IllegalStateException} will result. Hence it is best to use this method
after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
first.

@return get this element as a {@link JsonPrimitive}.
@throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"Returns a new builder for building an instance.

@since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
superclasses that are annotated.

@since 4.12",0
"Verify that your code throws an exception whose message contains
a specific text.","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated}.

@since 4.12","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two doubles are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Double.NaN, Double.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"This method deserializes the Json read from the specified parse tree into an object of the
specified type. It is not suitable to use if the specified class is a generic type since it
will not have the generic type information because of the Type Erasure feature of Java.
Therefore, this method should not be used if the desired type is a generic type. Note that
this method works fine if the any of the fields of the specified object are generics, just the
object itself should not be a generic type. For the cases when the object is of generic type,
invoke {@link #fromJson(JsonElement, Type)}.
@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param classOfT The class of T
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3","This method deserializes the Json read from the specified parse tree into an object of the
specified type. This method is useful if the specified object is a generic type. For
non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.

@param <T> the type of the desired object
@param json the root of the parse tree of {@link JsonElement}s from which the object is to
be deserialized
@param typeOfT The specific genericized type of src. You can obtain this type by using the
{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
{@code Collection<Foo>}, you should use:
<pre>
Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
@throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
@since 1.3",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two floats are not equal to within a positive delta.
If they are, an AssertionError is thrown with the given
message. If the unexpected value is infinity then the delta value is
ignored. NaNs are considered equal:
assertNotEquals(Float.NaN, Float.NaN, *) fails

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value
@param actual the value to check against unexpected
@param delta the maximum delta between unexpected and
actual for which both numbers are still
considered equal.",0
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a float.

@return get this element as a float.
@throws NumberFormatException if the value contained is not a valid float.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"Returns, efficiently, all the non-overridden methods in this class and
its superclasses that are annotated with annotationClass.","Returns a Statement: run all non-overridden @Before
methods on this class and superclasses before running next; if
any throws an Exception, stop execution and pass the exception on.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two long arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds long array with expected values.
@param actuals long array with actual values",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a Number.

@return get this element as a Number.
@throws NumberFormatException if the value contained is not a valid Number.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive float value.

@return get this element as a primitive float value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
float value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive short.

@return get this element as a primitive short.
@throws NumberFormatException if the value contained is not a valid short value.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.

@return get this element as a primitive boolean value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive integer.

@return get this element as a primitive integer.
@throws NumberFormatException if the value contained is not a valid integer.",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive character value.

@return get this element as a primitive char value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
char value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a primitive byte value.

@return get this element as a primitive byte value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
byte value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.3","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.

@return get this element as a {@link Number}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
number.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"convenience method to get this array as a {@link Number} if it contains a single element.

@return get this element as a number if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid Number.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a {@link String} if it contains a single element.

@return get this element as a String if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid String.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a float if it contains a single element.

@return get this element as a float if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid float.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a long if it contains a single element.

@return get this element as a long if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid long.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as an integer if it contains a single element.

@return get this element as an integer if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid integer.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer value.

@return get this element as a primitive integer value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
integer value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive long.

@return get this element as a primitive long.
@throws NumberFormatException if the value contained is not a valid long.",0
"convenience method to get this array as a boolean if it contains a single element.

@return get this element as a boolean if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid boolean.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"convenience method to get this array as a primitive short if it contains a single element.

@return get this element as a primitive short if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid short.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.

@return get this element as a primitive long value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
long value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"convenience method to get this element as a primitive double value.

@return get this element as a primitive double value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
double value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.","convenience method to get this element as a primitive double.

@return get this element as a primitive double.
@throws NumberFormatException if the value contained is not a valid double.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"convenience method to get this array as a double if it contains a single element.

@return get this element as a double if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
is not a valid double.
@throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.

@return get this element as a string value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
string value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two objects do not refer to the same object. If they do
refer to the same object, an AssertionError is thrown with the
given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected the object you don't expect
@param actual the object to compare to unexpected",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two int arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds int array with expected values.
@param actuals int array with actual values",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"long array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"int array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"char array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"byte array argument that is equal to the given array, i.e. it has to have
the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that an object is null. If it isn't an AssertionError is
thrown.

@param object Object to check or null",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown.

@param expecteds short array with expected values.
@param actuals short array with actual values",0
"short array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"float array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"double array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"boolean array argument that is equal to the given array, i.e. it has to
have the same length, and each element has to be equal.

See examples in javadoc for AdditionalMatchers class

@param value
the given array.
@return null.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"Verify that your code throws an exception that is an
instance of specific type.","Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown.",0
"Verify that your code throws an exception that is an
instance of specific type.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not, an
AssertionError is thrown.

@param expected expected long value.
@param actual actual long value",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Verify that your code throws an exception whose message contains
a specific text.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"Verify that your code throws an exception whose message contains
a specific text.","Verify that your code throws an exception whose cause is matched by
a Hamcrest matcher.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value","Asserts that an object is null. If it is not, an AssertionError
is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param object Object to check or null",0
"This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type)} instead. If you want to write out the object to a
{@link Writer}, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"convenience method to get this element as a {@link Boolean} value.

@return get this element as a {@link Boolean} value.
@throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
boolean value.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0",0
"This method serializes the specified object, including those of generic types, into its
equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}
@since 1.4","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Verify that your code throws an exception that is matched by
a Hamcrest matcher.","Verify that your code throws an exception that is an
instance of specific type.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects are not equals. If they are, an
AssertionError is thrown with the given message. If
unexpected and actual are null,
they are considered equal.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Verify that your code throws an exception whose message contains
a specific text.","Verify that your code throws an exception whose message is matched
by a Hamcrest matcher.",0
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Asserts that a condition is true. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked
","Asserts that a condition is true. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Asserts that a condition is false. If it isn't it throws an
AssertionError with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
AssertionError without a message.

@param condition condition to be checked",0
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"Allows creating custom short argument matchers.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"This method serializes the specified object into its equivalent representation as a tree of
{@link JsonElement}s. This method should be used when the specified object is not a generic
type. This method uses {@link Class#getClass()} to get the type for the specified object, but
the {@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJsonTree(Object, Type)} instead.

@param src the object for which Json representation is to be created setting for Gson
@return Json representation of {@code src}.
@since 1.4","This method serializes the specified object into its equivalent Json representation.
This method should be used when the specified object is not a generic type. This method uses
{@link Class#getClass()} to get the type for the specified object, but the
{@code getClass()} loses the generic type information because of the Type Erasure feature
of Java. Note that this method works fine if the any of the object fields are of generic type,
just the object itself should not be of a generic type. If the object is of generic type, use
{@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which Json representation is to be created setting for Gson
@param writer Writer to which the Json representation needs to be written
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"Allows creating custom char argument matchers.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive char arguments.
Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows creating custom boolean argument matchers.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return false.","Enables integrating hamcrest matchers that match primitive boolean arguments.
Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return false.",0
"Allows creating custom int argument matchers.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode","Allows verifying exact number of invocations within given timeout
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode",0
"Allows creating custom double argument matchers.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"float argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two short arrays are equal. If they are not, an
AssertionError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0",0
"int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"char argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"convenience method to get this array as a {@link BigDecimal} if it contains a single element.

@return get this element as a {@link BigDecimal} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigDecimal}.

@return get this element as a {@link BigDecimal}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
* @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"long argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"convenience method to get this array as a {@link BigInteger} if it contains a single element.

@return get this element as a {@link BigInteger} if it is single element array.
@throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
@throws IllegalStateException if the array has more than one element.
@since 1.2","convenience method to get this element as a {@link BigInteger}.

@return get this element as a {@link BigInteger}.
@throws ClassCastException if the element is of not a {@link JsonPrimitive}.
@throws NumberFormatException if the element is not a valid {@link BigInteger}.
@throws IllegalStateException if the element is of the type {@link JsonArray} but contains
more than a single element.
@since 1.2",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two char arrays are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expecteds char array with expected values.
@param actuals char array with actual values",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
refer to the same object an AssertionFailedError is thrown with the
given message.",0
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"boolean argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows at-least-x verification within given timeout. E.g:
<pre class=""code""><code class=""java"">
verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0",0
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","int argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0",0
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"boolean argument that matches both given matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return false.","boolean argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return false.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message only.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"int argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"long argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows creating custom byte argument matchers.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"short argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","short argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"long argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","long argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"float argument that matches any of the given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows creating custom float argument matchers.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

See examples in javadoc for Matchers class

@param matcher decides whether argument matches
@return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.

* See examples in javadoc for MockitoHamcrest class

@param matcher decides whether argument matches
@return 0.",0
"byte argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","byte argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0",0
"char argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.
","char argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0
"An assumption exception with the given value (String or
Throwable) and an additional failing Matcher.

@deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.

@deprecated Please use org.junit.AssumptionViolatedException instead.",0
"double argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","double argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.",0
"float argument that matches both given argument matchers.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the first argument matcher.
@param second
placeholder for the second argument matcher.
@return 0.","float argument that does not match the given argument matcher.

See examples in javadoc for AdditionalMatchers class

@param first
placeholder for the argument matcher.
@return 0.
",0
"Allows verifying exact number of invocations. E.g:
<pre class=""code""><code class=""java"">
verify(mock, times(2)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param wantedNumberOfInvocations wanted number of invocations

@return verification mode","Allows at-least-x verification. E.g:
<pre class=""code""><code class=""java"">
verify(mock, atLeast(3)).someMethod(""some arg"");

See examples in javadoc for Mockito class

@param minNumberOfInvocations minimum number of invocations

@return verification mode",0
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two booleans are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@return Json representation of {@code src}","This method serializes the specified object, including those of generic types, into its
equivalent Json representation. This method must be used if the specified object is a generic
type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.

@param src the object for which JSON representation is to be created
@param typeOfSrc The specific genericized type of src. You can obtain
this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
to get the type for {@code Collection<Foo>}, you should use:
<pre>
Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
</pre>
@param writer Writer to which the Json representation of src needs to be written.
@throws JsonIOException if there was a problem writing to the writer
@since 1.2",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two longs are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two chars are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two ints are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","long argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Asserts that two longs are not equals. If they are, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param unexpected unexpected value to check
@param actual the value to check against unexpected","Asserts that two longs are equal. If they are not, an
AssertionError is thrown with the given message.

@param message the identifying message for the AssertionError (null
okay)
@param expected long expected value.
@param actual long actual value",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.",0
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","double argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0",0
"int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"short argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"short argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","comparable argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.",0
"Asserts that two objects are equal. If they are not
an AssertionFailedError is thrown with the given message.","Asserts that an object is null.  If it is not
an AssertionFailedError is thrown with the given message.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"float argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"int argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.
",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","comparable argument less than or equal the given value details.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.",0
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","double argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","byte argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"argument greater than or equal the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return null.","int argument less than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"byte argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","byte argument less than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","float argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","int argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"double argument greater than or equal to the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.","short argument greater than the given value.

See examples in javadoc for AdditionalMatchers class

@param value
the given value.
@return 0.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError.
",0
"
Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.
","Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is false. If it isn't it throws
an AssertionFailedError with the given message.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError with the given message.",0
"Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.","Asserts that a condition is true. If it isn't it throws
an AssertionFailedError.
",0
