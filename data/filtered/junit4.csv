,comment1,comment2,name1,name2,meta1,meta2,label
0,"Returns true if this member is static, false if not.","Returns true if this member is public, false if not.",isStatic,isPublic,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isStatic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isPublic()"", ""entityFile"": ""FrameworkMember.java""} -->",1
1,"Returns a new builder for building an instance.
 @since 4.12","Returns a new builder for building an instance of TemporaryFolder.
 @since 4.13",builder,builder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""TemporaryFolder.java""} -->",1
2,"Returns a new builder for building an instance.
 @since 4.12","Returns a new builder for building an instance.
 @since 4.12",builder,builder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""Timeout.java""} -->",1
3,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Adds to errors if this method:
 is not public, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).",validatePublicVoidNoArg,validatePublicVoid,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoid(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->",1
4,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
 annotation, but:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).",validatePublicVoidNoArg,validatePublicVoidNoArgMethods,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""ParentRunner.java""} -->",1
5,"Adds to errors if this method:
 is not public, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Adds to errors if any method in this class is annotated with
 annotation, but:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).",validatePublicVoid,validatePublicVoidNoArgMethods,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoid(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""ParentRunner.java""} -->",1
6,"Returns the annotation of type annotationType on this method, if
 one exists.","@return the annotation of type annotationType that is attached to this description node,
 or null if none exists
 ",getAnnotation,getAnnotation,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T getAnnotation(Class<T> annotationType)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T getAnnotation(Class<T> annotationType)"", ""entityFile"": ""Description.java""} -->",1
7,"Construct a new InitializationError with one or more
 errors errors as causes
 ","Construct a new InitializationError with one cause
 with message string",InitializationError,InitializationError,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(List<Throwable> errors)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->",1
8,"Specifies the time to wait before timing out the test.
 If this is not called, or is called with a timeout of
 0, the returned Statement will wait forever for the
 test to complete, however the test will still launch from a separate
 thread. This can be useful for disabling timeouts in environments
 where they are dynamically set based on some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.","Specifies the time to wait before timing out the test.
 If this is not called, or is called with a
 timeout of 0, the returned Timeout
 rule instance will cause the tests to wait forever to
 complete, however the tests will still launch from a
 separate thread. This can be useful for disabling timeouts
 in environments where they are dynamically set based on
 some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.",withTimeout,withTimeout,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""Timeout.java""} -->",1
9,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the test will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the rule will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.",withLookingForStuckThread,withLookingForStuckThread,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""Timeout.java""} -->",1
10,"Adds a failure to the table if matcher does not match value.
 Execution continues, but the test will fail at the end if the match fails.
 @deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Adds a failure with the given reason
 to the table if matcher does not match value.
 Execution continues, but the test will fail at the end if the match fails.
 @deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",checkThat,checkThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void checkThat(final T value, final Matcher<T> matcher)"", ""entityFile"": ""ErrorCollector.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void checkThat(final String reason, final T value, final Matcher<T> matcher)"", ""entityFile"": ""ErrorCollector.java""} -->",1
11,"This method does nothing. Don't use it.
 @deprecated AssertionErrors are handled by default since JUnit 4.12. Just
 like in JUnit &lt;= 4.10.","This method does nothing. Don't use it.
 @deprecated AssumptionViolatedExceptions are handled by default since
 JUnit 4.12. Just like in JUnit &lt;= 4.10.",handleAssertionErrors,handleAssumptionViolatedExceptions,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssertionErrors()"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssumptionViolatedExceptions()"", ""entityFile"": ""ExpectedException.java""} -->",1
12,"Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }","Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }
 @since 4.0",SuiteMethod,AllTests,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SuiteMethod"", ""entityFile"": ""SuiteMethod.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AllTests"", ""entityFile"": ""AllTests.java""} -->",1
13,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()",expect,expectMessage,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->",1
14,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()",expect,expectCause,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->",1
15,"Verify that your code throws an exception that is an
 instance of specific type.
 @Test
 public void throwsExceptionWithSpecificType() {
 thrown.expect(NullPointerException.class);
 throw new NullPointerException();
 }","Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }",expect,expectMessage,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Class<? extends Throwable> type)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->",1
16,"Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()",expectMessage,expectCause,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->",1
17,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestClass,TestMethod,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->",1
18,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestClass,JUnit4ClassRunner,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->",1
19,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestClass,MethodRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->",1
20,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestClass,MethodValidator,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->",1
21,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestClass,ClassRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",1
22,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestClass,FailedBefore,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",1
23,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestMethod,JUnit4ClassRunner,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->",1
24,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestMethod,MethodRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->",1
25,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestMethod,MethodValidator,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->",1
26,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestMethod,ClassRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",1
27,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",TestMethod,FailedBefore,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",1
28,"Modifies the method-running Statement to implement an additional
 test-running rule.
 @param base The Statement to be modified
 @param method The method to be run
 @param target The object on which the method will be run.
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.","Modifies the method-running Statement to implement this
 test-running rule.
 @param base The Statement to be modified
 @param description A Description of the test implemented in base
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.",apply,apply,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, FrameworkMethod method, Object target)"", ""entityFile"": ""MethodRule.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, Description description)"", ""entityFile"": ""TestRule.java""} -->",1
29,"Returns the formatted string of the elapsed time. Duplicated from
 BaseTestRunner. Fix it.","Returns the formatted string of the elapsed time.
 Duplicated from BaseTestRunner. Fix it.",elapsedTimeAsString,elapsedTimeAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""TextListener.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""ResultPrinter.java""} -->",1
30,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.",AssumptionViolatedException,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",1
31,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","An assumption exception with the given message and a cause.
 @deprecated Please use org.junit.AssumptionViolatedException instead.",AssumptionViolatedException,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Throwable e)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",1
32,"An exception class used to implement assumptions (state in which a given test
 is meaningful and should or should not be executed). A test for which an assumption
 fails should not generate a test case failure.
 @see org.junit.Assume","An exception class used to implement assumptions (state in which a given test
 is meaningful and should or should not be executed). A test for which an assumption
 fails should not generate a test case failure.
 @see org.junit.Assume
 @since 4.12",AssumptionViolatedException,AssumptionViolatedException,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AssumptionViolatedException"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AssumptionViolatedException"", ""entityFile"": ""AssumptionViolatedException.java""} -->",1
33,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.",getAnnotatedMethods,getAnnotatedMethods,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->",1
34,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated.
 @since 4.12",getAnnotatedMethods,getAnnotatedFields,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields()"", ""entityFile"": ""TestClass.java""} -->",1
35,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.",getAnnotatedMethods,getAnnotatedFields,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->",1
36,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated.
 @since 4.12",getAnnotatedMethods,getAnnotatedFields,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields()"", ""entityFile"": ""TestClass.java""} -->",1
37,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.",getAnnotatedMethods,getAnnotatedFields,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->",1
38,"Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated.
 @since 4.12","Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.",getAnnotatedFields,getAnnotatedFields,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->",1
39,Invoked when a test is skipped due to a failed assumption.,Invoked when a test is skipped due to a failed assumption.,skipped,skipped,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(long nanos, AssumptionViolatedException e, Description description)"", ""entityFile"": ""Stopwatch.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->",1
40,Invoked when a test is skipped due to a failed assumption.,"Invoked when a test is skipped due to a failed assumption.
 @deprecated use #skipped(AssumptionViolatedException, Description)",skipped,skipped,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(long nanos, AssumptionViolatedException e, Description description)"", ""entityFile"": ""Stopwatch.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->",1
41,"Matches if the result has exactly one failure, and it contains string","Matches if the result has one or more failures, and at least one of them
 contains string
 ",hasSingleFailureContaining,hasFailureContaining,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Object> hasSingleFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<PrintableResult> hasFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->",1
42,"@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing an element matching elementMatcher
 @deprecated Please use CoreMatchers#hasItem(Matcher) instead.",hasItem,hasItem,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
43,"@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.",hasItem,hasItems,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
44,"@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.","@return A matcher matching any collection in which every element matches elementMatcher
 @deprecated Please use CoreMatchers#everyItem(Matcher) instead.",hasItem,everyItem,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
45,"@return A matcher matching any collection containing an element matching elementMatcher
 @deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.",hasItem,hasItems,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
46,"@return A matcher matching any collection containing an element matching elementMatcher
 @deprecated Please use CoreMatchers#hasItem(Matcher) instead.","@return A matcher matching any collection in which every element matches elementMatcher
 @deprecated Please use CoreMatchers#everyItem(Matcher) instead.",hasItem,everyItem,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
47,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","@return A matcher matching any collection in which every element matches elementMatcher
 @deprecated Please use CoreMatchers#everyItem(Matcher) instead.",hasItems,everyItem,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
48,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","This is useful for fluently combining matchers where either may pass, for example:
 assertThat(string, either(containsString(""a"")).or(containsString(""b"")));
 @deprecated Please use CoreMatchers#either(Matcher) instead.",both,either,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
49,"@return A matcher that delegates to throwableMatcher and in addition
 appends the stacktrace of the actual Throwable in case of a mismatch.","@return A matcher that delegates to exceptionMatcher and in addition
 appends the stacktrace of the actual Exception in case of a mismatch.",isThrowable,isException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isException(Matcher<T> exceptionMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",1
50,"Returns a new builder for building an instance of TemporaryFolder.
 @since 4.13","Returns a new builder for building an instance.
 @since 4.12",builder,builder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""Timeout.java""} -->",1
51,Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh file with a random name under the temporary folder.,newFile,newFile,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile(String fileName) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
52,Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
 folder.",newFile,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile(String fileName) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String folder) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
53,Returns a new fresh file with the given name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
 folder.",newFile,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile(String fileName) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String... folderNames) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
54,Returns a new fresh file with the given name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,newFile,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile(String fileName) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
55,Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name under the temporary
 folder.",newFile,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String folder) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
56,Returns a new fresh file with a random name under the temporary folder.,"Returns a new fresh folder with the given name(s) under the temporary
 folder.",newFile,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String... folderNames) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
57,Returns a new fresh file with a random name under the temporary folder.,Returns a new fresh folder with a random name under the temporary folder.,newFile,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
58,"Returns a new fresh folder with the given name under the temporary
 folder.","Returns a new fresh folder with the given name(s) under the temporary
 folder.",newFolder,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String folder) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String... folderNames) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
59,"Returns a new fresh folder with the given name under the temporary
 folder.",Returns a new fresh folder with a random name under the temporary folder.,newFolder,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String folder) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
60,"Returns a new fresh folder with the given name(s) under the temporary
 folder.",Returns a new fresh folder with a random name under the temporary folder.,newFolder,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String... folderNames) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",1
61,Invoked when a test is skipped due to a failed assumption.,"Invoked when a test is skipped due to a failed assumption.
 @deprecated use #skipped(AssumptionViolatedException, Description)",skipped,skipped,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->",1
62,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",JUnit4ClassRunner,MethodRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->",1
63,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",JUnit4ClassRunner,MethodValidator,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->",1
64,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",JUnit4ClassRunner,ClassRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",1
65,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",JUnit4ClassRunner,FailedBefore,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",1
66,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",MethodRoadie,MethodValidator,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->",1
67,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",MethodRoadie,ClassRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",1
68,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",MethodRoadie,FailedBefore,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",1
69,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",MethodValidator,ClassRoadie,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",1
70,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",MethodValidator,FailedBefore,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",1
71,"Creates a Timeout that will timeout a test after the
 given duration, in milliseconds.
 @since 4.12","Creates a Timeout that will timeout a test after the
 given duration, in seconds.
 @since 4.12",millis,seconds,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout millis(long millis)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout seconds(long seconds)"", ""entityFile"": ""Timeout.java""} -->",1
72,"Returns a Statement: run all non-overridden @BeforeClass methods on this class
 and superclasses before executing statement; if any throws an
 Exception, stop execution and pass the exception on.","Returns a Statement: run all non-overridden @Before
 methods on this class and superclasses before running next; if
 any throws an Exception, stop execution and pass the exception on.",withBeforeClasses,withBefores,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBeforeClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",1
73,"Returns a Statement: run all non-overridden @AfterClass methods on this class
 and superclasses before executing statement; all AfterClass methods are
 always executed: exceptions thrown by previous steps are combined, if
 necessary, with exceptions from AfterClass methods into a
 org.junit.runners.model.MultipleFailureException.","Returns a Statement: run all non-overridden @After
 methods on this class and superclasses before running next; all
 After methods are always executed: exceptions thrown by previous steps
 are combined, if necessary, with exceptions from After methods into a
 MultipleFailureException.",withAfterClasses,withAfters,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfterClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",1
74,"Returns a Statement: apply all
 static fields assignable to TestRule
 annotated with ClassRule.
 @param statement the base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement","Returns a Statement: apply all non-static fields
 annotated with Rule.
 @param statement The base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement",withClassRules,withTestRules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withClassRules(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",1
75,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name",createSuiteDescription,createSuiteDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->",1
76,"Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 (This remains for binary compatibility with clients of JUnit 4.3)
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",createTestDescription,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name)"", ""entityFile"": ""Description.java""} -->",1
77,"Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",createTestDescription,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(String className, String name, Serializable uniqueId)"", ""entityFile"": ""Description.java""} -->",1
78,"Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 (This remains for binary compatibility with clients of JUnit 4.3)
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",createTestDescription,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(String className, String name, Serializable uniqueId)"", ""entityFile"": ""Description.java""} -->",1
79,"@return If this describes a method invocation,
 the class of the test instance.","@return If this describes a method invocation,
 the name of the class of the test instance",getTestClass,getClassName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Class<?> getTestClass()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getClassName()"", ""entityFile"": ""Description.java""} -->",1
80,"@return If this describes a method invocation,
 the class of the test instance.","@return If this describes a method invocation,
 the name of the method (or null if not)",getTestClass,getMethodName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Class<?> getTestClass()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->",1
81,"@return If this describes a method invocation,
 the name of the class of the test instance","@return If this describes a method invocation,
 the name of the method (or null if not)",getClassName,getMethodName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getClassName()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->",1
82,"Called by this class and subclasses once the classes making up the suite have been determined
 @param builder builds runners for classes in the suite
 @param klass the root of the suite
 @param suiteClasses the classes in the suite","Called by this class and subclasses once the runners making up the suite have been determined
 @param klass root of the suite
 @param runners for each class in the suite, a Runner",Suite,Suite,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError"", ""entityFile"": ""Suite.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError"", ""entityFile"": ""Suite.java""} -->",1
83,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",ClassRoadie,FailedBefore,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",1
84,"Validates annotation on the given class.
 @param testClass that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12
 ","Validates annotation on the given field.
 @param field that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12",validateAnnotatedClass,validateAnnotatedField,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedClass(TestClass testClass)"", ""entityFile"": ""AnnotationValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedField(FrameworkField field)"", ""entityFile"": ""AnnotationValidator.java""} -->",1
85,"Validates annotation on the given class.
 @param testClass that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12
 ","Validates annotation on the given method.
 @param method that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12",validateAnnotatedClass,validateAnnotatedMethod,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedClass(TestClass testClass)"", ""entityFile"": ""AnnotationValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedMethod(FrameworkMethod method)"", ""entityFile"": ""AnnotationValidator.java""} -->",1
86,"Validates annotation on the given field.
 @param field that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12","Validates annotation on the given method.
 @param method that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12",validateAnnotatedField,validateAnnotatedMethod,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedField(FrameworkField field)"", ""entityFile"": ""AnnotationValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedMethod(FrameworkMethod method)"", ""entityFile"": ""AnnotationValidator.java""} -->",1
87,"Asserts that a condition is true. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked
 ","Asserts that a condition is false. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
88,"Asserts that a condition is true. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked","Asserts that a condition is false. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
89,Counts the number of test cases that will be run by this test.,Counts the number of test cases that will be run by this test.,countTestCases,countTestCases,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public abstract int countTestCases()"", ""entityFile"": ""Test.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int countTestCases()"", ""entityFile"": ""TestSuite.java""} -->",1
90,"Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value","Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.
 ",assertEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
91,"Asserts that two objects are not equals. If they are, an
 AssertionError is thrown with the given message. If
 unexpected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
92,"Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
93,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
94,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
95,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
96,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
97,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
98,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
99,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
100,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
101,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
102,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
103,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
104,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
105,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
106,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
107,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
108,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
109,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
110,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
111,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
112,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",assertArrayEquals,internalArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
113,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
114,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
115,"Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run",aClass,classWithoutSuiteMethod,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->",1
116,"Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",aClass,classes,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",1
117,"Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
 in a set of classes with the default Computer.
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",aClass,classes,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",1
118,"Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",classWithoutSuiteMethod,classes,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",1
119,"Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Create a Request that, when processed, will run all the tests
 in a set of classes with the default Computer.
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",classWithoutSuiteMethod,classes,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",1
120,"Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run","Create a Request that, when processed, will run all the tests
 in a set of classes with the default Computer.
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",classes,classes,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",1
121,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",assertArrayEquals,internalArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
122,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
123,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
124,"
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->",1
125,"
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",assertTrue,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
126,"
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ",assertTrue,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
127,"
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
128,"
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
129,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
130,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
131,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
132,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
133,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
134,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
135,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
136,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
137,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
138,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
139,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
140,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->",1
141,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
142,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
143,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
144,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
145,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
146,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
147,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
148,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
149,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
150,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
151,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
152,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
153,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
154,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
155,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
156,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
157,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
158,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
159,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
160,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
161,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
162,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
163,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
164,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
165,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
166,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
167,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
168,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
169,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
170,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
171,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
172,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
173,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
174,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
175,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
176,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, short[] expecteds, short[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
177,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",assertFalse,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
178,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ",assertFalse,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
179,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertFalse,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
180,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertFalse,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
181,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
182,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
183,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
184,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
185,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
186,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
187,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->",1
188,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->",1
189,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->",1
190,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->",1
191,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",1
192,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",1
193,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
194,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
195,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
196,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
197,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
198,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
199,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
200,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
201,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
202,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
203,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
204,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
205,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
206,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
207,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",1
208,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
209,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
210,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
211,"Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",1
212,"Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
213,"Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
214,"Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",1
215,"Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
216,"Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
217,"Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",1
218,"Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
219,"Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
220,"Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
221,"Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
222,"Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",1
223,"Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
224,"Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
225,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->",1
226,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->",1
227,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->",1
228,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",1
229,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",1
230,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
231,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
232,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
233,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
234,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
235,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
236,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
237,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->",1
238,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->",1
239,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",1
240,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",1
241,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
242,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
243,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
244,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
245,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
246,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
247,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
248,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->",1
249,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",1
250,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",1
251,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
252,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
253,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
254,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
255,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
256,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
257,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
258,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
259,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
260,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",internalArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
261,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",internalArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
262,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",1
263,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",1
264,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
265,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
266,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
267,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
268,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
269,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
270,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
271,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",1
272,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
273,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
274,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
275,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
276,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
277,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
278,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
279,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
280,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
281,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
282,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
283,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
284,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
285,"Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
286,"Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assertNotNull,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
287,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->",1
288,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
289,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
290,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
291,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
292,"Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
293,"Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
294,"Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
295,"Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
296,"Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",1
297,"Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
298,"Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
299,"Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
300,"Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
301,"Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
302,"Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
303,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
304,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
305,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
306,"Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
307,"Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
308,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",1
309,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
310,"Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
311,"@deprecated Use
 assertEquals(double expected, double actual, double delta)
 instead","@deprecated Use
 assertEquals(String message, double expected, double actual, double delta)
 instead",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",1
312,"Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
313,"Asserts that an object isn't null. If it is an AssertionError is
 thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null","Asserts that an object isn't null. If it is an AssertionError is
 thrown.
 @param object Object to check or null",assertNotNull,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
314,"Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown with the
 given message.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.",assertNotSame,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",1
315,"Sets up the fixture, for example, open a network connection.
 This method is called before a test is executed.","Tears down the fixture, for example, close a network connection.
 This method is called after a test is executed.",setUp,tearDown,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void setUp() throws Exception"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void tearDown() throws Exception"", ""entityFile"": ""TestCase.java""} -->",1
316,"Sets the name of a TestCase
 @param name the name to set","Sets the name of the suite.
 @param name the name to set",setName,setName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void setName(String name)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void setName(String name)"", ""entityFile"": ""TestSuite.java""} -->",1
317,"Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
318,"Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
319,"Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
320,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",1
321,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
322,"Asserts that two objects refer to the same object. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected the expected object
 @param actual the object to compare to expected","Asserts that two objects refer to the same object. If they are not the
 same, an AssertionError without a message is thrown.
 @param expected the expected object
 @param actual the object to compare to expected",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
323,"Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError is thrown with the
 given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected","Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError without a message is
 thrown.
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected",assertNotSame,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
324,"Adds to errors if the test class has more than one constructor
 (do not override)","Adds to errors if the test class's single constructor takes
 parameters (do not override)",validateOnlyOneConstructor,validateZeroArgConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateOnlyOneConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateZeroArgConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",1
325,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",1
326,"Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 information about the matcher and failing value. Example:
 assertThat(0, is(1)); // fails:
 // failure message:
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 the reason and information about the matcher and failing value. Example:
 assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
 // failure message:
 // Help! Integers don't work
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param reason additional information about the error
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",assertThat,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(String reason, T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",1
327,"Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does, the exception object is returned. If it does not throw an exception, an
 AssertionError is thrown. If it throws the wrong type of exception, an {@code
 AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
 be obtained by calling AssertionError#getCause.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @return the exception thrown by runnable
 @since 4.13",assertThrows,expectThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",1
328,"If called with an expression evaluating to false, the test will halt and be ignored.","If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.",assumeTrue,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(boolean b)"", ""entityFile"": ""Assume.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->",1
329,"@param target the test case instance
 @return a list of MethodRules that should be applied when executing this
 test","@param target the test case instance
 @return a list of TestRules that should be applied when executing this
 test",rules,getTestRules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<MethodRule> rules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<TestRule> getTestRules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",1
330,"Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(1, is(1)); // passes
 foo(); // will execute
 assumeThat(0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(""alwaysPasses"", 1, is(1)); // passes
 foo(); // will execute
 assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",assumeThat,assumeThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(String message, T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->",1
331,"Run the tests contained in classes. Write feedback while the tests
 are running and write stack traces for all failed tests after all tests complete. This is
 similar to #main(String[]), but intended to be used programmatically.
 @param classes Classes in which to find tests
 @return a Result describing the details of the test run and the failed tests.","Run the tests contained in classes. Write feedback while the tests
 are running and write stack traces for all failed tests after all tests complete. This is
 similar to #main(String[]), but intended to be used programmatically.
 @param computer Helps construct Runners from classes
 @param classes Classes in which to find tests
 @return a Result describing the details of the test run and the failed tests.",runClasses,runClasses,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Result runClasses(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Result runClasses(Computer computer, Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",1
332,"Constructs a TestSuite from the given class with the given name.
 @see TestSuite#TestSuite(Class)","Constructs a TestSuite from the given array of classes with the given name.
 @see TestSuite#TestSuite(Class[])",TestSuite,TestSuite,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public TestSuite(Class<? extends TestCase> theClass, String name)"", ""entityFile"": ""TestSuite.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public TestSuite(Class<? extends TestCase>[] classes, String name)"", ""entityFile"": ""TestSuite.java""} -->",1
333,"An assumption exception with the given actual value and a matcher describing
 the expectation that failed.","An assumption exception with a message with the given actual value and a
 matcher describing the expectation that failed.",AssumptionViolatedException,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(T actual, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",1
334,"Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.","Run all the tests in classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",run,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Computer computer, Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",1
335,"Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.","Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.",run,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""JUnitCore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""MaxCore.java""} -->",1
336,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ",assertTrue,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
337,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
338,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
339,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
340,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertTrue,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
341,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertFalse,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",1
342,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",1
343,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
344,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
345,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
346,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
347,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
348,"Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
349,"Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",1
350,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",1
351,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
352,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
353,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
354,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
355,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->",1
356,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
357,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
358,"Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
359,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",1
360,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
361,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
362,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",1
363,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
364,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",1
365,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertNull,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",1
366,"Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",assertSame,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
367,"Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown with the
 given message.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.
 ",assertNotSame,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",1
368,"Construct a new InitializationError with one or more
 errors errors as causes
 ","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",InitializationError,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(List<Throwable> errors)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
369,"Returns a Statement: run all non-overridden @After
 methods on this class and superclasses before running next; all
 After methods are always executed: exceptions thrown by previous steps
 are combined, if necessary, with exceptions from After methods into a
 MultipleFailureException.","An assumption exception with the given actual value and a matcher describing
 the expectation that failed.",withAfters,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(T actual, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
370,"Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.",expectCause,getAnnotatedMethods,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->",0
371,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",assertEquals,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
372,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that an object isn't null. If it is an AssertionError is
 thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",hasItems,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
373,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
374,"Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError is thrown with the
 given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected",expectCause,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
375,"Asserts that two longs are not equals. If they are, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two objects refer to the same object. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected the expected object
 @param actual the object to compare to expected",assertNotEquals,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
376,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the test will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 (This remains for binary compatibility with clients of JUnit 4.3)
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",withLookingForStuckThread,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name)"", ""entityFile"": ""Description.java""} -->",0
377,"Returns the formatted string of the elapsed time.
 Duplicated from BaseTestRunner. Fix it.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",elapsedTimeAsString,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""ResultPrinter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
378,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that an object isn't null. If it is an AssertionError is
 thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",assertFalse,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
379,"Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",expectCause,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
380,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",org.junit,assertSame,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
381,"Returns true if this member is public, false if not.","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",isPublic,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isPublic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(String className, String name, Serializable uniqueId)"", ""entityFile"": ""Description.java""} -->",0
382,"Adds to errors if this method:
 is not public, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",validatePublicVoid,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoid(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->",0
383,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@return If this describes a method invocation,
 the class of the test instance.",MethodValidator,getTestClass,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Class<?> getTestClass()"", ""entityFile"": ""Description.java""} -->",0
384,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
385,"Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","@param target the test case instance
 @return a list of TestRules that should be applied when executing this
 test",assertNotEquals,getTestRules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<TestRule> getTestRules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
386,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",hasItems,classes,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",0
387,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Asserts that an object isn't null. If it is an AssertionError is
 thrown.
 @param object Object to check or null",org.junit,assertNotNull,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
388,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Adds to errors if the test class's single constructor takes
 parameters (do not override)",assertNotEquals,validateZeroArgConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateZeroArgConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
389,"Returns a Statement: run all non-overridden @BeforeClass methods on this class
 and superclasses before executing statement; if any throws an
 Exception, stop execution and pass the exception on.","An assumption exception with the given actual value and a matcher describing
 the expectation that failed.",withBeforeClasses,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBeforeClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(T actual, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
390,"Adds a failure to the table if matcher does not match value.
 Execution continues, but the test will fail at the end if the match fails.
 @deprecated use org.hamcrest.junit.ErrorCollector.checkThat()",Invoked when a test is skipped due to a failed assumption.,checkThat,skipped,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void checkThat(final T value, final Matcher<T> matcher)"", ""entityFile"": ""ErrorCollector.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->",0
391,"Returns true if this member is static, false if not.","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 information about the matcher and failing value. Example:
 assertThat(0, is(1)); // fails:
 // failure message:
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",isStatic,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isStatic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
392,"@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.","Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",hasItem,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
393,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","@param target the test case instance
 @return a list of MethodRules that should be applied when executing this
 test",assertArrayEquals,rules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<MethodRule> rules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
394,"Asserts that a condition is true. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked","Adds to errors if the test class has more than one constructor
 (do not override)",assertTrue,validateOnlyOneConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateOnlyOneConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
395,"Modifies the method-running Statement to implement an additional
 test-running rule.
 @param base The Statement to be modified
 @param method The method to be run
 @param target The object on which the method will be run.
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",apply,JUnit4ClassRunner,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, FrameworkMethod method, Object target)"", ""entityFile"": ""MethodRule.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->",0
396,Invoked when a test is skipped due to a failed assumption.,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",skipped,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
397,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Asserts that an object isn't null. If it is an AssertionError is
 thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",expect,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
398,"Returns a new builder for building an instance.
 @since 4.12","Asserts that a condition is true. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked
 ",builder,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
399,"Matches if the result has one or more failures, and at least one of them
 contains string
 ","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",hasFailureContaining,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<PrintableResult> hasFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
400,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run",assertNotEquals,classWithoutSuiteMethod,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->",0
401,"Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","If called with an expression evaluating to false, the test will halt and be ignored.",classWithoutSuiteMethod,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(boolean b)"", ""entityFile"": ""Assume.java""} -->",0
402,"Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }","Called by this class and subclasses once the runners making up the suite have been determined
 @param klass root of the suite
 @param runners for each class in the suite, a Runner",SuiteMethod,Suite,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SuiteMethod"", ""entityFile"": ""SuiteMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError"", ""entityFile"": ""Suite.java""} -->",0
403,"An assumption exception with a message with the given actual value and a
 matcher describing the expectation that failed.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",AssumptionViolatedException,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",0
404,"This method does nothing. Don't use it.
 @deprecated AssumptionViolatedExceptions are handled by default since
 JUnit 4.12. Just like in JUnit &lt;= 4.10.","Sets the name of the suite.
 @param name the name to set",handleAssumptionViolatedExceptions,setName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssumptionViolatedExceptions()"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void setName(String name)"", ""entityFile"": ""TestSuite.java""} -->",0
405,"Modifies the method-running Statement to implement an additional
 test-running rule.
 @param base The Statement to be modified
 @param method The method to be run
 @param target The object on which the method will be run.
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",apply,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, FrameworkMethod method, Object target)"", ""entityFile"": ""MethodRule.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->",0
406,"Returns true if this member is public, false if not.","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",isPublic,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isPublic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
407,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.",ClassRoadie,run,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""MaxCore.java""} -->",0
408,"Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",0
409,"Creates a Timeout that will timeout a test after the
 given duration, in seconds.
 @since 4.12","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values",seconds,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout seconds(long seconds)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
410,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",FailedBefore,assertArrayEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
411,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.",assertNotEquals,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->",0
412,"Provides implementations of org.junit.runner.Runner
 @since 4.0","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",org.junit.internal.runners,assertArrayEquals,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit.internal.runners"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
413,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the rule will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",withLookingForStuckThread,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
414,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.",Counts the number of test cases that will be run by this test.,AssumptionViolatedException,countTestCases,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public abstract int countTestCases()"", ""entityFile"": ""Test.java""} -->",0
415,"@return A matcher that delegates to throwableMatcher and in addition
 appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",isThrowable,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
416,"Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Called by this class and subclasses once the runners making up the suite have been determined
 @param klass root of the suite
 @param runners for each class in the suite, a Runner",expectMessage,Suite,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError"", ""entityFile"": ""Suite.java""} -->",0
417,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",assertEquals,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
418,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
419,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values",both,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
420,"Asserts that two objects refer to the same object. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected the expected object
 @param actual the object to compare to expected","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",assertSame,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
421,"Returns true if this member is static, false if not.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",isStatic,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isStatic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",0
422,"Construct a new InitializationError with one cause
 with message string","Asserts that two objects refer to the same object. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected the expected object
 @param actual the object to compare to expected",InitializationError,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
423,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertNotEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
424,Counts the number of test cases that will be run by this test.,"Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value",countTestCases,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public abstract int countTestCases()"", ""entityFile"": ""Test.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
425,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",JUnit4ClassRunner,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
426,"Asserts that two longs are not equals. If they are, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",0
427,"Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertSame,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
428,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that an object isn't null. If it is an AssertionError is
 thrown.
 @param object Object to check or null",AssumptionViolatedException,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
429,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
430,"Returns a new builder for building an instance of TemporaryFolder.
 @since 4.13","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",builder,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",0
431,"Adds a failure with the given reason
 to the table if matcher does not match value.
 Execution continues, but the test will fail at the end if the match fails.
 @deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",checkThat,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void checkThat(final String reason, final T value, final Matcher<T> matcher)"", ""entityFile"": ""ErrorCollector.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
432,"Returns a Statement: run all non-overridden @AfterClass methods on this class
 and superclasses before executing statement; all AfterClass methods are
 always executed: exceptions thrown by previous steps are combined, if
 necessary, with exceptions from AfterClass methods into a
 org.junit.runners.model.MultipleFailureException.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",withAfterClasses,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfterClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
433,"Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
434,"Called by this class and subclasses once the runners making up the suite have been determined
 @param klass root of the suite
 @param runners for each class in the suite, a Runner","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",Suite,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError"", ""entityFile"": ""Suite.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
435,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",both,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
436,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",both,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
437,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.",assertArrayEquals,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->",0
438,"Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 the reason and information about the matcher and failing value. Example:
 assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
 // failure message:
 // Help! Integers don't work
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param reason additional information about the error
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",assertThat,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(String reason, T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
439,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run",AssumptionViolatedException,classWithoutSuiteMethod,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->",0
440,"Construct a new InitializationError with one cause
 with message string","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",InitializationError,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->",0
441,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","An exception class used to implement assumptions (state in which a given test
 is meaningful and should or should not be executed). A test for which an assumption
 fails should not generate a test case failure.
 @see org.junit.Assume",AssumptionViolatedException,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AssumptionViolatedException"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
442,"Asserts that a condition is false. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does, the exception object is returned. If it does not throw an exception, an
 AssertionError is thrown. If it throws the wrong type of exception, an {@code
 AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
 be obtained by calling AssertionError#getCause.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @return the exception thrown by runnable
 @since 4.13",assertFalse,expectThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
443,"Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(1, is(1)); // passes
 foo(); // will execute
 assumeThat(0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assumeThat,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
444,"Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
445,"Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 information about the matcher and failing value. Example:
 assertThat(0, is(1)); // fails:
 // failure message:
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",assertEquals,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
446,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",0
447,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }","Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",expectMessage,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
448,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
449,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
450,"Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name","Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError without a message is
 thrown.
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected",createTestDescription,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(String className, String name, Serializable uniqueId)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
451,"Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.","@deprecated Use
 assertEquals(double expected, double actual, double delta)
 instead",assertSame,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",0
452,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Constructs a TestSuite from the given class with the given name.
 @see TestSuite#TestSuite(Class)",MethodValidator,TestSuite,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public TestSuite(Class<? extends TestCase> theClass, String name)"", ""entityFile"": ""TestSuite.java""} -->",0
453,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",TestMethod,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
454,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
455,"Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
456,"Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",getAnnotatedFields,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
457,"@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.","@return If this describes a method invocation,
 the name of the method (or null if not)",hasItem,getMethodName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->",0
458,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",both,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
459,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",createSuiteDescription,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
460,"Matches if the result has exactly one failure, and it contains string","Returns a Statement: run all non-overridden @AfterClass methods on this class
 and superclasses before executing statement; all AfterClass methods are
 always executed: exceptions thrown by previous steps are combined, if
 necessary, with exceptions from AfterClass methods into a
 org.junit.runners.model.MultipleFailureException.",hasSingleFailureContaining,withAfterClasses,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Object> hasSingleFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfterClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->",0
461,"@param target the test case instance
 @return a list of TestRules that should be applied when executing this
 test","Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(""alwaysPasses"", 1, is(1)); // passes
 foo(); // will execute
 assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",getTestRules,assumeThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<TestRule> getTestRules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(String message, T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->",0
462,"This method does nothing. Don't use it.
 @deprecated AssumptionViolatedExceptions are handled by default since
 JUnit 4.12. Just like in JUnit &lt;= 4.10.","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.",handleAssumptionViolatedExceptions,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssumptionViolatedExceptions()"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""TestCase.java""} -->",0
463,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }","Modifies the method-running Statement to implement this
 test-running rule.
 @param base The Statement to be modified
 @param description A Description of the test implemented in base
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.",expectMessage,apply,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, Description description)"", ""entityFile"": ""TestRule.java""} -->",0
464,"Returns a Statement: run all non-overridden @AfterClass methods on this class
 and superclasses before executing statement; all AfterClass methods are
 always executed: exceptions thrown by previous steps are combined, if
 necessary, with exceptions from AfterClass methods into a
 org.junit.runners.model.MultipleFailureException.","Asserts that a condition is false. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked",withAfterClasses,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfterClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
465,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Returns the formatted string of the elapsed time.
 Duplicated from BaseTestRunner. Fix it.",TestClass,elapsedTimeAsString,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""ResultPrinter.java""} -->",0
466,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
467,"Returns the formatted string of the elapsed time.
 Duplicated from BaseTestRunner. Fix it.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown with the
 given message.",elapsedTimeAsString,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""ResultPrinter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
468,"Adds to errors if the test class has more than one constructor
 (do not override)","Returns a Statement: run all non-overridden @Before
 methods on this class and superclasses before running next; if
 any throws an Exception, stop execution and pass the exception on.",validateOnlyOneConstructor,withBefores,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateOnlyOneConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
469,"Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",expectMessage,internalArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
470,"Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
471,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",both,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""TestCase.java""} -->",0
472,"An assumption exception with the given actual value and a matcher describing
 the expectation that failed.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",AssumptionViolatedException,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(T actual, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
473,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Provides implementations of org.junit.runner.Runner
 @since 4.0",MethodValidator,org.junit.internal.runners,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodValidator"", ""entityFile"": ""MethodValidator.java""} -->","<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit.internal.runners"", ""entityFile"": ""package-info.java""} -->",0
474,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",AssumptionViolatedException,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(String className, String name, Serializable uniqueId)"", ""entityFile"": ""Description.java""} -->",0
475,"Returns a new fresh folder with the given name(s) under the temporary
 folder.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",newFolder,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder(String... folderNames) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
476,"Construct a new InitializationError with one or more
 errors errors as causes
 ","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",InitializationError,TestClass,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(List<Throwable> errors)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->",0
477,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",AssumptionViolatedException,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
478,"Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","@return If this describes a method invocation,
 the class of the test instance.",createTestDescription,getTestClass,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Class<?> getTestClass()"", ""entityFile"": ""Description.java""} -->",0
479,"@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.",Counts the number of test cases that will be run by this test.,hasItem,countTestCases,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public abstract int countTestCases()"", ""entityFile"": ""Test.java""} -->",0
480,"Adds to errors if the test class has more than one constructor
 (do not override)","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",validateOnlyOneConstructor,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateOnlyOneConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
481,"Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
482,"Validates annotation on the given field.
 @param field that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12","Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",validateAnnotatedField,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedField(FrameworkField field)"", ""entityFile"": ""AnnotationValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
483,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
484,"Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",SuiteMethod,assertSame,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SuiteMethod"", ""entityFile"": ""SuiteMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
485,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",getAnnotatedMethods,ClassRoadie,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",0
486,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.",createSuiteDescription,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
487,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Returns a new builder for building an instance of TemporaryFolder.
 @since 4.13",org.junit,builder,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""TemporaryFolder.java""} -->",0
488,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",expectMessage,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",0
489,"Matches if the result has one or more failures, and at least one of them
 contains string
 ","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",hasFailureContaining,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<PrintableResult> hasFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
490,"@return A matcher matching any collection containing an element matching elementMatcher
 @deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",hasItem,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",0
491,"Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }","Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the rule will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.",SuiteMethod,withLookingForStuckThread,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SuiteMethod"", ""entityFile"": ""SuiteMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""Timeout.java""} -->",0
492,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }","@return If this describes a method invocation,
 the name of the method (or null if not)",expectMessage,getMethodName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->",0
493,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.",assertEquals,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
494,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",validatePublicVoidNoArg,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",0
495,"Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run","Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError without a message is
 thrown.
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected",classes,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
496,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",FailedBefore,assertNotEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
497,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that an object is null. If it is not
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
498,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.",AssumptionViolatedException,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""MaxCore.java""} -->",0
499,"Invoked when a test is skipped due to a failed assumption.
 @deprecated use #skipped(AssumptionViolatedException, Description)","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",skipped,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
500,"This is useful for fluently combining matchers where either may pass, for example:
 assertThat(string, either(containsString(""a"")).or(containsString(""b"")));
 @deprecated Please use CoreMatchers#either(Matcher) instead.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",either,ClassRoadie,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ClassRoadie"", ""entityFile"": ""ClassRoadie.java""} -->",0
501,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",expectMessage,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
502,"Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.","Adds to errors if the test class's single constructor takes
 parameters (do not override)",getAnnotatedFields,validateZeroArgConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateZeroArgConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
503,"@return If this describes a method invocation,
 the name of the method (or null if not)","Asserts that a condition is false. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked",getMethodName,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
504,"An assumption exception with a message with the given actual value and a
 matcher describing the expectation that failed.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.
 ",AssumptionViolatedException,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
505,"Modifies the method-running Statement to implement this
 test-running rule.
 @param base The Statement to be modified
 @param description A Description of the test implemented in base
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.","Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",apply,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, Description description)"", ""entityFile"": ""TestRule.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
506,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Tears down the fixture, for example, close a network connection.
 This method is called after a test is executed.",assertArrayEquals,tearDown,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void tearDown() throws Exception"", ""entityFile"": ""TestCase.java""} -->",0
507,"Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Sets the name of a TestCase
 @param name the name to set",assertNotEquals,setName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void setName(String name)"", ""entityFile"": ""TestCase.java""} -->",0
508,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.
 ","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, char[] expecteds, char[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
509,"Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.",expectMessage,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->",0
510,"Validates annotation on the given method.
 @param method that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12","Asserts that two objects are not equals. If they are, an
 AssertionError without a message is thrown. If
 unexpected and actual are null,
 they are considered equal.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",validateAnnotatedMethod,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedMethod(FrameworkMethod method)"", ""entityFile"": ""AnnotationValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
511,"Returns the formatted string of the elapsed time. Duplicated from
 BaseTestRunner. Fix it.","An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.",elapsedTimeAsString,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""TextListener.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
512,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError is thrown with the
 given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected",createSuiteDescription,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
513,"@return If this describes a method invocation,
 the class of the test instance.","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",getTestClass,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Class<?> getTestClass()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
514,"Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Returns a Statement: run all non-overridden @Before
 methods on this class and superclasses before running next; if
 any throws an Exception, stop execution and pass the exception on.",expectCause,withBefores,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
515,"Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13",assertSame,assertThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
516,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two objects refer to the same object. If they are not the
 same, an AssertionError without a message is thrown.
 @param expected the expected object
 @param actual the object to compare to expected",AssumptionViolatedException,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
517,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",0
518,"Specifies the time to wait before timing out the test.
 If this is not called, or is called with a
 timeout of 0, the returned Timeout
 rule instance will cause the tests to wait forever to
 complete, however the tests will still launch from a
 separate thread. This can be useful for disabling timeouts
 in environments where they are dynamically set based on
 some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 the reason and information about the matcher and failing value. Example:
 assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
 // failure message:
 // Help! Integers don't work
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param reason additional information about the error
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",withTimeout,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(String reason, T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
519,"Called by this class and subclasses once the classes making up the suite have been determined
 @param builder builds runners for classes in the suite
 @param klass the root of the suite
 @param suiteClasses the classes in the suite","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",Suite,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses) throws InitializationError"", ""entityFile"": ""Suite.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""TestCase.java""} -->",0
520,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.",createSuiteDescription,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""MaxCore.java""} -->",0
521,"Asserts that two longs are not equals. If they are, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
522,"@return If this describes a method invocation,
 the name of the class of the test instance","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 the reason and information about the matcher and failing value. Example:
 assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
 // failure message:
 // Help! Integers don't work
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param reason additional information about the error
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",getClassName,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getClassName()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(String reason, T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
523,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the test will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.",withLookingForStuckThread,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""TestCase.java""} -->",0
524,Invoked when a test is skipped due to a failed assumption.,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",skipped,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(long nanos, AssumptionViolatedException e, Description description)"", ""entityFile"": ""Stopwatch.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
525,Returns a new fresh folder with a random name under the temporary folder.,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",newFolder,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
526,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Construct a new InitializationError with one or more
 errors errors as causes
 ",org.junit,InitializationError,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(List<Throwable> errors)"", ""entityFile"": ""InitializationError.java""} -->",0
527,Returns a new fresh folder with a random name under the temporary folder.,"Invoked when a test is skipped due to a failed assumption.
 @deprecated use #skipped(AssumptionViolatedException, Description)",newFolder,skipped,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->",0
528,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assertEquals,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
529,"Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name","Asserts that two objects refer to the same object. If they are not the
 same, an AssertionError without a message is thrown.
 @param expected the expected object
 @param actual the object to compare to expected",createTestDescription,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(String className, String name, Serializable uniqueId)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
530,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the test will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",withLookingForStuckThread,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->",0
531,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertEquals,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
532,"Invoked when a test is skipped due to a failed assumption.
 @deprecated use #skipped(AssumptionViolatedException, Description)","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",skipped,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(org.junit.internal.AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
533,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.",TestClass,hasItem,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->",0
534,"This method does nothing. Don't use it.
 @deprecated AssumptionViolatedExceptions are handled by default since
 JUnit 4.12. Just like in JUnit &lt;= 4.10.","Specifies the time to wait before timing out the test.
 If this is not called, or is called with a
 timeout of 0, the returned Timeout
 rule instance will cause the tests to wait forever to
 complete, however the tests will still launch from a
 separate thread. This can be useful for disabling timeouts
 in environments where they are dynamically set based on
 some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.",handleAssumptionViolatedExceptions,withTimeout,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssumptionViolatedExceptions()"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""Timeout.java""} -->",0
535,"Creates a Timeout that will timeout a test after the
 given duration, in seconds.
 @since 4.12","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",seconds,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout seconds(long seconds)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
536,"@return If this describes a method invocation,
 the name of the method (or null if not)","Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.",getMethodName,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""MaxCore.java""} -->",0
537,"Asserts that a condition is true. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked
 ","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",assertTrue,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
538,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
539,"Returns true if this member is static, false if not.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",isStatic,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isStatic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
540,"@return A matcher that delegates to exceptionMatcher and in addition
 appends the stacktrace of the actual Exception in case of a mismatch.",Counts the number of test cases that will be run by this test.,isException,countTestCases,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isException(Matcher<T> exceptionMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int countTestCases()"", ""entityFile"": ""TestSuite.java""} -->",0
541,"Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",SuiteMethod,assertArrayEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SuiteMethod"", ""entityFile"": ""SuiteMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
542,"Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assertThrows,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
543,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }",Invoked when a test is skipped due to a failed assumption.,expectMessage,skipped,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(long nanos, AssumptionViolatedException e, Description description)"", ""entityFile"": ""Stopwatch.java""} -->",0
544,"Validates annotation on the given field.
 @param field that is being validated
 @return A list of exceptions. Default behavior is to return an empty list.
 @since 4.12","
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ",validateAnnotatedField,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<Exception> validateAnnotatedField(FrameworkField field)"", ""entityFile"": ""AnnotationValidator.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->",0
545,"Returns the formatted string of the elapsed time. Duplicated from
 BaseTestRunner. Fix it.","Returns a new builder for building an instance.
 @since 4.12",elapsedTimeAsString,builder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""TextListener.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""Timeout.java""} -->",0
546,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.
 ","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->",0
547,"Creates a Timeout that will timeout a test after the
 given duration, in seconds.
 @since 4.12","Returns a Statement: run all non-overridden @Before
 methods on this class and superclasses before running next; if
 any throws an Exception, stop execution and pass the exception on.",seconds,withBefores,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout seconds(long seconds)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
548,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(""alwaysPasses"", 1, is(1)); // passes
 foo(); // will execute
 assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",assertArrayEquals,assumeThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(String message, T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->",0
549,"Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError without a message is
 thrown.
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected","@param target the test case instance
 @return a list of MethodRules that should be applied when executing this
 test",assertNotSame,rules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<MethodRule> rules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
550,"Adds to errors if this method:
 is not public, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).",Returns a new fresh folder with a random name under the temporary folder.,validatePublicVoid,newFolder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoid(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFolder() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",0
551,"Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated.
 @since 4.12","Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",getAnnotatedFields,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
552,"@deprecated Use
 assertEquals(double expected, double actual, double delta)
 instead","Sets the name of a TestCase
 @param name the name to set",assertEquals,setName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void setName(String name)"", ""entityFile"": ""TestCase.java""} -->",0
553,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assertEquals,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""TestCase.java""} -->",0
554,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","This method does nothing. Don't use it.
 @deprecated AssertionErrors are handled by default since JUnit 4.12. Just
 like in JUnit &lt;= 4.10.",validatePublicVoidNoArg,handleAssertionErrors,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssertionErrors()"", ""entityFile"": ""ExpectedException.java""} -->",0
555,"Returns true if this member is static, false if not.","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",isStatic,JUnit4ClassRunner,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isStatic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""JUnit4ClassRunner"", ""entityFile"": ""JUnit4ClassRunner.java""} -->",0
556,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",createSuiteDescription,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
557,"Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",assertEquals,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
558,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",AssumptionViolatedException,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",0
559,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertEquals,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
560,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the test will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",withLookingForStuckThread,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
561,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.",assertArrayEquals,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
562,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertNull,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",0
563,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Sets up the fixture, for example, open a network connection.
 This method is called before a test is executed.",assertArrayEquals,setUp,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void setUp() throws Exception"", ""entityFile"": ""TestCase.java""} -->",0
564,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",AssumptionViolatedException,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta)"", ""entityFile"": ""Assert.java""} -->",0
565,"Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(int[] expecteds, int[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
566,"This is useful for fluently combining matchers where either may pass, for example:
 assertThat(string, either(containsString(""a"")).or(containsString(""b"")));
 @deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that two doubles are equal concerning a delta. If they are not
 an AssertionFailedError is thrown with the given message. If the expected
 value is infinity then the delta value is ignored.",either,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
567,"Returns a Statement: run all non-overridden @BeforeClass methods on this class
 and superclasses before executing statement; if any throws an
 Exception, stop execution and pass the exception on.","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",withBeforeClasses,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBeforeClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
568,"Asserts that an object isn't null. If it is an AssertionError is
 thrown.
 @param object Object to check or null","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13",assertNotNull,assertThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
569,"Returns true if this member is public, false if not.","Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }",isPublic,expectMessage,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isPublic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->",0
570,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Constructs a TestSuite from the given array of classes with the given name.
 @see TestSuite#TestSuite(Class[])",MethodRoadie,TestSuite,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public TestSuite(Class<? extends TestCase>[] classes, String name)"", ""entityFile"": ""TestSuite.java""} -->",0
571,"Returns the annotation of type annotationType on this method, if
 one exists.","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",getAnnotation,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T getAnnotation(Class<T> annotationType)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
572,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null",getAnnotatedMethods,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
573,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored. NaNs are considered
 equal: assertEquals(Float.NaN, Float.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",MethodRoadie,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
574,"Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(1, is(1)); // passes
 foo(); // will execute
 assumeThat(0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",assumeThat,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
575,"@return A matcher that delegates to throwableMatcher and in addition
 appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.",isThrowable,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
576,"Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.","If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.",assertEquals,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->",0
577,"Verify that your code throws an exception whose message contains
 a specific text.
 @Test
 public void throwsExceptionWhoseMessageContainsSpecificText() {
 thrown.expectMessage(&quot;happened&quot;);
 throw new NullPointerException(&quot;What happened?&quot;);
 }","Returns a new builder for building an instance.
 @since 4.12",expectMessage,builder,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(String substring)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""Timeout.java""} -->",0
578,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","@deprecated Use
 assertEquals(String message, double expected, double actual, double delta)
 instead",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",0
579,Returns a new fresh file with the given name under the temporary folder.,"Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value",newFile,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile(String fileName) throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
580,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.",org.junit,getAnnotatedFields,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->",0
581,"Adds a failure to the table if matcher does not match value.
 Execution continues, but the test will fail at the end if the match fails.
 @deprecated use org.hamcrest.junit.ErrorCollector.checkThat()","Asserts that a condition is true. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked
 ",checkThat,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void checkThat(final T value, final Matcher<T> matcher)"", ""entityFile"": ""ErrorCollector.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
582,"Specifies whether to look for a stuck thread. If a timeout occurs and this
 feature is enabled, the rule will look for a thread that appears to be stuck
 and dump its backtrace. This feature is experimental. Behavior may change
 after the 4.12 release in response to feedback.
 @param enable true to enable the feature
 @return this for method chaining.","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",withLookingForStuckThread,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withLookingForStuckThread(boolean enable)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
583,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
584,"Matches if the result has exactly one failure, and it contains string","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",hasSingleFailureContaining,MethodRoadie,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Object> hasSingleFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->",0
585,"Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
586,"Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assertNull,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
587,"@return If this describes a method invocation,
 the name of the class of the test instance","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",getClassName,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getClassName()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",0
588,"Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value","Run all the tests contained in request.
 @param request the request describing tests
 @return a Result describing the details of the test run and the failed tests.",assertEquals,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Request request)"", ""entityFile"": ""JUnitCore.java""} -->",0
589,"@return A matcher that delegates to exceptionMatcher and in addition
 appends the stacktrace of the actual Exception in case of a mismatch.","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",isException,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isException(Matcher<T> exceptionMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
590,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",getAnnotatedMethods,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
591,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does, the exception object is returned. If it does not throw an exception, an
 AssertionError is thrown. If it throws the wrong type of exception, an {@code
 AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
 be obtained by calling AssertionError#getCause.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @return the exception thrown by runnable
 @since 4.13",assertEquals,expectThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
592,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",assertNull,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
593,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null",assertArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
594,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run",getAnnotatedMethods,classWithoutSuiteMethod,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->",0
595,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",hasItems,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",0
596,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.
 ",assertFalse,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
597,"Construct a new InitializationError with one cause
 with message string","@return A matcher matching any collection containing element
 @deprecated Please use CoreMatchers#hasItem(Object) instead.",InitializationError,hasItem,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(T element)"", ""entityFile"": ""JUnitMatchers.java""} -->",0
598,"Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 the reason and information about the matcher and failing value. Example:
 assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
 // failure message:
 // Help! Integers don't work
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param reason additional information about the error
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",assertEquals,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(String reason, T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
599,Counts the number of test cases that will be run by this test.,"Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",countTestCases,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int countTestCases()"", ""entityFile"": ""TestSuite.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
600,"Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.",classes,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
601,"Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown. If the expected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertEquals(Double.NaN, Double.NaN, *) passes
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",aClass,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
602,"Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.","If called with an expression evaluating to false, the test will halt and be ignored.",assertEquals,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(boolean b)"", ""entityFile"": ""Assume.java""} -->",0
603,"@return A matcher matching any collection in which every element matches elementMatcher
 @deprecated Please use CoreMatchers#everyItem(Matcher) instead.","Asserts that two floats are not equal to within a positive delta.
 If they are, an AssertionError is thrown. If the unexpected
 value is infinity then the delta value is ignored.NaNs are considered
 equal: assertNotEquals(Float.NaN, Float.NaN, *) fails
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.",everyItem,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(float unexpected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
604,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","@deprecated Use
 assertEquals(double expected, double actual, double delta)
 instead",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",0
605,"Returns a new builder for building an instance.
 @since 4.12",Counts the number of test cases that will be run by this test.,builder,countTestCases,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int countTestCases()"", ""entityFile"": ""TestSuite.java""} -->",0
606,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.",assertArrayEquals,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
607,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does, the exception object is returned. If it does not throw an exception, an
 AssertionError is thrown. If it throws the wrong type of exception, an {@code
 AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
 be obtained by calling AssertionError#getCause.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @return the exception thrown by runnable
 @since 4.13",hasItems,expectThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
608,"Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",aClass,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
609,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","@return If this describes a method invocation,
 the class of the test instance.",expect,getTestClass,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Class<?> getTestClass()"", ""entityFile"": ""Description.java""} -->",0
610,"@return A matcher that delegates to exceptionMatcher and in addition
 appends the stacktrace of the actual Exception in case of a mismatch.","Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }
 @since 4.0",isException,AllTests,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isException(Matcher<T> exceptionMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AllTests"", ""entityFile"": ""AllTests.java""} -->",0
611,"Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 information about the matcher and failing value. Example:
 assertThat(0, is(1)); // fails:
 // failure message:
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",assertEquals,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
612,"Create a Request that, when processed, will run all the tests
 in a set of classes with the default Computer.
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run","Adds to errors if the test class has more than one constructor
 (do not override)",classes,validateOnlyOneConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Class<?>... classes)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateOnlyOneConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
613,"Specifies the time to wait before timing out the test.
 If this is not called, or is called with a timeout of
 0, the returned Statement will wait forever for the
 test to complete, however the test will still launch from a separate
 thread. This can be useful for disabling timeouts in environments
 where they are dynamically set based on some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.","Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()",withTimeout,expectMessage,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""FailOnTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->",0
614,"Runner for use with JUnit 3.8.x-style AllTests classes
 (those that only implement a static suite()
 method). For example:
 @RunWith(AllTests.class)
 public class ProductTests {
 public static junit.framework.Test suite() {
 ...
 }
 }","Asserts that a condition is false. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked",SuiteMethod,assertFalse,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SuiteMethod"", ""entityFile"": ""SuiteMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
615,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",MethodRoadie,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
616,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",internalArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private static void internalArrayEquals(String message, Object expecteds, Object actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->",0
617,"Returns a Statement: apply all
 static fields assignable to TestRule
 annotated with ClassRule.
 @param statement the base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement","If called with an expression evaluating to false, the test will halt and be ignored.",withClassRules,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withClassRules(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(boolean b)"", ""entityFile"": ""Assume.java""} -->",0
618,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown.
 @param expected expected long value.
 @param actual actual long value",assertNotEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
619,"Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values","@deprecated Use
 assertEquals(String message, double expected, double actual, double delta)
 instead",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",0
620,"Construct a new InitializationError with one cause
 with message string","An assumption exception with a message with the given actual value and a
 matcher describing the expectation that failed.",InitializationError,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
621,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","Provides implementations of org.junit.runner.Runner
 @since 4.0",hasItems,org.junit.internal.runners,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit.internal.runners"", ""entityFile"": ""package-info.java""} -->",0
622,Returns a new fresh file with a random name under the temporary folder.,"Provides classes used to describe, collect, run and analyze multiple tests.
 @since 4.0",newFile,org.junit.runner,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit.runner"", ""entityFile"": ""package-info.java""} -->",0
623,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
624,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ",assertNull,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
625,"Returns a Statement: run all non-overridden @AfterClass methods on this class
 and superclasses before executing statement; all AfterClass methods are
 always executed: exceptions thrown by previous steps are combined, if
 necessary, with exceptions from AfterClass methods into a
 org.junit.runners.model.MultipleFailureException.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError without a message is
 thrown.
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected",withAfterClasses,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfterClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
626,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown with the
 given message.",TestMethod,assertNotSame,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestMethod"", ""entityFile"": ""TestMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
627,"Asserts that two objects are not equals. If they are, an
 AssertionError is thrown with the given message. If
 unexpected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertNotEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
628,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param uniqueId an arbitrary object used to define uniqueness (in #equals(Object)
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ",createSuiteDescription,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->",0
629,"@return If this describes a method invocation,
 the name of the method (or null if not)","Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",getMethodName,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getMethodName()"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
630,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
631,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",getAnnotatedMethods,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
632,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.
 ","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 information about the matcher and failing value. Example:
 assertThat(0, is(1)); // fails:
 // failure message:
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",assertArrayEquals,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, boolean[] expecteds, boolean[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
633,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null",assertArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, float[] expecteds, float[] actuals, float delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
634,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null",assertArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""TestCase.java""} -->",0
635,Returns a new fresh file with a random name under the temporary folder.,"Adds to errors if the test class's single constructor takes
 parameters (do not override)",newFile,validateZeroArgConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateZeroArgConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
636,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated}.
 @since 4.12","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13",getAnnotatedMethods,assertThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods()"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
637,"This is useful for fluently combining matchers where either may pass, for example:
 assertThat(string, either(containsString(""a"")).or(containsString(""b"")));
 @deprecated Please use CoreMatchers#either(Matcher) instead.","Returns a Statement: apply all
 static fields assignable to TestRule
 annotated with ClassRule.
 @param statement the base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement",either,withClassRules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withClassRules(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->",0
638,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Asserts that two longs are equal. If they are not
 an AssertionFailedError is thrown with the given message.",validatePublicVoidNoArg,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
639,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",expect,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
640,"@return A matcher matching any collection in which every element matches elementMatcher
 @deprecated Please use CoreMatchers#everyItem(Matcher) instead.",Returns a new fresh file with a random name under the temporary folder.,everyItem,newFile,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public File newFile() throws IOException"", ""entityFile"": ""TemporaryFolder.java""} -->",0
641,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",FailedBefore,assertArrayEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
642,"Returns a Statement: apply all
 static fields assignable to TestRule
 annotated with ClassRule.
 @param statement the base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values
 @deprecated use assertArrayEquals",withClassRules,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withClassRules(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
643,"Returns the annotation of type annotationType on this method, if
 one exists.","Constructs a TestSuite from the given class with the given name.
 @see TestSuite#TestSuite(Class)",getAnnotation,TestSuite,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T getAnnotation(Class<T> annotationType)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public TestSuite(Class<? extends TestCase> theClass, String name)"", ""entityFile"": ""TestSuite.java""} -->",0
644,"Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",run,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
645,"If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.","An assumption exception with a message with the given actual value and a
 matcher describing the expectation that failed.",assumeTrue,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String message, T expected, Matcher<T> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
646,"Returns the formatted string of the elapsed time. Duplicated from
 BaseTestRunner. Fix it.","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.",elapsedTimeAsString,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected String elapsedTimeAsString(long runTime)"", ""entityFile"": ""TextListener.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
647,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.","Returns a Statement: apply all non-static fields
 annotated with Rule.
 @param statement The base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement",assertEquals,withTestRules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
648,"Returns, efficiently, all the non-overridden fields in this class and its
 superclasses that are annotated with annotationClass.","Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(""alwaysPasses"", 1, is(1)); // passes
 foo(); // will execute
 assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",getAnnotatedFields,assumeThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkField> getAnnotatedFields(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(String message, T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->",0
649,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",FailedBefore,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",0
650,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Sets the name of the suite.
 @param name the name to set",validatePublicVoidNoArg,setName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void setName(String name)"", ""entityFile"": ""TestSuite.java""} -->",0
651,"Returns true if this member is public, false if not.","Asserts that two objects are not equals. If they are, an
 AssertionError is thrown with the given message. If
 unexpected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",isPublic,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isPublic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
652,"Modifies the method-running Statement to implement an additional
 test-running rule.
 @param base The Statement to be modified
 @param method The method to be run
 @param target The object on which the method will be run.
 @return a new statement, which may be the same as base,
 a wrapper around base, or a completely new Statement.","Run all the tests in classes.
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",apply,run,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Statement apply(Statement base, FrameworkMethod method, Object target)"", ""entityFile"": ""MethodRule.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
653,Counts the number of test cases that will be run by this test.,"Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",countTestCases,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public abstract int countTestCases()"", ""entityFile"": ""Test.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
654,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 Message contains: Expected: but was: object
 @param object Object to check or null","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.
 ",assertNull,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
655,"Asserts that two floats are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","An exception class used to implement assumptions (state in which a given test
 is meaningful and should or should not be executed). A test for which an assumption
 fails should not generate a test case failure.
 @see org.junit.Assume
 @since 4.12",assertEquals,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AssumptionViolatedException"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
656,"Asserts that a condition is false. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked","Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected",assertFalse,assertNotEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
657,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",both,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""TestCase.java""} -->",0
658,"Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.","@deprecated Use
 assertEquals(double expected, double actual, double delta)
 instead",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",0
659,"@param target the test case instance
 @return a list of MethodRules that should be applied when executing this
 test","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",rules,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<MethodRule> rules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
660,"An exception class used to implement assumptions (state in which a given test
 is meaningful and should or should not be executed). A test for which an assumption
 fails should not generate a test case failure.
 @see org.junit.Assume","Returns a Statement: run all non-overridden @Before
 methods on this class and superclasses before running next; if
 any throws an Exception, stop execution and pass the exception on.",AssumptionViolatedException,withBefores,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AssumptionViolatedException"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBefores(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
661,Invoked when a test is skipped due to a failed assumption.,"@param target the test case instance
 @return a list of MethodRules that should be applied when executing this
 test",skipped,rules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(long nanos, AssumptionViolatedException e, Description description)"", ""entityFile"": ""Stopwatch.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected List<MethodRule> rules(Object target)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
662,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Specifies the time to wait before timing out the test.
 If this is not called, or is called with a
 timeout of 0, the returned Timeout
 rule instance will cause the tests to wait forever to
 complete, however the tests will still launch from a
 separate thread. This can be useful for disabling timeouts
 in environments where they are dynamically set based on
 some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.",expect,withTimeout,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""Timeout.java""} -->",0
663,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
664,"Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value","Asserts that an object isn't null. If it is an AssertionError is
 thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",assertEquals,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
665,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",assertFalse,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
666,"Asserts that two floats are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Float.NaN, Float.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.","Returns a Statement: run all non-overridden @After
 methods on this class and superclasses before running next; all
 After methods are always executed: exceptions thrown by previous steps
 are combined, if necessary, with exceptions from After methods into a
 MultipleFailureException.",assertEquals,withAfters,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
667,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",FailedBefore,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
668,"Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run","Asserts that two float arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",classes,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta)"", ""entityFile"": ""Assert.java""} -->",0
669,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 information about the matcher and failing value. Example:
 assertThat(0, is(1)); // fails:
 // failure message:
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()",expect,assertThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->",0
670,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","Asserts that two double arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 @param delta the maximum delta between expecteds[i] and
 actuals[i] for which both numbers are still
 considered equal.",getAnnotatedMethods,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, double[] expecteds, double[] actuals, double delta) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
671,"Asserts that an object is null. If it isn't an AssertionError is
 thrown.
 @param object Object to check or null","Returns a Statement: run all non-overridden @After
 methods on this class and superclasses before running next; all
 After methods are always executed: exceptions thrown by previous steps
 are combined, if necessary, with exceptions from After methods into a
 MultipleFailureException.",assertNull,withAfters,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withAfters(FrameworkMethod method, Object target, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
672,"Matches if the result has one or more failures, and at least one of them
 contains string
 ","Provides classes used to describe, collect, run and analyze multiple tests.
 @since 4.0",hasFailureContaining,org.junit.runner,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<PrintableResult> hasFailureContaining(final String string)"", ""entityFile"": ""ResultMatchers.java""} -->","<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit.runner"", ""entityFile"": ""package-info.java""} -->",0
673,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Run all the tests in classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing tests
 @return a Result describing the details of the test run and the failed tests.",MethodRoadie,run,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Result run(Computer computer, Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
674,"Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""TestCase.java""} -->",0
675,"Specifies the time to wait before timing out the test.
 If this is not called, or is called with a
 timeout of 0, the returned Timeout
 rule instance will cause the tests to wait forever to
 complete, however the tests will still launch from a
 separate thread. This can be useful for disabling timeouts
 in environments where they are dynamically set based on
 some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return this for method chaining.","Returns a Statement: run all non-overridden @BeforeClass methods on this class
 and superclasses before executing statement; if any throws an
 Exception, stop execution and pass the exception on.",withTimeout,withBeforeClasses,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Builder withTimeout(long timeout, TimeUnit unit)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected Statement withBeforeClasses(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->",0
676,"Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ",assertThrows,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
677,"This method does nothing. Don't use it.
 @deprecated AssertionErrors are handled by default since JUnit 4.12. Just
 like in JUnit &lt;= 4.10.","Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(""alwaysPasses"", 1, is(1)); // passes
 foo(); // will execute
 assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",handleAssertionErrors,assumeThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException handleAssertionErrors()"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(String message, T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->",0
678,"Asserts that an object isn't null. If it is an AssertionError is
 thrown.
 @param object Object to check or null","Tears down the fixture, for example, close a network connection.
 This method is called after a test is executed.",assertNotNull,tearDown,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(Object object)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void tearDown() throws Exception"", ""entityFile"": ""TestCase.java""} -->",0
679,"Asserts that two boolean arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds boolean array with expected values.
 @param actuals boolean array with expected values.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",assertArrayEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
680,"Construct a new InitializationError with one or more
 errors errors as causes
 ","Asserts that two int arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values",InitializationError,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(List<Throwable> errors)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, int[] expecteds, int[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
681,"Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError with the given message.","Adds to errors if the test class has more than one constructor
 (do not override)",assertFalse,validateOnlyOneConstructor,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validateOnlyOneConstructor(List<Throwable> errors)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->",0
682,"Provides implementations of org.junit.runner.Runner
 @since 4.0","If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.",org.junit.internal.runners,assumeTrue,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit.internal.runners"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->",0
683,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two shorts are equal. If they are not
 an AssertionFailedError is thrown with the given message.",MethodRoadie,assertEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MethodRoadie"", ""entityFile"": ""MethodRoadie.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, short expected, short actual)"", ""entityFile"": ""Assert.java""} -->",0
684,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown with the
 given message.",getAnnotatedMethods,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
685,"Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values","Asserts that an object is null. If it is not, an AssertionError
 is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param object Object to check or null",assertArrayEquals,assertNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(byte[] expecteds, byte[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
686,"Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does, the exception object is returned. If it does not throw an exception, an
 AssertionError is thrown. If it throws the wrong type of exception, an {@code
 AssertionError} is thrown describing the mismatch; the exception that was actually thrown can
 be obtained by calling AssertionError#getCause.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @return the exception thrown by runnable
 @since 4.13",assertEquals,expectThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
687,"@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.","Asserts that two byte arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values",TestClass,assertArrayEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TestClass"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, byte[] expecteds, byte[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
688,"Adds to errors if any method in this class is annotated with
 annotation, but:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Run the tests contained in classes. Write feedback while the tests
 are running and write stack traces for all failed tests after all tests complete. This is
 similar to #main(String[]), but intended to be used programmatically.
 @param classes Classes in which to find tests
 @return a Result describing the details of the test run and the failed tests.",validatePublicVoidNoArgMethods,runClasses,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Result runClasses(Class<?>... classes)"", ""entityFile"": ""JUnitCore.java""} -->",0
689,"@return A matcher matching any collection containing every element in elements
 @deprecated Please use CoreMatchers#hasItems(Object...) instead.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",hasItems,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> hasItems(T... elements)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
690,"Verify that your code throws an exception that is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionThatCompliesWithMatcher() {
 NullPointerException e = new NullPointerException();
 thrown.expect(is(e));
 throw e;
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expect()","Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expecteds and actuals are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values",expect,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Matcher<?> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, Object[] expecteds, Object[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
691,"Asserts that a condition is false. If it isn't it throws an
 AssertionError without a message.
 @param condition condition to be checked","Asserts that two objects refer to the same object. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected the expected object
 @param actual the object to compare to expected",assertFalse,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
692,"
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.",assertTrue,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
693,"Adds to errors if this method:
 is not public, or
 takes parameters, or
 returns something other than void, or
 is static (given isStatic is false), or
 is not static (given isStatic is true).","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown.",validatePublicVoidNoArg,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors)"", ""entityFile"": ""FrameworkMethod.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
694,"Asserts that a condition is true. If it isn't it throws an
 AssertionError with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param condition condition to be checked
 ","Asserts that two objects are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertTrue,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
695,"Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",aClass,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",0
696,"Creates a Timeout that will timeout a test after the
 given duration, in milliseconds.
 @since 4.12","Tears down the fixture, for example, close a network connection.
 This method is called after a test is executed.",millis,tearDown,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout millis(long millis)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void tearDown() throws Exception"", ""entityFile"": ""TestCase.java""} -->",0
697,"Asserts that two bytes are equal. If they are not
 an AssertionFailedError is thrown with the given message.","Asserts that two objects do not refer to the same object. If they do
 refer to the same object an AssertionFailedError is thrown.
 ",assertEquals,assertNotSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, byte expected, byte actual)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
698,"Asserts that two objects do not refer to the same object. If they do
 refer to the same object, an AssertionError is thrown with the
 given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected the object you don't expect
 @param actual the object to compare to unexpected","Call to assume that actual satisfies the condition specified by matcher.
 If not, the test halts and is ignored.
 Example:
 :
 assumeThat(""alwaysPasses"", 1, is(1)); // passes
 foo(); // will execute
 assumeThat(""alwaysFails"", 0, is(1)); // assumption failure! test halts
 int x = 1 / 0; // will never execute
 @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as assumeThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed values
 @see org.hamcrest.CoreMatchers
 @see org.junit.matchers.JUnitMatchers
 @deprecated use org.hamcrest.junit.MatcherAssume.assumeThat()",assertNotSame,assumeThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotSame(String message, Object unexpected, Object actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeThat(String message, T actual, Matcher<T> matcher)"", ""entityFile"": ""Assume.java""} -->",0
699,"Returns a new builder for building an instance of TemporaryFolder.
 @since 4.13","@deprecated Included for backwards compatibility with JUnit 4.4. Will be
 removed in the next major release. Please use
 BlockJUnit4ClassRunner in place of JUnit4ClassRunner.",builder,FailedBefore,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Builder builder()"", ""entityFile"": ""TemporaryFolder.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""FailedBefore"", ""entityFile"": ""FailedBefore.java""} -->",0
700,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","
 Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError with the given message.
 ",AssumptionViolatedException,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(String message, boolean condition)"", ""entityFile"": ""TestCase.java""} -->",0
701,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Create a Request that, when processed, will run all the tests
 in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a Request that will cause all tests in the classes to be run",org.junit,classes,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classes(Computer computer, Class<?>... classes)"", ""entityFile"": ""Request.java""} -->",0
702,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","@return If this describes a method invocation,
 the name of the class of the test instance",getAnnotatedMethods,getClassName,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getClassName()"", ""entityFile"": ""Description.java""} -->",0
703,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",AssumptionViolatedException,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""TestCase.java""} -->",0
704,"Creates a Timeout that will timeout a test after the
 given duration, in milliseconds.
 @since 4.12","Returns a Statement: apply all
 static fields assignable to TestRule
 annotated with ClassRule.
 @param statement the base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement",millis,withClassRules,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Timeout millis(long millis)"", ""entityFile"": ""Timeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withClassRules(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->",0
705,"If called with an expression evaluating to false, the test will halt and be ignored.
 @param b If false, the method will attempt to stop the test and ignore it by
 throwing AssumptionViolatedException.
 @param message A message to pass to AssumptionViolatedException.","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assumeTrue,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(String message, boolean b)"", ""entityFile"": ""Assume.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
706,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that an object isn't null. If it is an AssertionError is
 thrown.
 @param object Object to check or null",assertNotEquals,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(Object object)"", ""entityFile"": ""Assert.java""} -->",0
707,"Asserts that two longs are not equals. If they are, an
 AssertionError without a message is thrown.
 @param unexpected unexpected value to check
 @param actual the value to check against unexpected","Create a Request that, when processed, will run all the tests
 in a class. The odd name is necessary because class is a reserved word.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run",assertNotEquals,aClass,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(long unexpected, long actual)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request aClass(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->",0
708,"Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name","Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value",createSuiteDescription,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
709,"Provides JUnit core classes and annotations.
 Corresponds to junit.framework in Junit 3.x.
 @since 4.0","Asserts that two ints are equal. If they are not
 an AssertionFailedError is thrown with the given message.",org.junit,assertEquals,"<!-- META {""entityType"": ""Package"", ""entitySignature"": ""org.junit"", ""entityFile"": ""package-info.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, int expected, int actual)"", ""entityFile"": ""Assert.java""} -->",0
710,"Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values","Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(String message, long[] expecteds, long[] actuals) throws ArrayComparisonFailure"", ""entityFile"": ""Assert.java""} -->",0
711,"@return A matcher matching any collection containing an element matching elementMatcher
 @deprecated Please use CoreMatchers#hasItem(Matcher) instead.","Asserts that runnable throws an exception of type expectedThrowable when
 executed. If it does not throw an exception, an AssertionError is thrown. If it
 throws the wrong type of exception, an AssertionError is thrown describing the
 mismatch; the exception that was actually thrown can be obtained by calling {@link
 AssertionError#getCause}.
 @param expectedThrowable the expected type of the exception
 @param runnable a function that is expected to throw an exception when executed
 @since 4.13",hasItem,assertThrows,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable)"", ""entityFile"": ""Assert.java""} -->",0
712,"Returns a Statement: apply all non-static fields
 annotated with Rule.
 @param statement The base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement",Counts the number of test cases that will be run by this test.,withTestRules,countTestCases,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules, Statement statement)"", ""entityFile"": ""BlockJUnit4ClassRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int countTestCases()"", ""entityFile"": ""TestSuite.java""} -->",0
713,"@return A matcher that delegates to throwableMatcher and in addition
 appends the stacktrace of the actual Throwable in case of a mismatch.","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",isThrowable,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<T> isThrowable(Matcher<T> throwableMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
714,"This is useful for fluently combining matchers that must both pass. For example:
 assertThat(string, both(containsString(""a"")).and(containsString(""b"")));
 @deprecated Please use CoreMatchers#both(Matcher) instead.","Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.",both,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableBothMatcher<T> both(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->",0
715,"Verify that your code throws an exception whose message is matched
 by a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseMessageCompliesWithMatcher() {
 thrown.expectMessage(startsWith(&quot;What&quot;));
 throw new NullPointerException(&quot;What happened?&quot;);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectMessage()","Asserts that a condition is true. If it isn't it throws
 an AssertionFailedError.
 ",expectMessage,assertTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectMessage(Matcher<String> matcher)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertTrue(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
716,"Returns true if this member is public, false if not.","@return A matcher matching any collection in which every element matches elementMatcher
 @deprecated Please use CoreMatchers#everyItem(Matcher) instead.",isPublic,everyItem,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isPublic()"", ""entityFile"": ""FrameworkMember.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Matcher<Iterable<T>> everyItem(final Matcher<T> elementMatcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",0
717,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","This is useful for fluently combining matchers where either may pass, for example:
 assertThat(string, either(containsString(""a"")).or(containsString(""b"")));
 @deprecated Please use CoreMatchers#either(Matcher) instead.",getAnnotatedMethods,either,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->",0
718,"Returns a Statement: apply all
 static fields assignable to TestRule
 annotated with ClassRule.
 @param statement the base statement
 @return a RunRules statement if any class-level Rules are
 found, or the base statement","Create a Description of a single test named name in the class clazz.
 Generally, this will be a leaf Description.
 (This remains for binary compatibility with clients of JUnit 4.3)
 @param clazz the class of the test
 @param name the name of the test (a method name for test annotated with org.junit.Test)
 @return a Description named name",withClassRules,createTestDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""private Statement withClassRules(Statement statement)"", ""entityFile"": ""ParentRunner.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createTestDescription(Class<?> clazz, String name)"", ""entityFile"": ""Description.java""} -->",0
719,"This is useful for fluently combining matchers where either may pass, for example:
 assertThat(string, either(containsString(""a"")).or(containsString(""b"")));
 @deprecated Please use CoreMatchers#either(Matcher) instead.","Asserts that two objects refer to the same object. If they are not
 the same an AssertionFailedError is thrown.",either,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static CombinableEitherMatcher<T> either(Matcher<? super T> matcher)"", ""entityFile"": ""JUnitMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
720,"Asserts that two long arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values","If called with an expression evaluating to false, the test will halt and be ignored.",assertArrayEquals,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(long[] expecteds, long[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(boolean b)"", ""entityFile"": ""Assume.java""} -->",0
721,Invoked when a test is skipped due to a failed assumption.,"If called with an expression evaluating to false, the test will halt and be ignored.",skipped,assumeTrue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(AssumptionViolatedException e, Description description)"", ""entityFile"": ""TestWatcher.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assumeTrue(boolean b)"", ""entityFile"": ""Assume.java""} -->",0
722,"Asserts that two object arrays are equal. If they are not, an
 AssertionError is thrown. If expected and
 actual are null, they are considered
 equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with
 expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with
 actual values","Asserts that two char arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values",assertArrayEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(Object[] expecteds, Object[] actuals)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(char[] expecteds, char[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
723,"Asserts that two doubles are equal concerning a delta. If the expected
 value is infinity then the delta value is ignored.","Asserts that two chars are equal. If they are not
 an AssertionFailedError is thrown with the given message.",assertEquals,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual, double delta)"", ""entityFile"": ""TestCase.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, char expected, char actual)"", ""entityFile"": ""Assert.java""} -->",0
724,"Verify that your code throws an exception that is an
 instance of specific type.
 @Test
 public void throwsExceptionWithSpecificType() {
 thrown.expect(NullPointerException.class);
 throw new NullPointerException();
 }","An exception class used to implement assumptions (state in which a given test
 is meaningful and should or should not be executed). A test for which an assumption
 fails should not generate a test case failure.
 @see org.junit.Assume
 @since 4.12",expect,AssumptionViolatedException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expect(Class<? extends Throwable> type)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""AssumptionViolatedException"", ""entityFile"": ""AssumptionViolatedException.java""} -->",0
725,"Asserts that two doubles are not equal to within a positive delta.
 If they are, an AssertionError is thrown with the given
 message. If the unexpected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertNotEquals(Double.NaN, Double.NaN, *) fails
 @param message the identifying message for the AssertionError (null
 okay)
 @param unexpected unexpected value
 @param actual the value to check against unexpected
 @param delta the maximum delta between unexpected and
 actual for which both numbers are still
 considered equal.","Asserts that two short arrays are equal. If they are not, an
 AssertionError is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values",assertNotEquals,assertArrayEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotEquals(String message, double unexpected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertArrayEquals(short[] expecteds, short[] actuals)"", ""entityFile"": ""Assert.java""} -->",0
726,"An assumption exception with the given message and a cause.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two objects are equal. If they are not, an
 AssertionError is thrown with the given message. If
 expected and actual are null,
 they are considered equal.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual actual value",AssumptionViolatedException,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Throwable e)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, Object expected, Object actual)"", ""entityFile"": ""Assert.java""} -->",0
727,Invoked when a test is skipped due to a failed assumption.,"Asserts that two longs are equal. If they are not, an
 AssertionError is thrown with the given message.
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected long expected value.
 @param actual long actual value",skipped,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""protected void skipped(long nanos, AssumptionViolatedException e, Description description)"", ""entityFile"": ""Stopwatch.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, long expected, long actual)"", ""entityFile"": ""Assert.java""} -->",0
728,"Asserts that actual satisfies the condition specified by
 matcher. If not, an AssertionError is thrown with
 the reason and information about the matcher and failing value. Example:
 assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
 // failure message:
 // Help! Integers don't work
 // expected: is &lt;1&gt;
 // got value: &lt;0&gt;
 assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes
 org.hamcrest.Matcher does not currently document the meaning
 of its type parameter T. This method assumes that a matcher
 typed as Matcher&lt;T&gt; can be meaningfully applied only
 to values that could be assigned to a variable of type T.
 @param reason additional information about the error
 @param <T> the static type accepted by the matcher (this can flag obvious
 compile-time problems such as assertThat(1, is(""a""))
 @param actual the computed value being compared
 @param matcher an expression, built of Matchers, specifying allowed
 values
 @see org.hamcrest.CoreMatchers
 @see org.hamcrest.MatcherAssert
 @deprecated use org.hamcrest.junit.MatcherAssert.assertThat()","Asserts that an object isn't null. If it is
 an AssertionFailedError is thrown with the given message.",assertThat,assertNotNull,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertThat(String reason, T actual, Matcher<? super T> matcher)"", ""entityFile"": ""Assert.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertNotNull(String message, Object object)"", ""entityFile"": ""Assert.java""} -->",0
729,"Create a Request that, when processed, will run all the tests
 in a class. If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a Request that will cause all tests in the class to be run","Asserts that two floats are equal concerning a positive delta. If they
 are not an AssertionFailedError is thrown with the given message. If the
 expected value is infinity then the delta value is ignored.",classWithoutSuiteMethod,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Request classWithoutSuiteMethod(Class<?> clazz)"", ""entityFile"": ""Request.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, float expected, float actual, float delta)"", ""entityFile"": ""Assert.java""} -->",0
730,"Construct a new InitializationError with one cause
 with message string","Create a Description named name.
 Generally, you will add children to this Description.
 @param name the name of the Description
 @param annotations meta-data about the test, for downstream interpreters
 @return a Description named name",InitializationError,createSuiteDescription,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Description createSuiteDescription(String name, Annotation... annotations)"", ""entityFile"": ""Description.java""} -->",0
731,"Construct a new InitializationError with one cause
 with message string","@deprecated Use
 assertEquals(double expected, double actual, double delta)
 instead",InitializationError,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public InitializationError(String string)"", ""entityFile"": ""InitializationError.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(double expected, double actual)"", ""entityFile"": ""Assert.java""} -->",0
732,"An assumption exception with the given value (String or
 Throwable) and an additional failing Matcher.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two booleans are equal. If they are not
 an AssertionFailedError is thrown with the given message.",AssumptionViolatedException,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption, Object value, Matcher<?> matcher)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, boolean expected, boolean actual)"", ""entityFile"": ""Assert.java""} -->",0
733,"Returns, efficiently, all the non-overridden methods in this class and
 its superclasses that are annotated with annotationClass.","Asserts that two objects refer to the same object. If they are not
 an AssertionFailedError is thrown with the given message.",getAnnotatedMethods,assertSame,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass)"", ""entityFile"": ""TestClass.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertSame(String message, Object expected, Object actual)"", ""entityFile"": ""TestCase.java""} -->",0
734,"Verify that your code throws an exception whose cause is matched by
 a Hamcrest matcher.
 @Test
 public void throwsExceptionWhoseCauseCompliesWithMatcher() {
 NullPointerException expectedCause = new NullPointerException();
 thrown.expectCause(is(expectedCause));
 throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
 }
 @deprecated use org.hamcrest.junit.ExpectedException.expectCause()","Asserts that a condition is false. If it isn't it throws
 an AssertionFailedError.
 ",expectCause,assertFalse,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause)"", ""entityFile"": ""ExpectedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertFalse(boolean condition)"", ""entityFile"": ""Assert.java""} -->",0
735,"An assumption exception with the given message only.
 @deprecated Please use org.junit.AssumptionViolatedException instead.","Asserts that two doubles are equal to within a positive delta.
 If they are not, an AssertionError is thrown with the given
 message. If the expected value is infinity then the delta value is
 ignored. NaNs are considered equal:
 assertEquals(Double.NaN, Double.NaN, *) passes
 @param message the identifying message for the AssertionError (null
 okay)
 @param expected expected value
 @param actual the value to check against expected
 @param delta the maximum delta between expected and
 actual for which both numbers are still
 considered equal.",AssumptionViolatedException,assertEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public AssumptionViolatedException(String assumption)"", ""entityFile"": ""AssumptionViolatedException.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void assertEquals(String message, double expected, double actual, double delta)"", ""entityFile"": ""Assert.java""} -->",0
