,comment1,comment2,name1,name2,meta1,meta2,label
0,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ",ReturnsSmartNulls,RETURNS_SMART_NULLS,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->",1
1,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable",VerificationOverTimeImpl,VerificationOverTimeImpl,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->",1
2,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.",charThat,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
3,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
4,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
5,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
6,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
7,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
8,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
9,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
10,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
11,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
12,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
13,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
14,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
15,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
16,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
17,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
18,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
19,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
20,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
21,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
22,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
23,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
24,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",intThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
25,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",intThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
26,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",intThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
27,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",longThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
28,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",longThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
29,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",floatThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
30,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver",FieldInitializer,FieldInitializer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->",1
31,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation",NotifiedMethodInvocationReport,NotifiedMethodInvocationReport,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->",1
32,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ",CallsRealMethods,CALLS_REAL_METHODS,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->",1
33,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",ReturnsElementsOf,ReturnsElementsOf,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->",1
34,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5",ReturnsElementsOf,returnsElementsOf,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->",1
35,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
36,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
37,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
38,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
39,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
40,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
41,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
42,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
43,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
44,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
45,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
46,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
47,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
48,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
49,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
50,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
51,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
52,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
53,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
54,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
55,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
56,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
57,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
58,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
59,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
60,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
61,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
62,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
63,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
64,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
65,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
66,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",mock,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",1
67,"Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.","Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
68,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
69,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
70,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
71,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
72,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
73,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
74,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
75,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
76,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
77,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
78,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
79,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
80,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
81,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
82,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
83,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
84,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
85,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
86,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
87,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
88,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
89,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
90,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
91,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
92,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
93,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
94,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5",ReturnsElementsOf,returnsElementsOf,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->",1
95,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
96,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
97,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
98,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
99,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
100,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
101,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
102,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
103,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
104,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
105,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","Use doThrow() when you want to stub the void method with an exception.
 A new exception instance will be created for each method invocation.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",doThrow,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",1
106,"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",doThrow,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",1
107,"Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",times,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
108,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode",atLeast,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",1
109,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",atLeast,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
110,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",atMost,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
111,"Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode","Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode",only,only,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode only()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode only()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
112,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",never,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
113,"Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",withSettings,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",1
114,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",charThat,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
115,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
116,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
117,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
118,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
119,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
120,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
121,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
122,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
123,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
124,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
125,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
126,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
127,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
128,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
129,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
130,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
131,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
132,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
133,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
134,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
135,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
136,"Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",intThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
137,"Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",intThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
138,"Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",intThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
139,"Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",longThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
140,"Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",longThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
141,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",floatThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
142,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",returnsLastArg,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",1
143,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
144,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
145,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
146,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
147,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
148,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
149,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
150,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
151,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
152,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
153,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
154,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
155,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
156,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
157,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
158,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
159,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
160,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
161,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
162,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
163,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
164,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
165,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
166,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
167,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
168,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
169,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
170,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
171,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
172,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
173,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
174,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
175,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
176,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
177,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
178,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
179,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
180,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
181,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
182,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
183,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
184,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
185,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
186,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
187,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
188,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
189,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
190,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
191,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
192,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
193,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
194,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
195,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
196,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
197,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
198,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
199,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
200,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
201,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
202,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
203,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
204,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
205,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
206,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
207,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
208,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
209,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
210,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
211,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
212,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
213,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
214,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
215,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
216,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
217,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
218,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
219,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
220,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
221,"float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
222,"float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
223,"float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
224,"int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
225,"int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
226,"long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
227,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
228,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
229,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
230,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
231,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
232,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
233,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
234,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
235,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
236,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
237,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
238,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
239,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
240,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
241,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
242,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
243,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
244,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
245,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
246,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
247,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
248,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
249,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
250,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
251,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
252,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
253,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
254,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
255,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
256,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
257,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
258,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
259,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
260,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
261,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
262,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
263,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
264,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
265,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
266,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
267,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
268,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
269,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
270,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
271,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
272,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
273,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
274,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
275,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
276,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
277,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
278,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
279,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
280,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
281,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
282,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
283,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
284,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
285,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
286,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
287,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
288,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
289,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
290,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
291,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
292,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
293,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
294,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
295,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
296,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
297,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
298,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
299,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
300,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
301,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
302,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
303,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
304,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
305,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
306,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
307,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
308,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
309,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
310,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
311,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
312,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
313,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
314,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
315,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
316,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
317,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
318,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
319,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
320,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
321,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
322,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
323,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
324,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
325,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
326,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
327,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
328,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
329,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
330,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
331,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
332,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
333,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
334,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
335,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
336,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
337,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
338,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
339,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
340,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
341,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
342,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
343,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
344,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
345,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
346,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
347,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
348,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
349,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
350,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
351,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
352,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
353,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
354,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
355,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
356,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
357,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
358,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
359,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
360,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
361,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
362,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
363,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
364,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
365,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
366,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
367,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
368,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
369,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
370,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
371,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
372,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
373,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
374,"char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
375,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
376,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
377,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
378,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
379,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
380,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
381,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
382,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
383,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
384,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
385,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
386,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
387,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
388,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
389,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
390,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
391,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
392,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
393,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
394,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
395,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
396,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
397,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
398,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
399,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
400,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
401,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
402,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
403,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
404,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
405,"double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
406,"double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
407,"double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
408,"char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
409,"char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
410,"boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
411,"Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.
 @since 1.10.0",MockitoException,MockitoSerializationIssue,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoSerializationIssue"", ""entityFile"": ""MockitoSerializationIssue.java""} -->",1
412,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",leq,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
413,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",longThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
414,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode",FieldInitializer,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
415,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",gt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
416,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",geq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
417,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
418,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
419,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",never,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
420,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",floatThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
421,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",intThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
422,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
423,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",leq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
424,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
425,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
426,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",intThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
427,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
428,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
429,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",reflectionEquals,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
430,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",leq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
431,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
432,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
433,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
434,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
435,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",mock,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
436,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
437,"Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",times,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
438,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",mock,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
439,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",FieldInitializer,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
440,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",ReturnsElementsOf,geq,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
441,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
442,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
443,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",floatThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
444,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",CALLS_REAL_METHODS,floatThat,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
445,"Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
446,"short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
447,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",leq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
448,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
449,"Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",RETURNS_SMART_NULLS,not,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
450,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",append,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
451,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",longThat,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
452,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.",ReturnsSmartNulls,append,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
453,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
454,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
455,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
456,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",gt,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
457,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.",NotifiedMethodInvocationReport,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
458,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
459,"boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
460,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.",ReturnsSmartNulls,reflectionEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
461,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
462,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",charThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
463,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",never,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
464,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",FieldInitializer,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
465,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5",append,returnsElementsOf,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
466,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.",intThat,withSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->",0
467,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",reflectionEquals,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",0
468,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
469,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
470,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",lt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
471,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
472,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",byteThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
473,"Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
474,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",booleanThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
475,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
476,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",longThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
477,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
478,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",lt,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
479,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
480,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.",byteThat,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
481,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
482,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",intThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
483,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
484,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
485,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",VerificationOverTimeImpl,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
486,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",CALLS_REAL_METHODS,doThrow,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
487,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",not,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
488,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
489,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsLastArg,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
490,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",never,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
491,"Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
492,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
493,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",geq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
494,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
495,"Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",times,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
496,"Use doThrow() when you want to stub the void method with an exception.
 A new exception instance will be created for each method invocation.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",doThrow,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
497,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",geq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
498,"short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",leq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
499,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",geq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
500,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
501,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",VerificationOverTimeImpl,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
502,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
503,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",not,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
504,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",doThrow,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
505,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
506,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",ReturnsElementsOf,lt,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
507,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
508,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
509,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
510,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",FieldInitializer,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
511,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",byteThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
512,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",atMost,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
513,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",never,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
514,"Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",RETURNS_SMART_NULLS,aryEq,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
515,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",NotifiedMethodInvocationReport,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
516,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
517,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",FieldInitializer,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
518,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
519,"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",doThrow,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
520,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
521,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",charThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
522,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
523,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
524,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",shortThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
525,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",reflectionEquals,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
526,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",reflectionEquals,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
527,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",booleanThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
528,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",reflectionEquals,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
529,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",NotifiedMethodInvocationReport,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
530,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",append,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
531,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
532,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",longThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
533,"Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",append,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
534,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.",CallsRealMethods,append,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
535,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsLastArg,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
536,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",floatThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
537,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",byteThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
538,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
539,"Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",RETURNS_SMART_NULLS,defaultAnswer,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
540,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
541,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",ReturnsSmartNulls,floatThat,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",0
542,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
543,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",VerificationOverTimeImpl,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
544,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",atMost,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
545,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",atLeast,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
546,"Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",times,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
547,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",booleanThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
548,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
549,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",floatThat,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
550,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
551,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",NotifiedMethodInvocationReport,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
552,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",shortThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
553,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
554,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
555,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",reflectionEquals,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
556,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",booleanThat,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
557,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
558,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",lt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
559,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",VerificationOverTimeImpl,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
560,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",aryEq,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
561,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",doThrow,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
562,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
563,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",append,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",0
564,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
565,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
566,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
567,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",booleanThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
568,"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",doThrow,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
569,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation",shortThat,NotifiedMethodInvocationReport,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->",0
570,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
571,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
572,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
573,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.",FieldInitializer,CallsRealMethods,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->",0
574,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",CALLS_REAL_METHODS,append,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
575,"byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
576,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",CallsRealMethods,not,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
577,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",mock,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
578,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
579,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",byteThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
580,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",atMost,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
581,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",VerificationOverTimeImpl,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
582,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",CALLS_REAL_METHODS,aryEq,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
583,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atMost,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
584,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.
 @since 1.10.0",atLeast,MockitoSerializationIssue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoSerializationIssue"", ""entityFile"": ""MockitoSerializationIssue.java""} -->",0
585,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
586,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5",NotifiedMethodInvocationReport,returnsLastArg,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
587,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
588,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",shortThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
589,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",gt,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
590,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",reflectionEquals,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
591,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
592,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",floatThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
593,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
594,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",shortThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
595,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
596,"Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",doubleThat,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
597,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",ReturnsSmartNulls,aryEq,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
598,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
599,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",VerificationOverTimeImpl,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
600,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",intThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
601,"Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
602,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",reflectionEquals,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
603,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
604,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",atMost,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
605,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",longThat,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
606,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
607,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",charThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
608,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
609,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
610,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",VerificationOverTimeImpl,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
611,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",ReturnsElementsOf,booleanThat,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
612,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
613,"Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",withSettings,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
614,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
615,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",booleanThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
616,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
617,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",floatThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
618,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",append,ReturnsElementsOf,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->",0
619,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",FieldInitializer,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
620,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
621,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",booleanThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
622,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
623,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atLeast,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
624,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
625,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",ReturnsSmartNulls,reflectionEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
626,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
627,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
628,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
629,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.",shortThat,FieldInitializer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->",0
630,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
631,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
632,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
633,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
634,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",never,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
635,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.",append,withSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->",0
636,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
637,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",reflectionEquals,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
638,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
639,"Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
640,"Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",doubleThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
641,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
642,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
643,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",atLeast,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
644,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",intThat,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
645,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",VerificationOverTimeImpl,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
646,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
647,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",gt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
648,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
649,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",atLeast,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
650,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",atLeast,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
651,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",leq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
652,"Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",doubleThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
653,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
654,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
655,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",doThrow,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
656,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",booleanThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
657,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",aryEq,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
658,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
659,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atLeast,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
660,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
661,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",returnsElementsOf,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
662,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",intThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
663,"short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
664,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",geq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
665,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
666,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
667,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",byteThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
668,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",CALLS_REAL_METHODS,append,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
669,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
670,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
671,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
672,"short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
673,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
674,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",atMost,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
675,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",reflectionEquals,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
676,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",longThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
677,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",reflectionEquals,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
678,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",intThat,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
679,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",byteThat,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
680,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",doubleThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
681,"short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
682,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",longThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
683,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
684,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",FieldInitializer,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
685,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
686,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.",ReturnsSmartNulls,append,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
687,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",never,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
688,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
689,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
690,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",lt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
691,"short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",geq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
692,"byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
693,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",doubleThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
694,"Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",only,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode only()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
695,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",ReturnsElementsOf,and,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
696,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",geq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
697,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",geq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
698,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",longThat,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
699,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",charThat,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
700,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
701,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
702,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",returnsLastArg,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
703,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",append,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
704,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
705,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",or,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
706,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",byteThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
707,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
708,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
709,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",FieldInitializer,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
710,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
711,"short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",geq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
712,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
713,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",ReturnsElementsOf,or,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
714,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
715,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",mock,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
716,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
717,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.
 @since 1.10.0",append,MockitoSerializationIssue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoSerializationIssue"", ""entityFile"": ""MockitoSerializationIssue.java""} -->",0
718,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
719,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
720,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
721,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",NotifiedMethodInvocationReport,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
722,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
723,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",CallsRealMethods,or,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
724,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",append,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
725,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
726,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
727,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
728,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
729,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.",VerificationOverTimeImpl,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
730,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",doubleThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
731,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",byteThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
732,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",charThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
733,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",ReturnsSmartNulls,lt,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
734,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
735,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
736,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
737,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",doubleThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
738,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode",append,only,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode only()"", ""entityFile"": ""Mockito.java""} -->",0
739,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",returnsElementsOf,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
740,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atMost,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
741,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
742,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",returnsLastArg,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
743,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",FieldInitializer,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
744,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
745,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",shortThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
746,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
747,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",charThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
748,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
749,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
750,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",VerificationOverTimeImpl,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->",0
751,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
752,"Use doThrow() when you want to stub the void method with an exception.
 A new exception instance will be created for each method invocation.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",doThrow,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
753,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
754,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode",VerificationOverTimeImpl,only,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode only()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
755,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
756,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",intThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
757,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
758,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
759,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
760,"Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",longThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
761,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atMost,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
762,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
763,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
764,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",CALLS_REAL_METHODS,intThat,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
765,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",FieldInitializer,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
766,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",reflectionEquals,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
767,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
768,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",reflectionEquals,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
769,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver",longThat,FieldInitializer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->",0
770,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
771,"short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",lt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
772,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",returnsLastArg,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
773,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
774,"Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",only,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode only()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
775,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",booleanThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
776,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
777,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",booleanThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
778,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
779,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
780,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
781,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",VerificationOverTimeImpl,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
782,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",FieldInitializer,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
783,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
784,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",reflectionEquals,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
785,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
786,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
787,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
788,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",FieldInitializer,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
789,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",charThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
790,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",leq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
791,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",geq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
792,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
793,"Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",times,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
794,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",byteThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
795,"Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
796,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",floatThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
797,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
798,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
799,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",shortThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
800,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
801,"Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsArgAt,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
802,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",doThrow,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
803,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",and,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
804,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
805,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",gt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
806,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
807,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",ReturnsElementsOf,doThrow,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",0
808,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",leq,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
809,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
810,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",append,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
811,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
812,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
813,"Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
814,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
815,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",atMost,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
816,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",atMost,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
817,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",ReturnsSmartNulls,aryEq,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
818,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",VerificationOverTimeImpl,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
819,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
820,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",CALLS_REAL_METHODS,not,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
821,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
822,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
823,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
