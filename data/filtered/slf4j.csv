,comment1,comment2,name1,name2,meta1,meta2,label
0,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message",format,format,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->",1
1,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",put,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",1
2,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
3,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
4,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
5,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
6,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
7,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
8,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
9,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
10,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
11,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
12,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
13,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",isTraceEnabled,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
14,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",isTraceEnabled,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
15,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",isTraceEnabled,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
16,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isTraceEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
17,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",1
18,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",1
19,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
20,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",1
21,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
22,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
23,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
24,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
25,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
26,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
27,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
28,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
29,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
30,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
31,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
32,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
33,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
34,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
35,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
36,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
37,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
38,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",1
39,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
40,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
41,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
42,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
43,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
44,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
45,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
46,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
47,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
48,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
49,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
50,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
51,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
52,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
53,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
54,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
55,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
56,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
57,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
58,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
59,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
60,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
61,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
62,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
63,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
64,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
65,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
66,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
67,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
68,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
69,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
70,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
71,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
72,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
73,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
74,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
75,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
76,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
77,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
78,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
79,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
80,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
81,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
82,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
83,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
84,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
85,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
86,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
87,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
88,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
89,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
90,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
91,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
92,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
93,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
94,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
95,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
96,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
97,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
98,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",isDebugEnabled,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
99,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",isDebugEnabled,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
100,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isDebugEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
101,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",1
102,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
103,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
104,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
105,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
106,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
107,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
108,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
109,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
110,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
111,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
112,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
113,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
114,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
115,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
116,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
117,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
118,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
119,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
120,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
121,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
122,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
123,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
124,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
125,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
126,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
127,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
128,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
129,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
130,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
131,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",put,putCloseable,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",1
132,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
133,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
134,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
135,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
136,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
137,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
138,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
139,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
140,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
141,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
142,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
143,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
144,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
145,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
146,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
147,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
148,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
149,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
150,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
151,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
152,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
153,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
154,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
155,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
156,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
157,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
158,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
159,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
160,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
161,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
162,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
163,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
164,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
165,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
166,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
167,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
168,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",isInfoEnabled,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
169,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isInfoEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
170,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
171,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
172,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
173,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
174,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
175,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
176,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
177,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
178,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
179,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
180,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
181,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
182,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
183,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
184,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
185,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
186,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
187,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
188,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
189,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
190,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
191,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
192,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
193,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
194,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
195,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
196,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
197,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
198,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
199,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
200,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
201,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
202,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
203,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
204,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
205,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
206,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
207,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
208,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
209,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
210,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
211,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
212,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
213,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
214,"Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isWarnEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
215,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
216,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
217,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
218,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
219,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
220,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
221,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
222,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
223,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
224,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
225,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
226,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
227,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
228,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
229,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
230,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
231,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
232,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
233,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
234,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
235,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
236,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
237,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
238,"This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
239,"This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
240,"This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
241,"This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
242,"This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
243,"This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
244,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",log,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
245,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
246,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",format,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
247,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",getLogger,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
248,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
249,"Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",error,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
250,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
251,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
252,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",put,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
253,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
254,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
255,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
256,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",getLogger,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
257,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",format,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",0
258,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
259,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isDebugEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
260,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
261,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
262,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
263,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
264,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",isDebugEnabled,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
265,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
266,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
267,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
268,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
269,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
270,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
271,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",put,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
272,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
273,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
274,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
275,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
276,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
277,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
278,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
279,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
280,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",put,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
281,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
282,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",error,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
283,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
284,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
285,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
286,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",log,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
287,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
288,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",MessageFormatter,putCloseable,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
289,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",format,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
290,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",isTraceEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
291,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",debug,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
292,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
293,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
294,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
295,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",isInfoEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
296,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
297,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",debug,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
298,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
299,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
300,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",put,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
301,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",info,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
302,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
303,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isDebugEnabled,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
304,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
305,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
306,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",MessageFormatter,info,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
307,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
308,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",put,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
309,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",isInfoEnabled,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
310,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
311,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",putCloseable,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
312,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",format,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
313,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
314,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
315,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
316,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
317,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
318,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
319,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
320,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
321,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
322,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
323,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
324,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
325,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4",format,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
326,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",debug,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
327,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",put,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
328,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ",log,MessageFormatter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->",0
329,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",getLogger,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
330,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
331,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
332,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
333,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",MessageFormatter,debug,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
334,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
335,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",format,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
336,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",MessageFormatter,trace,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
337,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",warn,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
338,"Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
339,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
340,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",put,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
341,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",MessageFormatter,error,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
342,"Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",isErrorEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
343,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
344,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",debug,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
345,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
346,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",log,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
347,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",info,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
348,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",format,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
349,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isDebugEnabled,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
350,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
351,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",error,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
352,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
353,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",warn,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
354,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
355,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",trace,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
356,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
357,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4",MessageFormatter,trace,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
358,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
359,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
360,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
361,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
362,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",isTraceEnabled,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",0
363,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
364,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
365,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
366,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",trace,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
367,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
368,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
369,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
370,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
371,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.",format,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->",0
372,"Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
373,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
374,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
375,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
376,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
377,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",format,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
378,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
379,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message",log,format,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->",0
380,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
381,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",MessageFormatter,put,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
382,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
383,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",putCloseable,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
384,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
385,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
386,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
387,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
388,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
389,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
390,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
391,"Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",isWarnEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
392,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
393,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
394,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
395,"Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isErrorEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
396,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
397,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
398,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
399,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
400,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",info,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
401,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
402,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",format,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
403,"This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",error,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
404,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
405,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
406,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
407,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
408,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",getLogger,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
409,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",debug,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
410,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",log,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
411,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
412,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
413,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
414,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
415,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
416,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",trace,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
417,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
418,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",put,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
419,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",isDebugEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
420,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
421,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",trace,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
422,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
423,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
424,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
425,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
426,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
427,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",debug,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
428,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
429,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",0
430,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
431,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
432,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",getLogger,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
433,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
434,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
435,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,putCloseable,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
436,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",MessageFormatter,info,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
437,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",trace,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
438,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
439,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
440,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,putCloseable,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
441,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
442,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
443,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",isDebugEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
444,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
445,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
446,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
447,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",format,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
448,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
449,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
450,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
451,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
452,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
453,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
454,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
455,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
456,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
457,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
458,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",put,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
459,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
460,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
461,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
462,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",debug,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
463,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
464,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",trace,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
465,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
466,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
467,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
468,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
469,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
470,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",MessageFormatter,error,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
471,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",warn,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
472,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",MessageFormatter,isInfoEnabled,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
473,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
474,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",put,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
475,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
476,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",info,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
477,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",info,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
478,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
479,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
480,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
481,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
482,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",trace,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
483,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
484,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",log,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
485,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",info,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
486,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
487,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",warn,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
