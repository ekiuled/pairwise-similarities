,comment1,comment2,name1,name2,meta1,meta2,label
0,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->",1
1,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->",1
2,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsNumber,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->",1
3,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsNumber,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->",1
4,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->",1
5,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->",1
6,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
7,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
8,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsNumber,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
9,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.",getAsString,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->",1
10,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsString,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->",1
11,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsString,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->",1
12,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.",getAsString,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->",1
13,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.",getAsString,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->",1
14,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsString,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
15,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsString,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
16,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsString,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
17,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsDouble,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->",1
18,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsDouble,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->",1
19,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.",getAsDouble,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->",1
20,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.",getAsDouble,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->",1
21,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsDouble,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
22,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsDouble,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
23,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsDouble,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
24,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2",getAsBigDecimal,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->",1
25,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.",getAsBigDecimal,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->",1
26,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.",getAsBigDecimal,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->",1
27,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsBigDecimal,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
28,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsBigDecimal,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
29,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsBigDecimal,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
30,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.",getAsBigInteger,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->",1
31,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.",getAsBigInteger,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->",1
32,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsBigInteger,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
33,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsBigInteger,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
34,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsBigInteger,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
35,"convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.",getAsFloat,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->",1
36,"convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsFloat,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
37,"convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsFloat,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
38,"convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsFloat,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
39,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.",getAsLong,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->",1
40,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsLong,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
41,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsLong,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
42,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.",getAsInt,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->",1
43,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsInt,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
44,"convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.",getAsShort,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->",1
45,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.",getAsJsonObject,getAsJsonArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->",1
46,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.",getAsJsonObject,getAsJsonPrimitive,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->",1
47,"convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.",getAsJsonArray,getAsJsonPrimitive,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->",1
48,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ",getAsBoolean,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->",1
49,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->",1
50,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->",1
51,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->",1
52,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->",1
53,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",1
54,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
55,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsBoolean,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
56,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsBoolean,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
57,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBooleanWrapper,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->",1
58,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBooleanWrapper,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->",1
59,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBooleanWrapper,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->",1
60,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBooleanWrapper,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->",1
61,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBooleanWrapper,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",1
62,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBooleanWrapper,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
63,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsBooleanWrapper,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
64,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsBooleanWrapper,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
65,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsNumber,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->",1
66,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsNumber,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->",1
67,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsNumber,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->",1
68,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsNumber,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",1
69,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsNumber,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
70,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsNumber,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
71,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsNumber,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
72,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsString,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->",1
73,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsString,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->",1
74,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsString,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",1
75,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsString,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
76,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsString,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
77,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsString,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
78,"convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsDouble,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->",1
79,"convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsDouble,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",1
80,"convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsDouble,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
81,"convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsDouble,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
82,"convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsDouble,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
83,"convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsFloat,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",1
84,"convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsFloat,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
85,"convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsFloat,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
86,"convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 float value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsFloat,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
87,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsLong,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",1
88,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsLong,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
89,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsLong,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
90,"convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsInt,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",1
91,"convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsInt,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
92,"convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsByte,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",1
93,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2",getAsBigDecimal,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->",1
94,"Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",DateTypeAdapter,SqlDateTypeAdapter,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SqlDateTypeAdapter"", ""entityFile"": ""SqlDateTypeAdapter.java""} -->",1
95,"Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","Adapter for Time. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",DateTypeAdapter,TimeTypeAdapter,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TimeTypeAdapter"", ""entityFile"": ""TimeTypeAdapter.java""} -->",1
96,"Convenience method to get the specified member as a JsonPrimitive element.
 @param memberName name of the member being requested.
 @return the JsonPrimitive corresponding to the specified member.","Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.",getAsJsonPrimitive,getAsJsonArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",1
97,"Convenience method to get the specified member as a JsonPrimitive element.
 @param memberName name of the member being requested.
 @return the JsonPrimitive corresponding to the specified member.","Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.",getAsJsonPrimitive,getAsJsonObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",1
98,"Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.","Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.",getAsJsonArray,getAsJsonObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",1
99,"This method serializes the specified object into its equivalent representation as a tree of
 {@link JsonElement}s. This method should be used when the specified object is not a generic
 type. This method uses {@link Class#getClass()} to get the type for the specified object, but
 the {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJsonTree(Object, Type)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.
 @since 1.4","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.",toJsonTree,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->",1
100,"This method serializes the specified object, including those of generic types, into its
 equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
 specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
 instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}
 @since 1.4","This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}",toJsonTree,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->",1
101,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",toJson,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",1
102,"This method deserializes the specified Json into an object of the specified class. It is not
 suitable to use if the specified class is a generic type since it will not have the generic
 type information because of the Type Erasure feature of Java. Therefore, this method should not
 be used if the desired type is a generic type. Note that this method works fine if the any of
 the fields of the specified object are generics, just the object itself should not be a
 generic type. For the cases when the object is of generic type, invoke
 {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Class)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 classOfT","This method deserializes the Json read from the specified reader into an object of the
 specified class. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
 {@link Reader}, use {@link #fromJson(String, Class)} instead.
 @param <T> the type of the desired object
 @param json the reader producing the Json from which the object is to be deserialized.
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException"", ""entityFile"": ""Gson.java""} -->",1
103,"This method deserializes the specified Json into an object of the specified class. It is not
 suitable to use if the specified class is a generic type since it will not have the generic
 type information because of the Type Erasure feature of Java. Therefore, this method should not
 be used if the desired type is a generic type. Note that this method works fine if the any of
 the fields of the specified object are generics, just the object itself should not be a
 generic type. For the cases when the object is of generic type, invoke
 {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Class)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 classOfT","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",1
104,"This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",1
105,"This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",1
106,"This method deserializes the Json read from the specified reader into an object of the
 specified class. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
 {@link Reader}, use {@link #fromJson(String, Class)} instead.
 @param <T> the type of the desired object
 @param json the reader producing the Json from which the object is to be deserialized.
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",1
107,"This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",1
108,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current array.",beginArray,endArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
109,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new object.",beginArray,beginObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
110,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.",beginArray,endObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
111,"Consumes the next token from the JSON stream and asserts that it is the
 end of the current array.","Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new object.",endArray,beginObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
112,"Consumes the next token from the JSON stream and asserts that it is the
 end of the current array.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.",endArray,endObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
113,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new object.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.",beginObject,endObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
114,"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",nextString,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
115,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.",nextDouble,nextLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
116,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as an int. If the next token's numeric value cannot be exactly
 represented by a Java {@code int}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as an int.",nextDouble,nextInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int nextInt() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
117,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as an int. If the next token's numeric value cannot be exactly
 represented by a Java {@code int}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as an int.",nextLong,nextInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int nextInt() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",1
118,"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.",BEGIN_ARRAY,END_ARRAY,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",1
119,"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",BEGIN_ARRAY,BEGIN_OBJECT,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",1
120,"The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
 and read using {@link JsonReader#endObject}.",BEGIN_ARRAY,END_OBJECT,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",1
121,"The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",END_ARRAY,BEGIN_OBJECT,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",1
122,"The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
 and read using {@link JsonReader#endObject}.",END_ARRAY,END_OBJECT,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",1
123,"The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
 and read using {@link JsonReader#endObject}.",BEGIN_OBJECT,END_OBJECT,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",1
124,"Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern","Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 @param fieldNamingStrategy the actual naming strategy to apply to the fields
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.3",setFieldNamingPolicy,setFieldNamingStrategy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)"", ""entityFile"": ""GsonBuilder.java""} -->",1
125,"Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param style the predefined date style that date objects will be serialized/deserialized
 to/from
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",setDateFormat,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int style)"", ""entityFile"": ""GsonBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",1
126,"Adapter for java.sql.Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","Adapter for Time. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",SqlDateTypeAdapter,TimeTypeAdapter,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SqlDateTypeAdapter"", ""entityFile"": ""SqlDateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TimeTypeAdapter"", ""entityFile"": ""TimeTypeAdapter.java""} -->",1
127,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.",getAsBooleanWrapper,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
128,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",getAsBooleanWrapper,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
129,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a String.
 @return get this element as a String.",getAsBooleanWrapper,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
130,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.",getAsBooleanWrapper,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
131,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsBooleanWrapper,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
132,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsBooleanWrapper,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
133,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsBooleanWrapper,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
134,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsBooleanWrapper,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
135,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsBooleanWrapper,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
136,"convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsBooleanWrapper,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
137,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",getAsBoolean,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
138,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a String.
 @return get this element as a String.",getAsBoolean,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
139,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.",getAsBoolean,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
140,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsBoolean,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
141,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsBoolean,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
142,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsBoolean,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
143,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsBoolean,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
144,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsBoolean,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
145,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsBoolean,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
146,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a String.
 @return get this element as a String.",getAsNumber,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
147,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.",getAsNumber,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
148,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsNumber,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
149,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsNumber,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
150,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsNumber,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
151,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsNumber,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
152,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsNumber,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
153,"convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsNumber,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
154,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.",getAsString,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
155,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsString,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
156,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsString,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
157,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsString,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
158,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsString,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
159,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsString,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
160,"convenience method to get this element as a String.
 @return get this element as a String.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsString,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
161,"convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsDouble,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
162,"convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsDouble,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
163,"convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsDouble,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
164,"convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsDouble,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
165,"convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsDouble,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
166,"convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsDouble,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
167,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsBigDecimal,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
168,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsBigDecimal,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
169,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsBigDecimal,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
170,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsBigDecimal,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
171,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsBigDecimal,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
172,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsBigInteger,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
173,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsBigInteger,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
174,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsBigInteger,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
175,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsBigInteger,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
176,"convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsFloat,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
177,"convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsFloat,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
178,"convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsFloat,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
179,"convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsLong,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
180,"convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsLong,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
181,"convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsShort,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",1
182,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type",getAsString,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
183,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","Adapter for Time. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",getAsBigDecimal,TimeTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TimeTypeAdapter"", ""entityFile"": ""TimeTypeAdapter.java""} -->",0
184,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.",getAsBigInteger,getAsJsonObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",0
185,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.",getAsBigDecimal,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->",0
186,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",getAsInt,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
187,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Adapter for java.sql.Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",getAsBoolean,SqlDateTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SqlDateTypeAdapter"", ""entityFile"": ""SqlDateTypeAdapter.java""} -->",0
188,"This method serializes the specified object into its equivalent representation as a tree of
 {@link JsonElement}s. This method should be used when the specified object is not a generic
 type. This method uses {@link Class#getClass()} to get the type for the specified object, but
 the {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJsonTree(Object, Type)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.
 @since 1.4","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",toJsonTree,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
189,"Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","This method serializes the specified object, including those of generic types, into its
 equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
 specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
 instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}
 @since 1.4",DateTypeAdapter,toJsonTree,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->",0
190,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",getAsString,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
191,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",getAsBigDecimal,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
192,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsDouble,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
193,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2",getAsJsonObject,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->",0
194,"convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2",getAsCharacter,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
195,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",toJson,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
196,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",getAsLong,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
197,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsLong,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
198,"convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsJsonArray,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->",0
199,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",fromJson,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
200,"convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",getAsInt,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",0
201,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.",fromJson,BEGIN_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
202,"Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",setDateFormat,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
203,"This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",fromJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
204,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",toJson,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
205,"This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.",fromJson,BEGIN_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
206,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",nextLong,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
207,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param style the predefined date style that date objects will be serialized/deserialized
 to/from
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsBigDecimal,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int style)"", ""entityFile"": ""GsonBuilder.java""} -->",0
208,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsString,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",0
209,"convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",getAsShort,BEGIN_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
210,"convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",getAsJsonArray,BEGIN_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
211,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as an int. If the next token's numeric value cannot be exactly
 represented by a Java {@code int}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as an int.",getAsString,nextInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int nextInt() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
212,"convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type",getAsCharacter,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
213,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param style the predefined date style that date objects will be serialized/deserialized
 to/from
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsBigInteger,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int style)"", ""entityFile"": ""GsonBuilder.java""} -->",0
214,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBigInteger,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",0
215,"The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.","convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.",END_ARRAY,getAsDouble,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
216,"convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",getAsShort,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
217,"This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.",fromJson,nextString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
218,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",getAsNumber,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
219,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",getAsNumber,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
220,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",getAsLong,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
221,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",getAsBigInteger,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
222,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.",getAsJsonObject,beginArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
223,"Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",endObject,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
224,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",nextDouble,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
225,"Convenience method to get the specified member as a JsonPrimitive element.
 @param memberName name of the member being requested.
 @return the JsonPrimitive corresponding to the specified member.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.",getAsJsonPrimitive,endObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
226,"convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","The closing of a JSON object. Written using {@link JsonWriter#endObject}
 and read using {@link JsonReader#endObject}.",getAsByte,END_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
227,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","convenience method to get this element as a primitive double.
 @return get this element as a primitive double.
 @throws NumberFormatException if the value contained is not a valid double.",fromJson,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
228,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",nextDouble,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
229,"convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.",getAsCharacter,END_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
230,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsBigInteger,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",0
231,"convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.",getAsInt,getAsJsonArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",0
232,"Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",setFieldNamingPolicy,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
233,"Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",getAsJsonObject,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
234,"Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsJsonArray,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
235,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","This method serializes the specified object, including those of generic types, into its
 equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
 specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
 instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}
 @since 1.4",getAsBigDecimal,toJsonTree,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->",0
236,"This method serializes the specified object into its equivalent representation as a tree of
 {@link JsonElement}s. This method should be used when the specified object is not a generic
 type. This method uses {@link Class#getClass()} to get the type for the specified object, but
 the {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJsonTree(Object, Type)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.
 @since 1.4","This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type",toJsonTree,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
237,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",toJson,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",0
238,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.",getAsInt,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
239,"convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->",0
240,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2",getAsBigDecimal,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
241,"convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element is not a valid {@link BigInteger}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","This method deserializes the specified Json into an object of the specified class. It is not
 suitable to use if the specified class is a generic type since it will not have the generic
 type information because of the Type Erasure feature of Java. Therefore, this method should not
 be used if the desired type is a generic type. Note that this method works fine if the any of
 the fields of the specified object are generics, just the object itself should not be a
 generic type. For the cases when the object is of generic type, invoke
 {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Class)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 classOfT",getAsBigInteger,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
242,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.",getAsBigDecimal,nextLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
243,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsDouble,getAsCharacter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->",0
244,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.",beginArray,nextLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
245,"convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",getAsByte,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",0
246,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.",getAsBigDecimal,BEGIN_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
247,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBigInteger,getAsDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->",0
248,"convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsBooleanWrapper,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
249,"convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2",getAsJsonArray,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->",0
250,"The closing of a JSON object. Written using {@link JsonWriter#endObject}
 and read using {@link JsonReader#endObject}.","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.",END_OBJECT,getAsBoolean,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_OBJECT"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
251,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.",getAsLong,getAsJsonPrimitive,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->",0
252,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsInt,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->",0
253,"Convenience method to get the specified member as a JsonPrimitive element.
 @param memberName name of the member being requested.
 @return the JsonPrimitive corresponding to the specified member.","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",getAsJsonPrimitive,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
254,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",getAsBigInteger,DateTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->",0
255,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.",getAsNumber,nextDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
256,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","This method deserializes the specified Json into an object of the specified class. It is not
 suitable to use if the specified class is a generic type since it will not have the generic
 type information because of the Type Erasure feature of Java. Therefore, this method should not
 be used if the desired type is a generic type. Note that this method works fine if the any of
 the fields of the specified object are generics, just the object itself should not be a
 generic type. For the cases when the object is of generic type, invoke
 {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Class)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 classOfT",getAsBigDecimal,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
257,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","The closing of a JSON object. Written using {@link JsonWriter#endObject}
 and read using {@link JsonReader#endObject}.",getAsJsonObject,END_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
258,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",getAsJsonObject,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
259,"This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",fromJson,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
260,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",getAsLong,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
261,"The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",BEGIN_OBJECT,getAsBigDecimal,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
262,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method serializes the specified object into its equivalent representation as a tree of
 {@link JsonElement}s. This method should be used when the specified object is not a generic
 type. This method uses {@link Class#getClass()} to get the type for the specified object, but
 the {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJsonTree(Object, Type)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.
 @since 1.4",getAsLong,toJsonTree,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src)"", ""entityFile"": ""Gson.java""} -->",0
263,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}","Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 @param fieldNamingStrategy the actual naming strategy to apply to the fields
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.3",toJson,setFieldNamingStrategy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)"", ""entityFile"": ""GsonBuilder.java""} -->",0
264,"Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}",DateTypeAdapter,toJson,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->",0
265,"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",nextString,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
266,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",fromJson,BEGIN_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
267,"convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",getAsInt,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
268,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",toJson,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
269,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",getAsInt,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",0
270,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",toJson,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",0
271,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type",getAsLong,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
272,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsNumber,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
273,"This method serializes the specified object, including those of generic types, into its
 equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
 specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
 instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}
 @since 1.4","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",toJsonTree,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
274,"convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsByte,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
275,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.",getAsLong,getAsJsonObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->",0
276,"Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 @param fieldNamingStrategy the actual naming strategy to apply to the fields
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.3","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",setFieldNamingStrategy,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)"", ""entityFile"": ""GsonBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
277,"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.",nextString,nextLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
278,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current array.",toJson,endArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
279,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",getAsInt,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
280,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3",getAsJsonObject,getAsByte,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->",0
281,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 @param fieldNamingStrategy the actual naming strategy to apply to the fields
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.3",getAsInt,setFieldNamingStrategy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)"", ""entityFile"": ""GsonBuilder.java""} -->",0
282,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.",fromJson,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
283,"The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",END_ARRAY,setFieldNamingPolicy,"<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
284,"This method serializes the specified object into its equivalent representation as a tree of
 {@link JsonElement}s. This method should be used when the specified object is not a generic
 type. This method uses {@link Class#getClass()} to get the type for the specified object, but
 the {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJsonTree(Object, Type)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.
 @since 1.4","The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.",toJsonTree,END_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
285,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",fromJson,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
286,"convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param style the predefined date style that date objects will be serialized/deserialized
 to/from
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsNumber,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int style)"", ""entityFile"": ""GsonBuilder.java""} -->",0
287,"convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBoolean,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->",0
288,"This method deserializes the specified Json into an object of the specified class. It is not
 suitable to use if the specified class is a generic type since it will not have the generic
 type information because of the Type Erasure feature of Java. Therefore, this method should not
 be used if the desired type is a generic type. Note that this method works fine if the any of
 the fields of the specified object are generics, just the object itself should not be a
 generic type. For the cases when the object is of generic type, invoke
 {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Class)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 classOfT","convenience method to get this element as a String.
 @return get this element as a String.",fromJson,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
289,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","convenience method to get this element as a float.
 @return get this element as a float.
 @throws NumberFormatException if the value contained is not a valid float.",toJson,getAsFloat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
290,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.",toJson,nextString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
291,"Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",nextString,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
292,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.",toJson,nextDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
293,"Convenience method to get the specified member as a JsonPrimitive element.
 @param memberName name of the member being requested.
 @return the JsonPrimitive corresponding to the specified member.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.",getAsJsonPrimitive,nextLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
294,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",getAsBigInteger,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
295,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",getAsLong,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
296,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsInt,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
297,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",getAsString,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
298,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsInt,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->",0
299,"Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",endObject,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
300,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",getAsBigInteger,getAsShort,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
301,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",getAsLong,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
302,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",toJson,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
303,"convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.","The closing of a JSON array. Written using {@link JsonWriter#endArray}
 and read using {@link JsonReader#endArray}.",getAsBoolean,END_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""END_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
304,"This method deserializes the specified Json into an object of the specified type. This method
 is useful if the specified object is a generic type. For non-generic objects, use
 {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Type)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 @throws JsonSyntaxException if json is not a valid representation for an object of type","Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new object.",fromJson,beginObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
305,"convenience method to get this array as a {@link BigInteger} if it contains a single element.
 @return get this element as a {@link BigInteger} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBigInteger,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->",0
306,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.",getAsLong,nextDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
307,"Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",getAsJsonArray,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
308,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",getAsBigDecimal,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",0
309,"convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid integer.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsInt,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->",0
310,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}","Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.",toJson,beginArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
311,"convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsShort,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
312,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}","Adapter for Time. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",toJson,TimeTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TimeTypeAdapter"", ""entityFile"": ""TimeTypeAdapter.java""} -->",0
313,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Adapter for Time. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",getAsString,TimeTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""TimeTypeAdapter"", ""entityFile"": ""TimeTypeAdapter.java""} -->",0
314,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.",getAsLong,BEGIN_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
315,"convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.",getAsFloat,getAsJsonPrimitive,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->",0
316,"convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid float.
 @throws IllegalStateException if the array has more than one element.","Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 @param fieldNamingStrategy the actual naming strategy to apply to the fields
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.3",getAsFloat,setFieldNamingStrategy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public float getAsFloat()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)"", ""entityFile"": ""GsonBuilder.java""} -->",0
317,"This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",fromJson,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
318,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a double using {@link Double#parseDouble(String)}.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a double, or is non-finite.",toJson,nextDouble,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double nextDouble() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
319,"convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.",getAsJsonArray,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->",0
320,"convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",getAsBoolean,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
321,"Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @param writer Writer to which the Json representation needs to be written
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2",getAsJsonObject,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->",0
322,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",toJson,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",0
323,"convenience method to get this array as a {@link BigDecimal} if it contains a single element.
 @return get this element as a {@link BigDecimal} if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
 @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the array has more than one element.
 @since 1.2","convenience method to get this element as a {@link Number}.
 @return get this element as a {@link Number}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 number.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsBigDecimal,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonElement.java""} -->",0
324,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 integer value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsJsonObject,getAsInt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonElement.java""} -->",0
325,"Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 @param fieldNamingStrategy the actual naming strategy to apply to the fields
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.3","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",setFieldNamingStrategy,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy)"", ""entityFile"": ""GsonBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
326,"Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",DateTypeAdapter,BEGIN_OBJECT,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
327,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
 the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}","Consumes the next token from the JSON stream and asserts that it is the
 end of the current array.",toJson,endArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
328,"Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.","convenience method to get this element as a {@link Boolean}.
 @return get this element as a {@link Boolean}.
 ",getAsJsonArray,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
329,"convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 double value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsDouble,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",0
330,"This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",toJson,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
331,"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.","Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 @param namingConvention the JSON field naming convention to use for serialization and
 deserialization.
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern",getAsJsonPrimitive,setFieldNamingPolicy,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention)"", ""entityFile"": ""GsonBuilder.java""} -->",0
332,"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",getAsJsonPrimitive,BEGIN_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
333,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new array.","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",beginArray,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginArray() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
334,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.",getAsLong,getAsJsonArray,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->",0
335,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","The opening of a JSON array. Written using {@link JsonWriter#beginArray}
 and read using {@link JsonReader#beginArray}.",toJson,BEGIN_ARRAY,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_ARRAY"", ""entityFile"": ""JsonToken.java""} -->",0
336,"Adapter for java.sql.Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","convenience method to get this element as a primitive short.
 @return get this element as a primitive short.
 @throws NumberFormatException if the value contained is not a valid short value.",SqlDateTypeAdapter,getAsShort,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SqlDateTypeAdapter"", ""entityFile"": ""SqlDateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
337,"convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 string value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method deserializes the Json read from the specified parse tree into an object of the
 specified type. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(JsonElement, Type)}.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param classOfT The class of T
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3",getAsString,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
338,"Adapter for Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.","convenience method to get this element as a primitive integer.
 @return get this element as a primitive integer.
 @throws NumberFormatException if the value contained is not a valid integer.",DateTypeAdapter,getAsInt,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""DateTypeAdapter"", ""entityFile"": ""DateTypeAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int getAsInt()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
339,"convenience method to get this array as a {@link String} if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid String.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.",getAsString,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->",0
340,"Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",nextBoolean,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
341,"Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as an int. If the next token's numeric value cannot be exactly
 represented by a Java {@code int}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as an int.","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.",nextInt,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public int nextInt() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
342,"This method serializes the specified object, including those of generic types, into its
 equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
 specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
 instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return Json representation of {@code src}
 @since 1.4","Adapter for java.sql.Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",toJsonTree,SqlDateTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonElement toJsonTree(Object src, Type typeOfSrc)"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SqlDateTypeAdapter"", ""entityFile"": ""SqlDateTypeAdapter.java""} -->",0
343,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",getAsLong,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
344,"Convenience method to get the specified member as a JsonArray.
 @param memberName name of the member being requested.
 @return the JsonArray corresponding to the specified member.","Consumes the next token from the JSON stream and asserts that it is the
 end of the current object.",getAsJsonArray,endObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void endObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
345,"convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 byte value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","convenience method to get this element as a String.
 @return get this element as a String.",getAsByte,getAsString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public byte getAsByte()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String getAsString()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
346,"convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid short.
 @throws IllegalStateException if the array has more than one element.","This method serializes the specified object into its equivalent Json representation.
 This method should be used when the specified object is not a generic type. This method uses
 {@link Class#getClass()} to get the type for the specified object, but the
 {@code getClass()} loses the generic type information because of the Type Erasure feature
 of Java. Note that this method works fine if the any of the object fields are of generic type,
 just the object itself should not be of a generic type. If the object is of generic type, use
 {@link #toJson(Object, Type)} instead. If you want to write out the object to a
 {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which Json representation is to be created setting for Gson
 @return Json representation of {@code src}.",getAsShort,toJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public short getAsShort()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String toJson(Object src)"", ""entityFile"": ""Gson.java""} -->",0
347,"This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2","convenience method to get this element as a primitive long.
 @return get this element as a primitive long.
 @throws NumberFormatException if the value contained is not a valid long.",fromJson,getAsLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
348,"Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.","Configures Gson to to serialize {@code Date} objects according to the style value provided.
 You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
 invocation will be used to decide the serialization format.
 <p>Note that this style value should be one of the predefined constants in the
 {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
 information on the valid style constants.</p>
 @param dateStyle the predefined date style that date objects will be serialized/deserialized
 to/from
 @param timeStyle the predefined style for the time portion of the date objects
 @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 @since 1.2",getAsJsonObject,setDateFormat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public GsonBuilder setDateFormat(int dateStyle, int timeStyle)"", ""entityFile"": ""GsonBuilder.java""} -->",0
349,"This method deserializes the specified Json into an object of the specified class. It is not
 suitable to use if the specified class is a generic type since it will not have the generic
 type information because of the Type Erasure feature of Java. Therefore, this method should not
 be used if the desired type is a generic type. Note that this method works fine if the any of
 the fields of the specified object are generics, just the object itself should not be a
 generic type. For the cases when the object is of generic type, invoke
 {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of
 a String, use {@link #fromJson(Reader, Class)} instead.
 @param <T> the type of the desired object
 @param json the string from which the object is to be deserialized
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 classOfT","The opening of a JSON object. Written using {@link JsonWriter#beginObject}
 and read using {@link JsonReader#beginObject}.",fromJson,BEGIN_OBJECT,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""EnumConstant"", ""entitySignature"": ""BEGIN_OBJECT"", ""entityFile"": ""JsonToken.java""} -->",0
350,"This method deserializes the Json read from the specified parse tree into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
 @param <T> the type of the desired object
 @param json the root of the parse tree of {@link JsonElement}s from which the object is to
 be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
 @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
 @since 1.3","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",fromJson,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
351,"convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
 first.
 @return get this element as a {@link JsonPrimitive}.
 @throws IllegalStateException if the element is of another type.","Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.",getAsJsonPrimitive,getAsJsonObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonPrimitive getAsJsonPrimitive()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",0
352,"convenience method to get this element as a {@link JsonObject}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
 first.
 @return get this element as a {@link JsonObject}.
 @throws IllegalStateException if the element is of another type.","convenience method to get this element as a {@link Boolean} value.
 @return get this element as a {@link Boolean} value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 boolean value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 ",getAsJsonObject,getAsBooleanWrapper,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Boolean getAsBooleanWrapper()"", ""entityFile"": ""JsonElement.java""} -->",0
353,"convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 char value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.3","Convenience method to get the specified member as a JsonObject.
 @param memberName name of the member being requested.
 @return the JsonObject corresponding to the specified member.",getAsCharacter,getAsJsonObject,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public char getAsCharacter()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonObject getAsJsonObject(String memberName)"", ""entityFile"": ""JsonObject.java""} -->",0
354,"convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid double.
 @throws IllegalStateException if the array has more than one element.","Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
 consuming it.
 @throws IllegalStateException if the next token is not a boolean or if
 this reader is closed.",getAsDouble,nextBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public double getAsDouble()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean nextBoolean() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
355,"convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
 * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.
 @since 1.2","Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
 consuming it. If the next token is a number, this method will return its
 string form.
 @throws IllegalStateException if the next token is not a string or if
 this reader is closed.",getAsBigDecimal,nextString,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public String nextString() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
356,"convenience method to get this element as a {@link JsonArray}. If the element is of some
 other type, a {@link IllegalStateException} will result. Hence it is best to use this method
 after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
 first.
 @return get this element as a {@link JsonArray}.
 @throws IllegalStateException if the element is of another type.","This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2",getAsJsonArray,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public JsonArray getAsJsonArray()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
357,"This method serializes the specified object, including those of generic types, into its
 equivalent Json representation. This method must be used if the specified object is a generic
 type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
 @param src the object for which JSON representation is to be created
 @param typeOfSrc The specific genericized type of src. You can obtain
 this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
 to get the type for {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @param writer Writer to which the Json representation of src needs to be written.
 @throws JsonIOException if there was a problem writing to the writer
 @since 1.2","Adapter for java.sql.Date. Although this class appears stateless, it is not.
 DateFormat captures its time zone and locale when it is created, which gives
 this class state. DateFormat isn't thread safe either, so this class has
 to synchronize its read and write methods.",toJson,SqlDateTypeAdapter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""SqlDateTypeAdapter"", ""entityFile"": ""SqlDateTypeAdapter.java""} -->",0
358,"convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid long.
 @throws IllegalStateException if the array has more than one element.","convenience method to get this element as a {@link BigInteger}.
 @return get this element as a {@link BigInteger}.
 @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.",getAsLong,getAsBigInteger,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigInteger getAsBigInteger()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
359,"This method deserializes the Json read from the specified reader into an object of the
 specified class. It is not suitable to use if the specified class is a generic type since it
 will not have the generic type information because of the Type Erasure feature of Java.
 Therefore, this method should not be used if the desired type is a generic type. Note that
 this method works fine if the any of the fields of the specified object are generics, just the
 object itself should not be a generic type. For the cases when the object is of generic type,
 invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a
 {@link Reader}, use {@link #fromJson(String, Class)} instead.
 @param <T> the type of the desired object
 @param json the reader producing the Json from which the object is to be deserialized.
 @param classOfT the class of T
 @return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2","convenience method to get this element as a {@link BigDecimal}.
 @return get this element as a {@link BigDecimal}.
 @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.",fromJson,getAsBigDecimal,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException"", ""entityFile"": ""Gson.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public BigDecimal getAsBigDecimal()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
360,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new object.","Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
 consuming it. If the next token is a string, this method will attempt to
 parse it as a long. If the next token's numeric value cannot be exactly
 represented by a Java {@code long}, this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed
 as a number, or exactly represented as a long.",beginObject,nextLong,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long nextLong() throws IOException"", ""entityFile"": ""JsonReader.java""} -->",0
361,"Consumes the next token from the JSON stream and asserts that it is the
 beginning of a new object.","convenience method to get this element as a Number.
 @return get this element as a Number.
 @throws NumberFormatException if the value contained is not a valid Number.",beginObject,getAsNumber,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void beginObject() throws IOException"", ""entityFile"": ""JsonReader.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
362,"convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
 long value.
 @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
 more than a single element.","This method deserializes the Json read from the specified reader into an object of the
 specified type. This method is useful if the specified object is a generic type. For
 non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a
 String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.
 @param <T> the type of the desired object
 @param json the reader producing Json from which the object is to be deserialized
 @param typeOfT The specific genericized type of src. You can obtain this type by using the
 {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
 {@code Collection<Foo>}, you should use:
 <pre>
 Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
 </pre>
 @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
 @throws JsonIOException if there was a problem reading from the Reader
 @throws JsonSyntaxException if json is not a valid representation for an object of type
 @since 1.2",getAsLong,fromJson,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public long getAsLong()"", ""entityFile"": ""JsonElement.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException"", ""entityFile"": ""Gson.java""} -->",0
363,"convenience method to get this array as a {@link Number} if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
 is not a valid Number.
 @throws IllegalStateException if the array has more than one element.()","convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.",getAsNumber,getAsBoolean,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Number getAsNumber()"", ""entityFile"": ""JsonArray.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean getAsBoolean()"", ""entityFile"": ""JsonPrimitive.java""} -->",0
364,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ",ReturnsSmartNulls,RETURNS_SMART_NULLS,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->",1
365,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable",VerificationOverTimeImpl,VerificationOverTimeImpl,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->",1
366,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.",charThat,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
367,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
368,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
369,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
370,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
371,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
372,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",charThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
373,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
374,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
375,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
376,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
377,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
378,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
379,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
380,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
381,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
382,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
383,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",byteThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
384,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
385,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
386,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
387,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",shortThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
388,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",intThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
389,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",intThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
390,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",intThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
391,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",longThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
392,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",longThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
393,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",floatThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->",1
394,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver",FieldInitializer,FieldInitializer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->",1
395,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation",NotifiedMethodInvocationReport,NotifiedMethodInvocationReport,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->",1
396,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ",CallsRealMethods,CALLS_REAL_METHODS,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->",1
397,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",ReturnsElementsOf,ReturnsElementsOf,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->",1
398,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5",ReturnsElementsOf,returnsElementsOf,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->",1
399,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
400,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
401,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
402,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
403,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
404,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
405,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
406,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
407,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
408,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ",reflectionEquals,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
409,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
410,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
411,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
412,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
413,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
414,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
415,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
416,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
417,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
418,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
419,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
420,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
421,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
422,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
423,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
424,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
425,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
426,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
427,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
428,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
429,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
430,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",mock,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",1
431,"Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.","Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
432,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
433,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
434,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
435,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
436,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
437,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
438,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
439,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
440,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
441,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
442,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
443,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
444,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
445,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
446,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
447,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
448,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
449,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
450,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
451,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
452,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
453,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
454,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
455,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
456,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
457,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
458,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5",ReturnsElementsOf,returnsElementsOf,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->",1
459,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
460,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
461,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
462,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
463,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
464,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
465,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
466,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
467,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
468,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",1
469,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","Use doThrow() when you want to stub the void method with an exception.
 A new exception instance will be created for each method invocation.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",doThrow,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",1
470,"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",doThrow,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",1
471,"Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",times,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
472,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode",atLeast,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",1
473,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",atLeast,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
474,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",atMost,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
475,"Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode","Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode",only,only,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode only()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode only()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
476,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",never,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",1
477,"Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",withSettings,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",1
478,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",charThat,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
479,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
480,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
481,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
482,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
483,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
484,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",charThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
485,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
486,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
487,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
488,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
489,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
490,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",booleanThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
491,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
492,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
493,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
494,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
495,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",byteThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
496,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
497,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
498,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
499,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",shortThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
500,"Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",intThat,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
501,"Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",intThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
502,"Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",intThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
503,"Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",longThat,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
504,"Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",longThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
505,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",floatThat,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",1
506,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",returnsLastArg,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",1
507,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
508,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
509,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
510,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
511,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
512,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
513,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
514,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
515,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
516,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
517,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
518,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
519,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
520,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
521,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
522,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
523,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
524,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
525,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
526,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
527,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
528,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
529,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
530,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
531,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
532,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
533,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
534,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
535,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
536,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
537,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
538,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
539,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
540,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
541,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
542,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
543,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
544,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
545,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
546,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
547,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
548,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
549,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
550,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
551,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
552,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
553,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
554,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
555,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
556,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
557,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
558,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
559,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
560,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
561,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
562,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
563,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
564,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
565,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
566,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
567,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
568,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
569,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
570,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
571,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
572,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
573,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
574,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
575,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
576,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
577,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
578,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
579,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
580,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
581,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
582,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
583,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
584,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
585,"float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
586,"float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
587,"float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
588,"int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
589,"int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
590,"long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",lt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
591,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
592,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
593,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
594,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
595,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
596,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
597,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
598,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
599,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
600,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
601,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
602,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
603,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
604,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
605,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
606,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
607,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
608,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
609,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
610,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
611,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
612,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
613,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
614,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
615,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
616,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
617,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
618,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",aryEq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
619,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
620,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
621,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
622,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
623,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
624,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
625,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
626,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
627,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
628,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
629,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
630,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
631,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
632,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
633,"boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
634,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
635,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
636,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
637,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
638,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
639,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
640,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
641,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
642,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
643,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
644,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
645,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
646,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
647,"byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
648,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
649,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
650,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
651,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
652,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
653,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
654,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
655,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
656,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
657,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
658,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
659,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
660,"char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
661,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
662,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
663,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
664,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
665,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
666,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
667,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
668,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
669,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
670,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
671,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
672,"double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
673,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
674,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
675,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
676,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
677,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
678,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
679,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
680,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
681,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
682,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
683,"float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
684,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
685,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
686,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
687,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
688,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
689,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
690,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
691,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
692,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
693,"int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
694,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
695,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
696,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
697,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
698,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
699,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
700,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
701,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
702,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
703,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
704,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
705,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
706,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
707,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
708,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
709,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
710,"short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",and,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
711,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
712,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
713,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
714,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
715,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
716,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
717,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
718,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
719,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
720,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
721,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
722,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
723,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
724,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
725,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
726,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
727,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
728,"long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
729,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
730,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
731,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
732,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
733,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
734,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
735,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
736,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
737,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
738,"char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",or,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
739,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
740,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
741,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
742,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
743,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
744,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
745,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
746,"Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
747,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
748,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
749,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
750,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
751,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
752,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
753,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
754,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
755,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
756,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
757,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
758,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
759,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
760,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
761,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
762,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
763,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
764,"long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
765,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
766,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
767,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
768,"float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
769,"double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
770,"double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
771,"double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
772,"char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
773,"char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
774,"boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",not,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",1
775,"Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.
 @since 1.10.0",MockitoException,MockitoSerializationIssue,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoSerializationIssue"", ""entityFile"": ""MockitoSerializationIssue.java""} -->",1
776,"float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",leq,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
777,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",longThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
778,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode",FieldInitializer,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
779,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",gt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
780,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",geq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
781,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
782,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
783,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",never,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
784,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",floatThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
785,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",intThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
786,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
787,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",leq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
788,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
789,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
790,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",intThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
791,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
792,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
793,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",reflectionEquals,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
794,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",leq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
795,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
796,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
797,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
798,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
799,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",mock,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
800,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
801,"Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",times,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
802,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",mock,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
803,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",FieldInitializer,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
804,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",ReturnsElementsOf,geq,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
805,"boolean argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean or(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
806,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
807,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",floatThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
808,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",CALLS_REAL_METHODS,floatThat,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
809,"Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
810,"short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
811,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",leq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
812,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
813,"Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",RETURNS_SMART_NULLS,not,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
814,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",append,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
815,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",longThat,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
816,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.",ReturnsSmartNulls,append,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
817,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
818,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
819,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
820,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",gt,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
821,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.",NotifiedMethodInvocationReport,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
822,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
823,"boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
824,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.",ReturnsSmartNulls,reflectionEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
825,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
826,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",charThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
827,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",never,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
828,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",FieldInitializer,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
829,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5",append,returnsElementsOf,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
830,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.",intThat,withSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->",0
831,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",reflectionEquals,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",0
832,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
833,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
834,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",lt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
835,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
836,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",byteThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
837,"Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
838,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",booleanThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
839,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
840,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",longThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
841,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
842,"byte argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",lt,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte lt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
843,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
844,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.",byteThat,reflectionEquals,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
845,"comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
846,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",intThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
847,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
848,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
849,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",VerificationOverTimeImpl,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
850,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",CALLS_REAL_METHODS,doThrow,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
851,"int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",not,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
852,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
853,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsLastArg,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
854,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",never,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
855,"Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
856,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
857,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",geq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
858,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
859,"Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",times,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
860,"Use doThrow() when you want to stub the void method with an exception.
 A new exception instance will be created for each method invocation.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",doThrow,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
861,"float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",geq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
862,"short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",leq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
863,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",geq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
864,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
865,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",VerificationOverTimeImpl,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
866,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
867,"short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",not,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
868,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",doThrow,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
869,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
870,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",ReturnsElementsOf,lt,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
871,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
872,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
873,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
874,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",FieldInitializer,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
875,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",byteThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
876,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",atMost,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
877,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",never,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
878,"Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",RETURNS_SMART_NULLS,aryEq,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
879,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",NotifiedMethodInvocationReport,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
880,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
881,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",FieldInitializer,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
882,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
883,"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",doThrow,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
884,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
885,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",charThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
886,"short argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short or(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
887,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
888,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",shortThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
889,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",reflectionEquals,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
890,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",reflectionEquals,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
891,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",booleanThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
892,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",reflectionEquals,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
893,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",NotifiedMethodInvocationReport,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
894,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",append,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
895,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
896,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",longThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
897,"Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",append,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
898,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.",CallsRealMethods,append,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
899,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsLastArg,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
900,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",floatThat,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
901,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",byteThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
902,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
903,"Optional Answer to be used with Mockito#mock(Class, Answer).
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer returns SmartNull instead of null.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see ReturnsMoreEmptyValues)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 //calling unstubbed method here:
 Stuff stuff = mock.getStuff();
 //using object returned by unstubbed call:
 stuff.doSomething();
 //Above doesn't yield NullPointerException this time!
 //Instead, SmartNullPointerException is thrown.
 //Exception's cause links to unstubbed mock.getStuff() - just click on the stack trace.
 ","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",RETURNS_SMART_NULLS,defaultAnswer,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""RETURNS_SMART_NULLS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
904,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
905,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",ReturnsSmartNulls,floatThat,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->",0
906,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
907,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",VerificationOverTimeImpl,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
908,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",atMost,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
909,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",atLeast,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
910,"Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",times,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
911,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",booleanThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
912,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
913,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",floatThat,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
914,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
915,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",NotifiedMethodInvocationReport,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
916,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",shortThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
917,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
918,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
919,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",reflectionEquals,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
920,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",booleanThat,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
921,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
922,"double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",lt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
923,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",VerificationOverTimeImpl,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
924,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",aryEq,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
925,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",doThrow,floatThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
926,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
927,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",append,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",0
928,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
929,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
930,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
931,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",booleanThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
932,"Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",doThrow,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
933,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation",shortThat,NotifiedMethodInvocationReport,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->",0
934,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
935,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
936,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
937,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.",FieldInitializer,CallsRealMethods,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->",0
938,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",CALLS_REAL_METHODS,append,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
939,"byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
940,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",CallsRealMethods,not,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
941,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",mock,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
942,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
943,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",byteThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
944,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",atMost,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
945,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",VerificationOverTimeImpl,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
946,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",CALLS_REAL_METHODS,aryEq,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
947,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atMost,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
948,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.
 @since 1.10.0",atLeast,MockitoSerializationIssue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoSerializationIssue"", ""entityFile"": ""MockitoSerializationIssue.java""} -->",0
949,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,longThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
950,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5",NotifiedMethodInvocationReport,returnsLastArg,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
951,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
952,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",shortThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
953,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",gt,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
954,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",reflectionEquals,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
955,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
956,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",floatThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
957,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
958,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",shortThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
959,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
960,"Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",doubleThat,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
961,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",ReturnsSmartNulls,aryEq,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
962,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
963,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",VerificationOverTimeImpl,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
964,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",intThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
965,"Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
966,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",reflectionEquals,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
967,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
968,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",atMost,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
969,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",longThat,atMost,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
970,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
971,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",charThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
972,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
973,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
974,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",VerificationOverTimeImpl,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
975,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",ReturnsElementsOf,booleanThat,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
976,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
977,"Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",withSettings,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
978,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
979,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",booleanThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
980,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
981,"Allows creating custom float argument matchers.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",floatThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(ArgumentMatcher<Float> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
982,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf",append,ReturnsElementsOf,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->",0
983,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",FieldInitializer,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
984,"double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
985,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",booleanThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
986,"int argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int geq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
987,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atLeast,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
988,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
989,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0",ReturnsSmartNulls,reflectionEquals,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
990,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
991,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
992,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
993,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.",shortThat,FieldInitializer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->",0
994,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsElementsOf,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
995,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
996,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
997,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",append,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
998,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",never,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
999,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie""));
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 See javadoc for MockSettings to learn about possible mock settings.
 @return mock settings instance with defaults.",append,withSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MockSettings withSettings()"", ""entityFile"": ""Mockito.java""} -->",0
1000,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",append,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1001,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",reflectionEquals,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1002,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","float argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float and(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1003,"Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1004,"Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Deep comparison of array of boolean. Length and all
 values are compared.
 The method #append(boolean, boolean) is used.
 @param lhs the left hand boolean[]
 @param rhs the right hand boolean[]
 @return EqualsBuilder - used to chain calls.",doubleThat,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean[] lhs, boolean[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1005,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","double argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double lt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1006,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",byteThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1007,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",atLeast,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
1008,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",intThat,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
1009,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",VerificationOverTimeImpl,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1010,"double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1011,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",gt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1012,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1013,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",atLeast,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1014,"Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",atLeast,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1015,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",leq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1016,"Allows creating custom double argument matchers.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",doubleThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(ArgumentMatcher<Double> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1017,"int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","int argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int and(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1018,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1019,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",doThrow,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1020,"Allows creating custom boolean argument matchers.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return false.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",booleanThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1021,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",aryEq,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
1022,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1023,"Allows at-least-x verification within given timeout. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atLeast,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1024,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1025,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",returnsElementsOf,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1026,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",intThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
1027,"short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",geq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1028,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",geq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1029,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1030,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1031,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",byteThat,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1032,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",CALLS_REAL_METHODS,append,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1033,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1034,"double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1035,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.",FieldInitializer,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1036,"short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1037,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1038,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",atMost,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1039,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",reflectionEquals,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1040,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",longThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1041,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",reflectionEquals,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1042,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Allows verifying exact number of invocations within given timeout
 <pre class=""code""><code class=""java"">
 verify(mock, timeout(100).times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode",intThat,times,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
1043,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",byteThat,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
1044,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",doubleThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1045,"short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1046,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",longThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1047,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1048,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",FieldInitializer,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1049,"Test if two Objects are equal using their
 equals method.
 @param lhs the left hand object
 @param rhs the right hand object
 @return EqualsBuilder - used to chain calls.","long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1050,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.",ReturnsSmartNulls,append,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1051,"@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",never,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1052,"Deep comparison of array of byte. Length and all
 values are compared.
 The method #append(byte, byte) is used.
 @param lhs the left hand byte[]
 @param rhs the right hand byte[]
 @return EqualsBuilder - used to chain calls.","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte[] lhs, byte[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1053,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1054,"comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",lt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1055,"short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",geq,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1056,"byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1057,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",doubleThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1058,"Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode","long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",only,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode only()"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1059,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",ReturnsElementsOf,and,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1060,"long argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",geq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long geq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short and(short first, short second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1061,"argument greater than or equal the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",geq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T geq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1062,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",longThat,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1063,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",charThat,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
1064,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1065,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1066,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","double argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",returnsLastArg,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double and(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1067,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",append,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
1068,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1069,"float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",or,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
1070,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",byteThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1071,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1072,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1073,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5",FieldInitializer,returnsArgAt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->",0
1074,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int[] aryEq(int[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1075,"short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",geq,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1076,"Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.","short argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short gt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1077,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 Also you might better want to use the static factory there
 org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)
 @see org.mockito.AdditionalAnswers","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",ReturnsElementsOf,or,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1078,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1079,"Creates mock with a specified strategy for its answers to interactions.
 It's quite an advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 See examples in javadoc for Mockito class
 @param classToMock class or interface to mock
 @param defaultAnswer default answer for unstubbed methods
 @return mock object","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",mock,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T mock(Class<T> classToMock, Answer defaultAnswer)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1080,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1081,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.
 @since 1.10.0",append,MockitoSerializationIssue,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoSerializationIssue"", ""entityFile"": ""MockitoSerializationIssue.java""} -->",0
1082,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1083,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
1084,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param throwable Tha throwable raised by the method invocation","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1085,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",NotifiedMethodInvocationReport,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1086,"float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1087,"Optional Answer that adds partial mocking support
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",CallsRealMethods,or,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""CallsRealMethods"", ""entityFile"": ""CallsRealMethods.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1088,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",append,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
1089,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1090,"char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1091,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","Performs a deep comparison of two Object arrays.
 This also will be called for the top level of
 multi-dimensional, ragged, and multi-typed arrays.
 @param lhs the left hand Object[]
 @param rhs the right hand Object[]
 @return EqualsBuilder - used to chain calls.",reflectionEquals,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(Object[] lhs, Object[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1092,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1093,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","Test if two doubles are equal by testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand double
 @param rhs the right hand double
 @return EqualsBuilder - used to chain calls.",VerificationOverTimeImpl,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double lhs, double rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1094,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",doubleThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1095,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",byteThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1096,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Throwable[]) style:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException(""one"")).
 doThrow(new RuntimeException(""two""))
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Throwable[])
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",charThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
1097,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",ReturnsSmartNulls,lt,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1098,"float argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float gt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1099,"Deep comparison of array of long. Length and all
 values are compared.
 The method #append(long, long) is used.
 @param lhs the left hand long[]
 @param rhs the right hand long[]
 @return EqualsBuilder - used to chain calls.","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long[] lhs, long[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1100,"Test if two shorts are equal.
 @param lhs the left hand short
 @param rhs the right hand short
 @return EqualsBuilder - used to chain calls.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short lhs, short rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1101,"Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",doubleThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1102,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode",append,only,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode only()"", ""entityFile"": ""Mockito.java""} -->",0
1103,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",returnsElementsOf,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsElementsOf(Collection<?> elements)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
1104,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","short argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atMost,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short geq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1105,"byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1106,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",returnsLastArg,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1107,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","double argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",FieldInitializer,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double geq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1108,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1109,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","boolean array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",shortThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean[] aryEq(boolean[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1110,"byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","double argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double not(double first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1111,"Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","boolean argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return false.",charThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean not(boolean first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1112,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1113,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1114,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).
 @param timer Checker of whether the duration of the verification is still acceptable","Allows creating custom char argument matchers.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.",VerificationOverTimeImpl,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(ArgumentMatcher<Character> matcher)"", ""entityFile"": ""Matchers.java""} -->",0
1115,"Deep comparison of array of char. Length and all
 values are compared.
 The method #append(char, char) is used.
 @param lhs the left hand char[]
 @param rhs the right hand char[]
 @return EqualsBuilder - used to chain calls.","int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char[] lhs, char[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1116,"Use doThrow() when you want to stub the void method with an exception.
 A new exception instance will be created for each method invocation.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",doThrow,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1117,"Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","short argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short leq(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1118,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode",VerificationOverTimeImpl,only,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode only()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
1119,"Test if two floats are equal byt testing that the
 pattern of bits returned by doubleToLong are equal.
 This handles NaNs, Infinities, and -0.0.
 It is compatible with the hash code generated by
 HashCodeBuilder.
 @param lhs the left hand float
 @param rhs the right hand float
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float lhs, float rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1120,"Allows creating custom int argument matchers.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",intThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(ArgumentMatcher<Integer> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1121,"Deep comparison of array of double. Length and all
 values are compared.
 The method #append(double, double) is used.
 @param lhs the left hand double[]
 @param rhs the right hand double[]
 @return EqualsBuilder - used to chain calls.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",append,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(double[] lhs, double[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1122,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @param excludeFields array of field names to exclude from testing
 @return true if the two Objects have tested equals.
 @since 2.0
 ","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1123,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1124,"Enables integrating hamcrest matchers that match primitive long arguments.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",longThat,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(Matcher<Long> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1125,"@deprecated
 Deprecated
 Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",atMost,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""VerificationWithTimeout.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1126,"Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1127,"short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","long argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long or(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1128,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",CALLS_REAL_METHODS,intThat,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1129,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",FieldInitializer,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1130,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the TestTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @return true if the two Objects have tested equals.","double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",reflectionEquals,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1131,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1132,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","Enables integrating hamcrest matchers that match primitive int arguments.
 Note that #argThat will not work with primitive int matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",reflectionEquals,intThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int intThat(Matcher<Integer> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1133,"Allows creating custom long argument matchers.
 Note that #argThat will not work with primitive long matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver",longThat,FieldInitializer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long longThat(ArgumentMatcher<Long> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->",0
1134,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",aryEq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1135,"short argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","short array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",lt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short lt(short value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short[] aryEq(short[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1136,"Returns the last parameter of an invocation.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
 doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",returnsLastArg,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsLastArg()"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1137,"long argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long leq(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1138,"Allows checking if given method was the only one invoked. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, only()).someMethod();
 //above is a shorthand for following 2 lines of code:
 verify(mock).someMethod();
 verifyNoMoreInvocations(mock);
 See also Mockito#verifyNoMoreInteractions(Object...)
 See examples in javadoc for Mockito class
 @return verification mode","Enables integrating hamcrest matchers that match primitive double arguments.
 Note that #argThat will not work with primitive double matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",only,doubleThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode only()"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double doubleThat(Matcher<Double> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1139,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",booleanThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1140,"comparable argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.","float array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ",gt,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T gt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float[] aryEq(float[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1141,"Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",booleanThat,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1142,"Test if two ints are equal.
 @param lhs the left hand int
 @param rhs the right hand int
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int lhs, int rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1143,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1144,"Test if two bytes are equal.
 @param lhs the left hand byte
 @param rhs the right hand byte
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(byte lhs, byte rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1145,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",VerificationOverTimeImpl,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1146,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Allows mock creation with additional mock settings.
 Don't use it too often.
 Consider writing simple tests that use simple mocks.
 Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 Examples of mock settings:
 <pre class=""code""><code class=""java"">
 //Creates mock with different default answer & name
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 );
 //Creates mock with different default answer, descriptive name and extra interfaces
 Foo mock = mock(Foo.class, withSettings()
 .defaultAnswer(RETURNS_SMART_NULLS)
 .name(""cool mockie"")
 .extraInterfaces(Bar.class));
 MockSettings has been introduced for two reasons.
 Firstly, to make it easy to add another mock setting when the demand comes.
 Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.",FieldInitializer,MockSettings,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""MockSettings"", ""entityFile"": ""MockSettings.java""} -->",0
1147,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",shortThat,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1148,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 If the testTransients parameter is set to true, transient
 members will be tested, otherwise they are ignored, as they are likely
 derived fields, and not part of the value of the Object.
 Static fields will not be included. Superclass fields will be appended
 up to and including the specified superclass. A null superclass is treated
 as java.lang.Object.
 @param lhs this object
 @param rhs the other object
 @param testTransients whether to include transient fields
 @param reflectUpToClass the superclass to reflect up to (inclusive),
 may be null
 @return true if the two Objects have tested equals.
 @since 2.0","Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",reflectionEquals,byteThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1149,"This method uses reflection to determine if the two Objects
 are equal.
 It uses AccessibleObject.setAccessible to gain access to private
 fields. This means that it will throw a security exception if run under
 a security manager, if the permissions are not set up correctly. It is also
 not as efficient as testing explicitly.
 Transient members will be not be tested, as they are likely derived
 fields, and not part of the value of the Object.
 Static fields will not be tested. Superclass fields will be included.
 @param lhs this object
 @param rhs the other object
 @return true if the two Objects have tested equals.","byte argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",reflectionEquals,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean reflectionEquals(Object lhs, Object rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte not(byte first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1150,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","byte argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",leq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte or(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1151,"byte argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","comparable argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",gt,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte gt(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T lt(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1152,"Prepare initializer with the given field on the given instance.
 This constructor fail fast if the field type cannot be handled.
 @param fieldOwner Instance of the test.
 @param field Field to be initialize.
 @param argResolver Constructor parameters resolver","Allows at-least-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atLeast(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param minNumberOfInvocations minimum number of invocations
 @return verification mode",FieldInitializer,atLeast,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)"", ""entityFile"": ""FieldInitializer.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atLeast(int minNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->",0
1153,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","byte argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",charThat,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte and(byte first, byte second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1154,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","short argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",leq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short not(short first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1155,"byte argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","boolean argument that matches both given matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return false.",geq,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte geq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean and(boolean first, boolean second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1156,"Deep comparison of array of float. Length and all
 values are compared.
 The method #append(float, float) is used.
 @param lhs the left hand float[]
 @param rhs the right hand float[]
 @return EqualsBuilder - used to chain calls.","char argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",append,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(float[] lhs, float[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char or(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1157,"Allows verifying exact number of invocations. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, times(2)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param wantedNumberOfInvocations wanted number of invocations
 @return verification mode","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",times,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode times(int wantedNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1158,"Allows creating custom byte argument matchers.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","Use it for stubbing consecutive calls in Mockito#doThrow(Class) style:
 <pre class=""code""><code class=""java"">
 doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
 .when(mock).someVoidMethod();
 See javadoc for Mockito#doThrow(Class)
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.0.0",byteThat,doThrow,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(ArgumentMatcher<Byte> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""Stubber doThrow(Class<? extends Throwable> toBeThrown)"", ""entityFile"": ""Stubber.java""} -->",0
1159,"Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.","Specifies default answers to interactions.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 It is the default answer so it will be used only when you don't stub the method call.
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
 Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
 //Below does exactly the same:
 Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 @param defaultAnswer default answer to be used by mock when not stubbed
 @return settings instance so that you can fluently specify other settings",append,defaultAnswer,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""MockSettings defaultAnswer(Answer defaultAnswer)"", ""entityFile"": ""MockSettings.java""} -->",0
1160,"Enables integrating hamcrest matchers that match primitive float arguments.
 Note that #argThat will not work with primitive float matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",floatThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float floatThat(Matcher<Float> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1161,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive boolean arguments.
 Note that #argThat will not work with primitive boolean matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return false.",append,booleanThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static boolean booleanThat(Matcher<Boolean> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1162,"Test if two chars are equal.
 @param lhs the left hand char
 @param rhs the right hand char
 @return EqualsBuilder - used to chain calls.","Deep comparison of array of int. Length and all
 values are compared.
 The method #append(int, int) is used.
 @param lhs the left hand int[]
 @param rhs the right hand int[]
 @return EqualsBuilder - used to chain calls.",append,append,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(char lhs, char rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(int[] lhs, int[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->",0
1163,"Allows creating custom short argument matchers.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for Matchers class
 @param matcher decides whether argument matches
 @return 0.","char argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",shortThat,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(ArgumentMatcher<Short> matcher)"", ""entityFile"": ""Matchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char not(char first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1164,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","long argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long lt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1165,"Returns the parameter of an invocation at the given position.
 This additional answer could be used at stub time using the
 then|do|willorg.mockito.stubbing.Answer methods. For example :
 <pre class=""code""><code class=""java"">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
 doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)
 @param <T> Return type of the invocation.
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5","byte argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",returnsArgAt,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Answer<T> returnsArgAt(int position)"", ""entityFile"": ""AdditionalAnswers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte leq(byte value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1166,"Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing","char array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",doThrow,aryEq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char[] aryEq(char[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1167,"long argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","long argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.",and,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long and(long first, long second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long not(long first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1168,"long argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","float argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",gt,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long gt(long value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float not(float first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1169,"int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","char argument that matches both given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.
 ",gt,and,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char and(char first, char second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1170,"Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument greater than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",charThat,geq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float geq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1171,"Returns elements of the collection. Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return.
 <pre class=""code""><code class=""java"">
 //this:
 when(mock.foo()).thenReturn(1, 2, 3);
 //is equivalent to:
 when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 @deprecated Use org.mockito.AdditionalAnswers#returnsElementsOf","Use doThrow() when you want to stub the void method with an exception.
 Stubbing voids requires different approach from Mockito#when(Object) because the compiler
 does not like void methods inside brackets...
 Example:
 <pre class=""code""><code class=""java"">
 doThrow(new RuntimeException()).when(mock).someVoidMethod();
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing",ReturnsElementsOf,doThrow,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsElementsOf"", ""entityFile"": ""ReturnsElementsOf.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static Stubber doThrow(Throwable... toBeThrown)"", ""entityFile"": ""Mockito.java""} -->",0
1172,"int argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.","Raised by mockito to emit an error either due to Mockito, or due to the User.
 The stack trace is filtered from mockito calls if you are using #getStackTrace().
 For debugging purpose though you can still access the full stacktrace using #getUnfilteredStackTrace().
 However note that other calls related to the stackTrace will refer to the filter stacktrace.",leq,MockitoException,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int leq(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MockitoException"", ""entityFile"": ""MockitoException.java""} -->",0
1173,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","double argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double gt(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1174,"Deep comparison of array of short. Length and all
 values are compared.
 The method #append(short, short) is used.
 @param lhs the left hand short[]
 @param rhs the right hand short[]
 @return EqualsBuilder - used to chain calls.","@deprecated
 Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
 and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never().
 To avoid compilation errors upon upgrade the method is deprecated and it throws a ""friendly reminder"" exception.
 In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
 Do you want to find out more? See <a href=""http://code.google.com/p/mockito/issues/detail?id=235"">issue 235
 @return verification mode",append,never,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(short[] lhs, short[] rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationMode never()"", ""entityFile"": ""VerificationWithTimeout.java""} -->",0
1175,"Test if two long s are equal.
 @param lhs
 the left hand long
 @param rhs
 the right hand long
 @return EqualsBuilder - used to chain calls.","Enables integrating hamcrest matchers that match primitive char arguments.
 Note that #argThat will not work with primitive char matchers due to NullPointerException auto-unboxing caveat.
 See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",append,charThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(long lhs, long rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static char charThat(Matcher<Character> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1176,"double argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ","int argument greater than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",leq,gt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double leq(double value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int gt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1177,"Test if two booleanss are equal.
 @param lhs the left hand boolean
 @param rhs the right hand boolean
 @return EqualsBuilder - used to chain calls.","float argument less than or equal to the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",append,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public EqualsBuilder append(boolean lhs, boolean rhs)"", ""entityFile"": ""EqualsBuilder.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float leq(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1178,"int argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",or,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int or(int first, int second)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1179,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","comparable argument less than or equal the given value details.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return null.",atMost,leq,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T leq(Comparable<T> value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1180,"Allows at-most-x verification. E.g:
 <pre class=""code""><code class=""java"">
 verify(mock, atMost(3)).someMethod(""some arg"");
 See examples in javadoc for Mockito class
 @param maxNumberOfInvocations max number of invocations
 @return verification mode","Enables integrating hamcrest matchers that match primitive short arguments.
 Note that #argThat will not work with primitive short matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.",atMost,shortThat,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static VerificationMode atMost(int maxNumberOfInvocations)"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static short shortThat(Matcher<Short> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->",0
1181,"Optional Answer that can be used with
 Mockito#mock(Class, Answer)
 This implementation can be helpful when working with legacy code. Unstubbed
 methods often return null. If your code uses the object returned by an
 unstubbed call you get a NullPointerException. This implementation of
 Answer returns SmartNulls instead of nulls.
 SmartNull gives nicer exception message than NPE because it points out the
 line where unstubbed method was called. You just click on the stack trace.
 ReturnsSmartNulls first tries to return ordinary return values (see
 ReturnsMoreEmptyValues) then it tries to return SmartNull. If the
 return type is not mockable (e.g. final) then ordinary null is returned.
 ReturnsSmartNulls will be probably the default return values strategy in
 Mockito 2.0","byte array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.",ReturnsSmartNulls,aryEq,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""ReturnsSmartNulls"", ""entityFile"": ""ReturnsSmartNulls.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte[] aryEq(byte[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1182,"Create this verification mode, to be used to verify invocation ongoing data later.
 @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
 @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
 @param delegate The verification mode to delegate overall success or failure to
 @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
 org.mockito.verification.VerificationWithTimeout, or to only return once
 the delegate is satisfied and the full duration has passed (as in
 org.mockito.verification.VerificationAfterDelay).","float argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.
 ",VerificationOverTimeImpl,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)"", ""entityFile"": ""VerificationOverTimeImpl.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float lt(float value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1183,"Build a new org.mockito.listeners.MethodInvocationReport with a return value.
 @param invocation Information on the method call
 @param returnedValue The value returned by the method invocation","int argument less than the given value.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given value.
 @return 0.",NotifiedMethodInvocationReport,lt,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)"", ""entityFile"": ""NotifiedMethodInvocationReport.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int lt(int value)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1184,"Optional Answer to be used with Mockito#mock(Class, Answer)
 Answer can be used to define the return values of unstubbed invocations.
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 As usual you are going to read the partial mock warning:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't...
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 However, there are rare cases when partial mocks come handy:
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 Example:
 <pre class=""code""><code class=""java"">
 Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();
 when(mock.getSomething()).thenReturn(fakeValue);
 // now fakeValue is returned
 value = mock.getSomething();
 ","int argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the argument matcher.
 @return 0.
 ",CALLS_REAL_METHODS,not,"<!-- META {""entityType"": ""Field"", ""entitySignature"": ""CALLS_REAL_METHODS"", ""entityFile"": ""Mockito.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static int not(int first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1185,"Enables integrating hamcrest matchers that match primitive byte arguments.
 Note that #argThat will not work with primitive byte matchers due to NullPointerException auto-unboxing caveat.
 * See examples in javadoc for MockitoHamcrest class
 @param matcher decides whether argument matches
 @return 0.","float argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",byteThat,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static byte byteThat(Matcher<Byte> matcher)"", ""entityFile"": ""MockitoHamcrest.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static float or(float first, float second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1186,"double array argument that is equal to the given array, i.e. it has to
 have the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.
 ","double argument that matches any of the given argument matchers.
 See examples in javadoc for AdditionalMatchers class
 @param first
 placeholder for the first argument matcher.
 @param second
 placeholder for the second argument matcher.
 @return 0.",aryEq,or,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double[] aryEq(double[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static double or(double first, double second)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1187,"long array argument that is equal to the given array, i.e. it has to have
 the same length, and each element has to be equal.
 See examples in javadoc for AdditionalMatchers class
 @param value
 the given array.
 @return null.","Object argument that does not match the given argument matcher.
 See examples in javadoc for AdditionalMatchers class
 @param <T>
 the type of the object, it is passed through to prevent casts.
 @param first
 placeholder for the argument matcher.
 @return null.",aryEq,not,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static long[] aryEq(long[] value)"", ""entityFile"": ""AdditionalMatchers.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static T not(T first)"", ""entityFile"": ""AdditionalMatchers.java""} -->",0
1188,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message",format,format,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->",1
1189,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",put,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",1
1190,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1191,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1192,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1193,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1194,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1195,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1196,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1197,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1198,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1199,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1200,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1201,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",isTraceEnabled,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1202,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",isTraceEnabled,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1203,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",isTraceEnabled,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1204,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isTraceEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1205,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",1
1206,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",1
1207,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1208,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",1
1209,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1210,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1211,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1212,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1213,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1214,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1215,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1216,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1217,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1218,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1219,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1220,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1221,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1222,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1223,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1224,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1225,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1226,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",1
1227,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1228,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1229,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1230,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1231,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1232,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1233,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1234,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1235,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1236,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1237,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1238,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1239,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1240,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1241,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1242,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1243,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1244,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1245,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1246,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1247,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1248,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1249,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1250,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1251,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1252,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1253,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1254,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1255,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1256,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1257,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1258,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1259,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1260,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1261,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1262,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1263,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1264,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1265,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1266,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1267,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1268,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1269,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1270,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1271,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1272,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1273,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1274,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1275,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1276,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1277,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1278,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1279,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1280,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1281,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1282,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1283,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1284,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1285,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1286,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",isDebugEnabled,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1287,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",isDebugEnabled,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1288,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isDebugEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1289,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",1
1290,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1291,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1292,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1293,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1294,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1295,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1296,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1297,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1298,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1299,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1300,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1301,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1302,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1303,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1304,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1305,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1306,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1307,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1308,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1309,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1310,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1311,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1312,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1313,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1314,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1315,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1316,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1317,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1318,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1319,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",put,putCloseable,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",1
1320,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1321,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1322,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1323,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1324,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1325,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1326,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1327,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1328,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1329,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1330,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1331,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1332,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1333,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1334,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1335,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1336,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1337,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1338,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1339,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1340,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1341,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1342,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1343,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1344,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1345,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1346,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1347,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1348,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1349,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1350,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1351,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1352,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1353,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1354,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1355,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1356,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",isInfoEnabled,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1357,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isInfoEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1358,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1359,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1360,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1361,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1362,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1363,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1364,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1365,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1366,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1367,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1368,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1369,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1370,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1371,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1372,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1373,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1374,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1375,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1376,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1377,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1378,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1379,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1380,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1381,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1382,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1383,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1384,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1385,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1386,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1387,"This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1388,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1389,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1390,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1391,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1392,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1393,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1394,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1395,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1396,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1397,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1398,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1399,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1400,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1401,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1402,"Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",isWarnEnabled,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",1
1403,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1404,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1405,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1406,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1407,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1408,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1409,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1410,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1411,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1412,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1413,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1414,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1415,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1416,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1417,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1418,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1419,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1420,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1421,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",1
1422,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1423,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1424,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1425,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1426,"This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",1
1427,"This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1428,"This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1429,"This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",1
1430,"This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1431,"This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",1
1432,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",log,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1433,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1434,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",format,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1435,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",getLogger,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1436,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1437,"Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",error,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1438,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1439,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1440,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",put,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1441,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1442,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1443,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1444,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",getLogger,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1445,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",format,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",0
1446,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1447,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isDebugEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1448,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1449,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1450,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1451,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1452,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",isDebugEnabled,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1453,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1454,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1455,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1456,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1457,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1458,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1459,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",put,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1460,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1461,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1462,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1463,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1464,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1465,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1466,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1467,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1468,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",put,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1469,"This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1470,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",error,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1471,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1472,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1473,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1474,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",log,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1475,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1476,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",MessageFormatter,putCloseable,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
1477,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",format,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1478,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",isTraceEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1479,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",debug,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1480,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1481,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1482,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1483,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",isInfoEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1484,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1485,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",debug,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1486,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1487,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1488,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",put,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1489,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",info,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1490,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1491,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isDebugEnabled,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1492,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1493,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1494,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",MessageFormatter,info,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1495,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1496,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",put,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1497,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",isInfoEnabled,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1498,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1499,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",putCloseable,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1500,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",format,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1501,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1502,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1503,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1504,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1505,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1506,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1507,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1508,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1509,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1510,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1511,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1512,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1513,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4",format,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1514,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",debug,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1515,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",put,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1516,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ",log,MessageFormatter,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->",0
1517,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",getLogger,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1518,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1519,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1520,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1521,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",MessageFormatter,debug,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1522,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1523,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",format,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1524,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",MessageFormatter,trace,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1525,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",warn,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1526,"Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1527,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1528,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",put,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1529,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",MessageFormatter,error,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1530,"Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",isErrorEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1531,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1532,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",debug,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1533,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1534,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",log,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1535,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",info,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1536,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",format,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1537,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isDebugEnabled,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1538,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1539,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",error,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1540,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1541,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",warn,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1542,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1543,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",trace,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1544,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",getLogger,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1545,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4",MessageFormatter,trace,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1546,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1547,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1548,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1549,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1550,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",isTraceEnabled,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",0
1551,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1552,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1553,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1554,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",trace,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1555,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1556,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1557,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1558,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1559,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.",format,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->",0
1560,"Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1561,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1562,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1563,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1564,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1565,"Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",format,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1566,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1567,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Performs a two argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}. My name is {}.&quot;, &quot;Alice&quot;, &quot;Bob&quot;);
 will return the string ""Hi Alice. My name is Bob."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg1
 The argument to be substituted in place of the first formatting
 anchor
 @param arg2
 The argument to be substituted in place of the second formatting
 anchor
 @return The formatted message",log,format,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(final String messagePattern, Object arg1, Object arg2)"", ""entityFile"": ""MessageFormatter.java""} -->",0
1568,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1569,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",MessageFormatter,put,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
1570,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1571,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",putCloseable,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1572,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1573,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1574,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1575,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1576,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1577,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1578,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1579,"Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",isWarnEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1580,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1581,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1582,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1583,"Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",isErrorEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1584,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1585,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1586,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1587,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1588,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",info,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1589,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1590,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",format,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1591,"This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",error,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1592,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1593,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1594,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1595,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1596,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",getLogger,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1597,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",debug,isInfoEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1598,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",log,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1599,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1600,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1601,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1602,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1603,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1604,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",trace,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1605,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1606,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",put,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1607,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",isDebugEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1608,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1609,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",trace,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1610,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1611,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1612,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1613,"This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1614,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1615,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",debug,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1616,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
1617,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4",getLogger,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->",0
1618,"This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1619,"Similar to #isTraceEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the TRACE level,
 false otherwise.
 @since 1.4","This method is similar to #debug(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",isTraceEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isTraceEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1620,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",getLogger,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1621,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",putCloseable,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1622,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1623,"This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,putCloseable,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
1624,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",MessageFormatter,info,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1625,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",trace,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1626,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1627,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1628,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 This method return a Closeable object who can remove key when
 close is called.
 Useful with Java 7 for example :
 try(MDC.MDCCloseable closeable = MDC.putCloseable(key, value)) {
 ....
 }
 @param key non-null key
 @param val value to put in the map
 @return a Closeable who can remove key when close
 is called.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,putCloseable,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static MDCCloseable putCloseable(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
1629,"This method is similar to #info(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the ERROR level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for ERROR. The variants taking
 #error(String, Object) one and #error(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1630,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1631,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged",isDebugEnabled,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1632,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1633,"This method is similar to #trace(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param argArray an array of arguments
 @since 1.4","Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object... argArray)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->",0
1634,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #error(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1635,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",format,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1636,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument",trace,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1637,"Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.","This method is similar to #warn(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",isDebugEnabled,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1638,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",info,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1639,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",trace,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1640,"Log a message at the TRACE level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the TRACE level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for TRACE. The variants taking #trace(String, Object) one and
 #trace(String, Object, Object) two arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments
 @since 1.4","This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1641,"Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",isInfoEnabled,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1642,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1643,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1644,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1645,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",trace,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1646,"Put a diagnostic context value (the val parameter) as identified with the
 key parameter into the current thread's diagnostic context map. The
 key parameter cannot be null. The val parameter
 can be null only if the underlying implementation supports it.
 This method delegates all work to the MDC of the underlying logging system.
 @param key non-null key
 @param val value to put in the map
 @throws IllegalArgumentException
 in case the ""key"" parameter is null","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",put,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static void put(String key, String val) throws IllegalArgumentException"", ""entityFile"": ""MDC.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1647,"This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument","Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 Note that contrary to log4j, the val parameter can be null.
 If the current thread does not have a context map it is created as a side
 effect of this call.
 @throws IllegalArgumentException
 in case the ""key"" parameter is null",debug,put,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""BasicMDCAdapter.java""} -->",0
1648,"Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument","This method is similar to #warn(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",warn,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1649,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",put,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1650,"This method is similar to #debug(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",debug,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1651,"Performs single argument substitution for the 'messagePattern' passed as
 parameter.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;);
 will return the string ""Hi there."".
 @param messagePattern
 The message pattern which will be parsed and formatted
 @param arg
 The argument to be substituted in place of the formatting anchor
 @return The formatted message","Log a message at the ERROR level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",format,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public static final FormattingTuple format(String messagePattern, Object arg)"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1652,"This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4","Similar to #isDebugEnabled() method except that the
 marker data is also taken into account.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the DEBUG level,
 false otherwise.",trace,isDebugEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isDebugEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1653,"Log a message with the specific Marker at the TRACE level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged
 @since 1.4","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",trace,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1654,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1655,"Log a message at the ERROR level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the ERROR level.
 @param format the format string
 @param arg the argument","This method is similar to #error(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument",error,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1656,"This method is similar to #warn(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message with the specific Marker at the ERROR level.
 @param marker The marker specific to this log statement
 @param msg the message string to be logged",warn,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->",0
1657,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",debug,error,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1658,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","This method is similar to #error(String, Throwable)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log",MessageFormatter,error,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void error(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1659,"This method is similar to #warn(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",warn,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1660,"Formats messages according to very simple substitution rules. Substitutions
 can be made 1, 2 or more arguments.
 For example,
 MessageFormatter.format(&quot;Hi {}.&quot;, &quot;there&quot;)
 will return the string ""Hi there."".
 The {} pair is called the formatting anchor. It serves to designate
 the location where arguments need to be substituted within the message
 pattern.
 In case your message contains the '{' or the '}' character, you do not have
 to do anything special unless the '}' character immediately follows '{'. For
 example,
 MessageFormatter.format(&quot;Set {1,2,3} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {1,2,3} is not equal to 1,2."".
 If for whatever reason you need to place the string ""{}"" in the message
 without its formatting anchor meaning, then you need to escape the
 '{' character with '\', that is the backslash character. Only the '{'
 character should be escaped. There is no need to escape the '}' character.
 For example,
 MessageFormatter.format(&quot;Set \\{} is not equal to {}.&quot;, &quot;1,2&quot;);
 will return the string ""Set {} is not equal to 1,2."".
 The escaping behavior just described can be overridden by escaping the escape
 character '\'. Calling
 MessageFormatter.format(&quot;File name is C:\\\\{}.&quot;, &quot;file.zip&quot;);
 will return the string ""File name is C:\file.zip"".
 The formatting conventions are different than those of MessageFormat
 which ships with the Java platform. This is justified by the fact that
 SLF4J's implementation is 10 times faster than that of MessageFormat.
 This local performance difference is both measurable and significant in the
 larger context of the complete logging processing chain.
 See also #format(String, Object),
 #format(String, Object, Object) and
 #arrayFormat(String, Object[]) methods for more details.
 @author Ceki G&uuml;lc&uuml;
 @author Joern Huxhorn
 ","Similar to #isInfoEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return true if this logger is warn enabled, false otherwise",MessageFormatter,isInfoEnabled,"<!-- META {""entityType"": ""Class"", ""entitySignature"": ""MessageFormatter"", ""entityFile"": ""MessageFormatter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isInfoEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1661,"Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument","Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the WARN level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for WARN. The variants taking
 #warn(String, Object) one and #warn(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",info,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1662,"Put a context value (the val parameter) as identified with
 the key parameter into the current thread's context map.
 The key parameter cannot be null. The code>val parameter
 can be null only if the underlying implementation supports it.
 If the current thread does not have a context map it is created as a side
 effect of this call.","This method is similar to #trace(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument
 @since 1.4",put,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void put(String key, String val)"", ""entityFile"": ""MDCAdapter.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->",0
1663,"Log a message at the DEBUG level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the DEBUG level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for DEBUG. The variants taking
 #debug(String, Object) one and #debug(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments","This method is similar to #debug(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument",debug,debug,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1664,"This method is similar to #info(String, Throwable) method
 except that the marker data is also taken into consideration.
 @param marker the marker data for this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",info,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1665,"Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",info,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1666,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the WARN level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg the argument",debug,warn,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1667,"Log a message with the specific Marker at the DEBUG level.
 @param marker the marker data specific to this log statement
 @param msg the message string to be logged","Log a message at the INFO level according to the specified format
 and arguments.
 This form avoids superfluous string concatenation when the logger
 is disabled for the INFO level. However, this variant incurs the hidden
 (and relatively small) cost of creating an Object[] before invoking the method,
 even if this logger is disabled for INFO. The variants taking
 #info(String, Object) one and #info(String, Object, Object) two
 arguments exist solely in order to avoid this hidden cost.
 @param format the format string
 @param arguments a list of 3 or more arguments",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String msg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1668,"Return an appropriate Logger instance as specified by the
 name parameter.
 If the name parameter is equal to Logger#ROOT_LOGGER_NAME, that is
 the string value ""ROOT"" (case insensitive), then the root logger of the
 underlying logging system is returned.
 Null-valued name arguments are considered invalid.
 Certain extremely simple logging systems, e.g. NOP, may always
 return the same logger instance regardless of the requested name.
 @param name the name of the Logger to return
 @return a Logger instance","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",getLogger,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public Logger getLogger(String name)"", ""entityFile"": ""ILoggerFactory.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1669,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","This method is similar to #info(String, Object...)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arguments a list of 3 or more arguments",log,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object... arguments)"", ""entityFile"": ""Logger.java""} -->",0
1670,"This method is similar to #trace(String, Object) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg the argument
 @since 1.4","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",trace,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1671,"Log a message at the TRACE level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the TRACE level.
 @param format the format string
 @param arg the argument
 @since 1.4","This method is similar to #trace(String, Throwable) method except that the
 marker data is also taken into consideration.
 @param marker the marker data specific to this log statement
 @param msg the message accompanying the exception
 @param t the exception (throwable) to log
 @since 1.4",trace,trace,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void trace(Marker marker, String msg, Throwable t)"", ""entityFile"": ""Logger.java""} -->",0
1672,"Printing method with support for location information.
 @param marker The marker to be used for this event, may be null.
 @param fqcn The fully qualified class name of the logger instance,
 typically the logger class, logger bridge or a logger wrapper.
 @param level One of the level integers defined in this interface
 @param message The message for the log event
 @param t Throwable associated with the log event, may be null.","Markers are named objects used to enrich log statements. Conforming logging
 system Implementations of SLF4J determine how information conveyed by markers
 are used, if at all. In particular, many conforming logging systems ignore
 marker data.
 Markers can contain references to other markers, which in turn may contain
 references of their own.
 @author Ceki G&uuml;lc&uuml;",log,Marker,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void log(Marker marker, String fqcn, int level, String message, Object[] argArray, Throwable t)"", ""entityFile"": ""LocationAwareLogger.java""} -->","<!-- META {""entityType"": ""Interface"", ""entitySignature"": ""Marker"", ""entityFile"": ""Marker.java""} -->",0
1673,"This method is similar to #info(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isWarnEnabled() method except that the marker
 data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the WARN level,
 false otherwise.",info,isWarnEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isWarnEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
1674,"This method is similar to #debug(String, Object, Object)
 method except that the marker data is also taken into
 consideration.
 @param marker the marker data specific to this log statement
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Log a message at the INFO level according to the specified format
 and argument.
 This form avoids superfluous object creation when the logger
 is disabled for the INFO level.
 @param format the format string
 @param arg the argument",debug,info,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void debug(Marker marker, String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void info(String format, Object arg)"", ""entityFile"": ""Logger.java""} -->",0
1675,"Log a message at the WARN level according to the specified format
 and arguments.
 This form avoids superfluous object creation when the logger
 is disabled for the WARN level.
 @param format the format string
 @param arg1 the first argument
 @param arg2 the second argument","Similar to #isErrorEnabled() method except that the
 marker data is also taken into consideration.
 @param marker The marker data to take into consideration
 @return True if this Logger is enabled for the ERROR level,
 false otherwise.",warn,isErrorEnabled,"<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public void warn(String format, Object arg1, Object arg2)"", ""entityFile"": ""Logger.java""} -->","<!-- META {""entityType"": ""Method"", ""entitySignature"": ""public boolean isErrorEnabled(Marker marker)"", ""entityFile"": ""Logger.java""} -->",0
